// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: oauth/oauth.proto

package oauth

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	common "github.com/Sensory-Cloud/go-sdk/pkg/generated/common"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = common.KeyType(0)
)

// define the regex for a UUID once up-front
var _oauth_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on TokenRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenRequestMultiError, or
// nil if none found.
func (m *TokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetClientId()); err != nil {
		err = TokenRequestValidationError{
			field:  "ClientId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Secret

	if len(errors) > 0 {
		return TokenRequestMultiError(errors)
	}

	return nil
}

func (m *TokenRequest) _validateUuid(uuid string) error {
	if matched := _oauth_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// TokenRequestMultiError is an error wrapping multiple validation errors
// returned by TokenRequest.ValidateAll() if the designated constraints aren't met.
type TokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenRequestMultiError) AllErrors() []error { return m }

// TokenRequestValidationError is the validation error returned by
// TokenRequest.Validate if the designated constraints aren't met.
type TokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenRequestValidationError) ErrorName() string { return "TokenRequestValidationError" }

// Error satisfies the builtin error interface
func (e TokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenRequestValidationError{}

// Validate checks the field values on SignTokenRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SignTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SignTokenRequestMultiError, or nil if none found.
func (m *SignTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetSubject()); l < 1 || l > 127 {
		err := SignTokenRequestValidationError{
			field:  "Subject",
			reason: "value length must be between 1 and 127 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := SignTokenRequest_TokenScope_name[int32(m.GetScope())]; !ok {
		err := SignTokenRequestValidationError{
			field:  "Scope",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SignTokenRequestMultiError(errors)
	}

	return nil
}

// SignTokenRequestMultiError is an error wrapping multiple validation errors
// returned by SignTokenRequest.ValidateAll() if the designated constraints
// aren't met.
type SignTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignTokenRequestMultiError) AllErrors() []error { return m }

// SignTokenRequestValidationError is the validation error returned by
// SignTokenRequest.Validate if the designated constraints aren't met.
type SignTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignTokenRequestValidationError) ErrorName() string { return "SignTokenRequestValidationError" }

// Error satisfies the builtin error interface
func (e SignTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignTokenRequestValidationError{}

// Validate checks the field values on WhoAmIRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WhoAmIRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WhoAmIRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WhoAmIRequestMultiError, or
// nil if none found.
func (m *WhoAmIRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WhoAmIRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return WhoAmIRequestMultiError(errors)
	}

	return nil
}

// WhoAmIRequestMultiError is an error wrapping multiple validation errors
// returned by WhoAmIRequest.ValidateAll() if the designated constraints
// aren't met.
type WhoAmIRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WhoAmIRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WhoAmIRequestMultiError) AllErrors() []error { return m }

// WhoAmIRequestValidationError is the validation error returned by
// WhoAmIRequest.Validate if the designated constraints aren't met.
type WhoAmIRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhoAmIRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhoAmIRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhoAmIRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhoAmIRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhoAmIRequestValidationError) ErrorName() string { return "WhoAmIRequestValidationError" }

// Error satisfies the builtin error interface
func (e WhoAmIRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhoAmIRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhoAmIRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhoAmIRequestValidationError{}

// Validate checks the field values on WhoAmIResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WhoAmIResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WhoAmIResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WhoAmIResponseMultiError,
// or nil if none found.
func (m *WhoAmIResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WhoAmIResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for TenantId

	if len(errors) > 0 {
		return WhoAmIResponseMultiError(errors)
	}

	return nil
}

// WhoAmIResponseMultiError is an error wrapping multiple validation errors
// returned by WhoAmIResponse.ValidateAll() if the designated constraints
// aren't met.
type WhoAmIResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WhoAmIResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WhoAmIResponseMultiError) AllErrors() []error { return m }

// WhoAmIResponseValidationError is the validation error returned by
// WhoAmIResponse.Validate if the designated constraints aren't met.
type WhoAmIResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhoAmIResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhoAmIResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhoAmIResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhoAmIResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhoAmIResponseValidationError) ErrorName() string { return "WhoAmIResponseValidationError" }

// Error satisfies the builtin error interface
func (e WhoAmIResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhoAmIResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhoAmIResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhoAmIResponseValidationError{}

// Validate checks the field values on PublicKeyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PublicKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicKeyRequestMultiError, or nil if none found.
func (m *PublicKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetKeyId()); err != nil {
		err = PublicKeyRequestValidationError{
			field:  "KeyId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PublicKeyRequestMultiError(errors)
	}

	return nil
}

func (m *PublicKeyRequest) _validateUuid(uuid string) error {
	if matched := _oauth_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// PublicKeyRequestMultiError is an error wrapping multiple validation errors
// returned by PublicKeyRequest.ValidateAll() if the designated constraints
// aren't met.
type PublicKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicKeyRequestMultiError) AllErrors() []error { return m }

// PublicKeyRequestValidationError is the validation error returned by
// PublicKeyRequest.Validate if the designated constraints aren't met.
type PublicKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicKeyRequestValidationError) ErrorName() string { return "PublicKeyRequestValidationError" }

// Error satisfies the builtin error interface
func (e PublicKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicKeyRequestValidationError{}

// Validate checks the field values on PublicKeyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PublicKeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublicKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublicKeyResponseMultiError, or nil if none found.
func (m *PublicKeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublicKeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublicKey

	// no validation rules for KeyType

	if len(errors) > 0 {
		return PublicKeyResponseMultiError(errors)
	}

	return nil
}

// PublicKeyResponseMultiError is an error wrapping multiple validation errors
// returned by PublicKeyResponse.ValidateAll() if the designated constraints
// aren't met.
type PublicKeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublicKeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublicKeyResponseMultiError) AllErrors() []error { return m }

// PublicKeyResponseValidationError is the validation error returned by
// PublicKeyResponse.Validate if the designated constraints aren't met.
type PublicKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublicKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublicKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublicKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublicKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublicKeyResponseValidationError) ErrorName() string {
	return "PublicKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublicKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublicKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublicKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublicKeyResponseValidationError{}
