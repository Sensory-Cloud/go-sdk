// sensory.api.common

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: common/common.proto

package common

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Generic NULL value
type Void int32

const (
	Void_VOID_VALUE Void = 0
)

// Enum value maps for Void.
var (
	Void_name = map[int32]string{
		0: "VOID_VALUE",
	}
	Void_value = map[string]int32{
		"VOID_VALUE": 0,
	}
)

func (x Void) Enum() *Void {
	p := new(Void)
	*p = x
	return p
}

func (x Void) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Void) Descriptor() protoreflect.EnumDescriptor {
	return file_common_common_proto_enumTypes[0].Descriptor()
}

func (Void) Type() protoreflect.EnumType {
	return &file_common_common_proto_enumTypes[0]
}

func (x Void) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Void.Descriptor instead.
func (Void) EnumDescriptor() ([]byte, []int) {
	return file_common_common_proto_rawDescGZIP(), []int{0}
}

// A type of key supported by the API
// Note: if you change this enum, ensure to update schema.prisma KeyType
type KeyType int32

const (
	// General Public key - kept for backwards compatability
	KeyType_PUBLIC_KEY KeyType = 0
	// ED25519 Public key used for asymmetric cryptographic operations
	KeyType_PUBLIC_KEY_ED25519 KeyType = 1
	// Shared secret string
	KeyType_SHARED_SECRET KeyType = 3
	// AES-256 32 byte string
	KeyType_AES_256 KeyType = 4
)

// Enum value maps for KeyType.
var (
	KeyType_name = map[int32]string{
		0: "PUBLIC_KEY",
		1: "PUBLIC_KEY_ED25519",
		3: "SHARED_SECRET",
		4: "AES_256",
	}
	KeyType_value = map[string]int32{
		"PUBLIC_KEY":         0,
		"PUBLIC_KEY_ED25519": 1,
		"SHARED_SECRET":      3,
		"AES_256":            4,
	}
)

func (x KeyType) Enum() *KeyType {
	p := new(KeyType)
	*p = x
	return p
}

func (x KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_common_proto_enumTypes[1].Descriptor()
}

func (KeyType) Type() protoreflect.EnumType {
	return &file_common_common_proto_enumTypes[1]
}

func (x KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyType.Descriptor instead.
func (KeyType) EnumDescriptor() ([]byte, []int) {
	return file_common_common_proto_rawDescGZIP(), []int{1}
}

type FeatureFlag int32

const (
	// TssvAll feature set
	FeatureFlag_TSSV_ALL FeatureFlag = 0
	// TsAll feature set
	FeatureFlag_TS_ALL FeatureFlag = 1
	// TnlAll feature set
	FeatureFlag_TNL_ALL FeatureFlag = 2
)

// Enum value maps for FeatureFlag.
var (
	FeatureFlag_name = map[int32]string{
		0: "TSSV_ALL",
		1: "TS_ALL",
		2: "TNL_ALL",
	}
	FeatureFlag_value = map[string]int32{
		"TSSV_ALL": 0,
		"TS_ALL":   1,
		"TNL_ALL":  2,
	}
)

func (x FeatureFlag) Enum() *FeatureFlag {
	p := new(FeatureFlag)
	*p = x
	return p
}

func (x FeatureFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_common_common_proto_enumTypes[2].Descriptor()
}

func (FeatureFlag) Type() protoreflect.EnumType {
	return &file_common_common_proto_enumTypes[2]
}

func (x FeatureFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureFlag.Descriptor instead.
func (FeatureFlag) EnumDescriptor() ([]byte, []int) {
	return file_common_common_proto_rawDescGZIP(), []int{2}
}

// A type of model supported by this API
// Note: if you change this enum, ensure to update schema.prisma ModelType
type ModelType int32

const (
	// Unknown Model Type
	ModelType_UNKNOWN ModelType = 0
	// Voice Auth Text Independent (Enrollable)
	ModelType_VOICE_BIOMETRIC_TEXT_INDEPENDENT ModelType = 1
	// Voice Wakeword (Enrollable)
	ModelType_VOICE_BIOMETRIC_WAKEWORD ModelType = 2
	// Voice Wakeword
	ModelType_VOICE_EVENT_WAKEWORD ModelType = 3
	// Voice Grammar Recognition such as LVCSR
	ModelType_VOICE_TRANSCRIBE_GRAMMAR ModelType = 4
	// Voice Commands and Search recognition
	ModelType_VOICE_TRANSCRIBE_COMMAND_AND_SEARCH ModelType = 5
	// Voice activity detection
	ModelType_VOICE_RECOGNITION_ACTIVITY_DETECTION ModelType = 6
	// Voice feature extractor
	ModelType_VOICE_FEATURE_EXTRACTOR ModelType = 7
	// Voice digit recognizer for liveness
	ModelType_VOICE_BIOMETRIC_LIVENESS_DIGIT ModelType = 8
	// Voice Auth Text Dependent (Enrollable)
	ModelType_VOICE_BIOMETRIC_TEXT_DEPENDENT ModelType = 9
	// Voice Synthesis
	ModelType_VOICE_SYNTHESIS ModelType = 10
	// Sound Event Auth (Enrollable)
	ModelType_SOUND_EVENT_ENROLLABLE ModelType = 100
	// Sound Event Revalidation
	ModelType_SOUND_EVENT_REVALIDATION ModelType = 101
	// Sound Event Recognition
	ModelType_SOUND_EVENT_FIXED ModelType = 102
	// Sound Scene Recognition
	ModelType_SOUND_SCENE_FIXED ModelType = 103
	// Face Auth (Enrollable)
	ModelType_FACE_BIOMETRIC ModelType = 201
	// Face Recognition
	ModelType_FACE_RECOGNITION ModelType = 202
	// Object Recognition
	ModelType_OBJECT_RECOGNITION ModelType = 203
	// Image Transformation
	ModelType_IMAGE_TRANSFORM ModelType = 204
)

// Enum value maps for ModelType.
var (
	ModelType_name = map[int32]string{
		0:   "UNKNOWN",
		1:   "VOICE_BIOMETRIC_TEXT_INDEPENDENT",
		2:   "VOICE_BIOMETRIC_WAKEWORD",
		3:   "VOICE_EVENT_WAKEWORD",
		4:   "VOICE_TRANSCRIBE_GRAMMAR",
		5:   "VOICE_TRANSCRIBE_COMMAND_AND_SEARCH",
		6:   "VOICE_RECOGNITION_ACTIVITY_DETECTION",
		7:   "VOICE_FEATURE_EXTRACTOR",
		8:   "VOICE_BIOMETRIC_LIVENESS_DIGIT",
		9:   "VOICE_BIOMETRIC_TEXT_DEPENDENT",
		10:  "VOICE_SYNTHESIS",
		100: "SOUND_EVENT_ENROLLABLE",
		101: "SOUND_EVENT_REVALIDATION",
		102: "SOUND_EVENT_FIXED",
		103: "SOUND_SCENE_FIXED",
		201: "FACE_BIOMETRIC",
		202: "FACE_RECOGNITION",
		203: "OBJECT_RECOGNITION",
		204: "IMAGE_TRANSFORM",
	}
	ModelType_value = map[string]int32{
		"UNKNOWN":                              0,
		"VOICE_BIOMETRIC_TEXT_INDEPENDENT":     1,
		"VOICE_BIOMETRIC_WAKEWORD":             2,
		"VOICE_EVENT_WAKEWORD":                 3,
		"VOICE_TRANSCRIBE_GRAMMAR":             4,
		"VOICE_TRANSCRIBE_COMMAND_AND_SEARCH":  5,
		"VOICE_RECOGNITION_ACTIVITY_DETECTION": 6,
		"VOICE_FEATURE_EXTRACTOR":              7,
		"VOICE_BIOMETRIC_LIVENESS_DIGIT":       8,
		"VOICE_BIOMETRIC_TEXT_DEPENDENT":       9,
		"VOICE_SYNTHESIS":                      10,
		"SOUND_EVENT_ENROLLABLE":               100,
		"SOUND_EVENT_REVALIDATION":             101,
		"SOUND_EVENT_FIXED":                    102,
		"SOUND_SCENE_FIXED":                    103,
		"FACE_BIOMETRIC":                       201,
		"FACE_RECOGNITION":                     202,
		"OBJECT_RECOGNITION":                   203,
		"IMAGE_TRANSFORM":                      204,
	}
)

func (x ModelType) Enum() *ModelType {
	p := new(ModelType)
	*p = x
	return p
}

func (x ModelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_common_proto_enumTypes[3].Descriptor()
}

func (ModelType) Type() protoreflect.EnumType {
	return &file_common_common_proto_enumTypes[3]
}

func (x ModelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelType.Descriptor instead.
func (ModelType) EnumDescriptor() ([]byte, []int) {
	return file_common_common_proto_rawDescGZIP(), []int{3}
}

// An enum denoting the type of Sensory technology employed
type TechnologyType int32

const (
	// Not Set type - used internally
	TechnologyType_NOT_SET TechnologyType = 0
	// Truly Secure Speaker Verification, an audio authentication and wakeword tool
	TechnologyType_TSSV TechnologyType = 1
	// Truly Secure, a face identification and liveness suite
	TechnologyType_TS TechnologyType = 2
	// Truly Natural, a wakeword and speech recognition tool
	TechnologyType_TNL TechnologyType = 3
	// Speech to Text, a large scale neural speech recognition tool
	TechnologyType_STT TechnologyType = 4
	// Text to Speech, a voice synthesis tool
	TechnologyType_TTS TechnologyType = 5
)

// Enum value maps for TechnologyType.
var (
	TechnologyType_name = map[int32]string{
		0: "NOT_SET",
		1: "TSSV",
		2: "TS",
		3: "TNL",
		4: "STT",
		5: "TTS",
	}
	TechnologyType_value = map[string]int32{
		"NOT_SET": 0,
		"TSSV":    1,
		"TS":      2,
		"TNL":     3,
		"STT":     4,
		"TTS":     5,
	}
)

func (x TechnologyType) Enum() *TechnologyType {
	p := new(TechnologyType)
	*p = x
	return p
}

func (x TechnologyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TechnologyType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_common_proto_enumTypes[4].Descriptor()
}

func (TechnologyType) Type() protoreflect.EnumType {
	return &file_common_common_proto_enumTypes[4]
}

func (x TechnologyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TechnologyType.Descriptor instead.
func (TechnologyType) EnumDescriptor() ([]byte, []int) {
	return file_common_common_proto_rawDescGZIP(), []int{4}
}

// Every type of compression that is supported
// Note: if you change this enum, ensure to update schema.prisma CompressionType
type CompressionType int32

const (
	// Image data is in grayscale instead of full color
	CompressionType_IMAGE_GRAYSCALE CompressionType = 0
)

// Enum value maps for CompressionType.
var (
	CompressionType_name = map[int32]string{
		0: "IMAGE_GRAYSCALE",
	}
	CompressionType_value = map[string]int32{
		"IMAGE_GRAYSCALE": 0,
	}
)

func (x CompressionType) Enum() *CompressionType {
	p := new(CompressionType)
	*p = x
	return p
}

func (x CompressionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompressionType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_common_proto_enumTypes[5].Descriptor()
}

func (CompressionType) Type() protoreflect.EnumType {
	return &file_common_common_proto_enumTypes[5]
}

func (x CompressionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompressionType.Descriptor instead.
func (CompressionType) EnumDescriptor() ([]byte, []int) {
	return file_common_common_proto_rawDescGZIP(), []int{5}
}

// Possible client types
type ClientType int32

const (
	// Sensory Root Token
	ClientType_ROOT ClientType = 0
	// User End Device       (E.G. Sensory SDK on Smartphone)
	ClientType_DEVICE ClientType = 1
	// Remote Cluster        (E.G. Customer-Deployed Io Cluster)
	ClientType_CLUSTER ClientType = 2
	// User Account          (E.G. Customer-Portal)
	ClientType_USER ClientType = 3
	// Super User Account    (E.G. Admin)
	ClientType_SUPER_USER ClientType = 4
	// Billing User Account   (E.G. CFO)
	ClientType_BILLING_USER ClientType = 5
)

// Enum value maps for ClientType.
var (
	ClientType_name = map[int32]string{
		0: "ROOT",
		1: "DEVICE",
		2: "CLUSTER",
		3: "USER",
		4: "SUPER_USER",
		5: "BILLING_USER",
	}
	ClientType_value = map[string]int32{
		"ROOT":         0,
		"DEVICE":       1,
		"CLUSTER":      2,
		"USER":         3,
		"SUPER_USER":   4,
		"BILLING_USER": 5,
	}
)

func (x ClientType) Enum() *ClientType {
	p := new(ClientType)
	*p = x
	return p
}

func (x ClientType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_common_proto_enumTypes[6].Descriptor()
}

func (ClientType) Type() protoreflect.EnumType {
	return &file_common_common_proto_enumTypes[6]
}

func (x ClientType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientType.Descriptor instead.
func (ClientType) EnumDescriptor() ([]byte, []int) {
	return file_common_common_proto_rawDescGZIP(), []int{6}
}

// Possible usage event type
// Note: if you change this enum, ensure to update schema.prisma EventType
type UsageEventType int32

const (
	// Authentication usage event
	UsageEventType_AUTHENTICATION UsageEventType = 0
	// Recognition usage event
	UsageEventType_RECOGNITION UsageEventType = 1
	// Enrollment usage event
	UsageEventType_ENROLLMENT UsageEventType = 2
	// Synthesis usage event
	UsageEventType_SYNTHESIS UsageEventType = 3
	// Speech to text usage event
	UsageEventType_TRANSCRIPTION UsageEventType = 4
)

// Enum value maps for UsageEventType.
var (
	UsageEventType_name = map[int32]string{
		0: "AUTHENTICATION",
		1: "RECOGNITION",
		2: "ENROLLMENT",
		3: "SYNTHESIS",
		4: "TRANSCRIPTION",
	}
	UsageEventType_value = map[string]int32{
		"AUTHENTICATION": 0,
		"RECOGNITION":    1,
		"ENROLLMENT":     2,
		"SYNTHESIS":      3,
		"TRANSCRIPTION":  4,
	}
)

func (x UsageEventType) Enum() *UsageEventType {
	p := new(UsageEventType)
	*p = x
	return p
}

func (x UsageEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UsageEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_common_proto_enumTypes[7].Descriptor()
}

func (UsageEventType) Type() protoreflect.EnumType {
	return &file_common_common_proto_enumTypes[7]
}

func (x UsageEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UsageEventType.Descriptor instead.
func (UsageEventType) EnumDescriptor() ([]byte, []int) {
	return file_common_common_proto_rawDescGZIP(), []int{7}
}

// Possible types of servers
type ServerType int32

const (
	ServerType_TITAN ServerType = 0
	ServerType_IO    ServerType = 1
)

// Enum value maps for ServerType.
var (
	ServerType_name = map[int32]string{
		0: "TITAN",
		1: "IO",
	}
	ServerType_value = map[string]int32{
		"TITAN": 0,
		"IO":    1,
	}
)

func (x ServerType) Enum() *ServerType {
	p := new(ServerType)
	*p = x
	return p
}

func (x ServerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_common_proto_enumTypes[8].Descriptor()
}

func (ServerType) Type() protoreflect.EnumType {
	return &file_common_common_proto_enumTypes[8]
}

func (x ServerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerType.Descriptor instead.
func (ServerType) EnumDescriptor() ([]byte, []int) {
	return file_common_common_proto_rawDescGZIP(), []int{8}
}

// Configuration for how data can be compressed
type CompressionConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of every compression method that was used
	Compressions []CompressionType `protobuf:"varint,1,rep,packed,name=compressions,proto3,enum=sensory.api.common.CompressionType" json:"compressions,omitempty"`
}

func (x *CompressionConfiguration) Reset() {
	*x = CompressionConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompressionConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompressionConfiguration) ProtoMessage() {}

func (x *CompressionConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_common_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompressionConfiguration.ProtoReflect.Descriptor instead.
func (*CompressionConfiguration) Descriptor() ([]byte, []int) {
	return file_common_common_proto_rawDescGZIP(), []int{0}
}

func (x *CompressionConfiguration) GetCompressions() []CompressionType {
	if x != nil {
		return x.Compressions
	}
	return nil
}

// Response from a successful token request
type TokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signed JSON web token that should be added to any subsequent request
	AccessToken string `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	// Number of seconds until this token will expire
	ExpiresIn int32 `protobuf:"varint,2,opt,name=expiresIn,proto3" json:"expiresIn,omitempty"`
	// Signing key identifier which can be used to retrieve the matching public key via the GetPublicKey request
	KeyId string `protobuf:"bytes,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	// Token type
	TokenType string `protobuf:"bytes,4,opt,name=tokenType,proto3" json:"tokenType,omitempty"`
}

func (x *TokenResponse) Reset() {
	*x = TokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenResponse) ProtoMessage() {}

func (x *TokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenResponse.ProtoReflect.Descriptor instead.
func (*TokenResponse) Descriptor() ([]byte, []int) {
	return file_common_common_proto_rawDescGZIP(), []int{1}
}

func (x *TokenResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *TokenResponse) GetExpiresIn() int32 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

func (x *TokenResponse) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *TokenResponse) GetTokenType() string {
	if x != nil {
		return x.TokenType
	}
	return ""
}

// An indication of the health of a particular service
type ServiceHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHealthy bool   `protobuf:"varint,1,opt,name=isHealthy,proto3" json:"isHealthy,omitempty"` // Is healthy indication
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`            // Name of the service
	Message   string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`      // Details of the service health
}

func (x *ServiceHealth) Reset() {
	*x = ServiceHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceHealth) ProtoMessage() {}

func (x *ServiceHealth) ProtoReflect() protoreflect.Message {
	mi := &file_common_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceHealth.ProtoReflect.Descriptor instead.
func (*ServiceHealth) Descriptor() ([]byte, []int) {
	return file_common_common_proto_rawDescGZIP(), []int{2}
}

func (x *ServiceHealth) GetIsHealthy() bool {
	if x != nil {
		return x.IsHealthy
	}
	return false
}

func (x *ServiceHealth) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceHealth) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Response from a GetHealth request
type ServerHealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHealthy     bool             `protobuf:"varint,1,opt,name=isHealthy,proto3" json:"isHealthy,omitempty"`                                      // Is healthy indication. True if all services are healthy.
	ServerVersion string           `protobuf:"bytes,2,opt,name=serverVersion,proto3" json:"serverVersion,omitempty"`                               // Currently running server version
	Id            string           `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`                                                     // Unique Identifier for the particular server
	Services      []*ServiceHealth `protobuf:"bytes,4,rep,name=services,proto3" json:"services,omitempty"`                                         // List of services and their health statuses
	ServerType    ServerType       `protobuf:"varint,5,opt,name=serverType,proto3,enum=sensory.api.common.ServerType" json:"serverType,omitempty"` // The type of server that is sending the health response
}

func (x *ServerHealthResponse) Reset() {
	*x = ServerHealthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerHealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerHealthResponse) ProtoMessage() {}

func (x *ServerHealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerHealthResponse.ProtoReflect.Descriptor instead.
func (*ServerHealthResponse) Descriptor() ([]byte, []int) {
	return file_common_common_proto_rawDescGZIP(), []int{3}
}

func (x *ServerHealthResponse) GetIsHealthy() bool {
	if x != nil {
		return x.IsHealthy
	}
	return false
}

func (x *ServerHealthResponse) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

func (x *ServerHealthResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServerHealthResponse) GetServices() []*ServiceHealth {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *ServerHealthResponse) GetServerType() ServerType {
	if x != nil {
		return x.ServerType
	}
	return ServerType_TITAN
}

// A summary of system statistics
type SystemSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu    *CpuSummary    `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory *MemorySummary `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (x *SystemSummary) Reset() {
	*x = SystemSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemSummary) ProtoMessage() {}

func (x *SystemSummary) ProtoReflect() protoreflect.Message {
	mi := &file_common_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemSummary.ProtoReflect.Descriptor instead.
func (*SystemSummary) Descriptor() ([]byte, []int) {
	return file_common_common_proto_rawDescGZIP(), []int{4}
}

func (x *SystemSummary) GetCpu() *CpuSummary {
	if x != nil {
		return x.Cpu
	}
	return nil
}

func (x *SystemSummary) GetMemory() *MemorySummary {
	if x != nil {
		return x.Memory
	}
	return nil
}

// Summary of all CPU useage as measured in ticks
type CpuSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// normal processes executing in user mode
	User uint64 `protobuf:"varint,1,opt,name=user,proto3" json:"user,omitempty"`
	// niced processes executing in user mode
	Nice uint64 `protobuf:"varint,2,opt,name=nice,proto3" json:"nice,omitempty"`
	// processes executing in kernel mode
	System uint64 `protobuf:"varint,3,opt,name=system,proto3" json:"system,omitempty"`
	// idle cpu
	Idle uint64 `protobuf:"varint,4,opt,name=idle,proto3" json:"idle,omitempty"`
	// waiting for I/O to complete
	IoWait uint64 `protobuf:"varint,5,opt,name=ioWait,proto3" json:"ioWait,omitempty"`
	// servicing interrupts
	Irq uint64 `protobuf:"varint,6,opt,name=irq,proto3" json:"irq,omitempty"`
	// servicing softirqs
	SoftIrq uint64 `protobuf:"varint,7,opt,name=softIrq,proto3" json:"softIrq,omitempty"`
	// counts the ticks spent executing other virtual hosts
	Steal uint64 `protobuf:"varint,8,opt,name=steal,proto3" json:"steal,omitempty"`
	// counts the time spent running a virtual CPU for guest operating systems under the control of the Linux kernel
	Guest uint64 `protobuf:"varint,9,opt,name=guest,proto3" json:"guest,omitempty"`
	// time spent running a niced guest
	GuestNice uint64 `protobuf:"varint,10,opt,name=guestNice,proto3" json:"guestNice,omitempty"`
}

func (x *CpuSummary) Reset() {
	*x = CpuSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CpuSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CpuSummary) ProtoMessage() {}

func (x *CpuSummary) ProtoReflect() protoreflect.Message {
	mi := &file_common_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CpuSummary.ProtoReflect.Descriptor instead.
func (*CpuSummary) Descriptor() ([]byte, []int) {
	return file_common_common_proto_rawDescGZIP(), []int{5}
}

func (x *CpuSummary) GetUser() uint64 {
	if x != nil {
		return x.User
	}
	return 0
}

func (x *CpuSummary) GetNice() uint64 {
	if x != nil {
		return x.Nice
	}
	return 0
}

func (x *CpuSummary) GetSystem() uint64 {
	if x != nil {
		return x.System
	}
	return 0
}

func (x *CpuSummary) GetIdle() uint64 {
	if x != nil {
		return x.Idle
	}
	return 0
}

func (x *CpuSummary) GetIoWait() uint64 {
	if x != nil {
		return x.IoWait
	}
	return 0
}

func (x *CpuSummary) GetIrq() uint64 {
	if x != nil {
		return x.Irq
	}
	return 0
}

func (x *CpuSummary) GetSoftIrq() uint64 {
	if x != nil {
		return x.SoftIrq
	}
	return 0
}

func (x *CpuSummary) GetSteal() uint64 {
	if x != nil {
		return x.Steal
	}
	return 0
}

func (x *CpuSummary) GetGuest() uint64 {
	if x != nil {
		return x.Guest
	}
	return 0
}

func (x *CpuSummary) GetGuestNice() uint64 {
	if x != nil {
		return x.GuestNice
	}
	return 0
}

// A summary of memory usage
type MemorySummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// total memory in use
	MemTotal uint64 `protobuf:"varint,1,opt,name=memTotal,proto3" json:"memTotal,omitempty"`
	// total memory free
	MemFree uint64 `protobuf:"varint,2,opt,name=memFree,proto3" json:"memFree,omitempty"`
	// total memory available by the system
	MemAvailable uint64 `protobuf:"varint,3,opt,name=memAvailable,proto3" json:"memAvailable,omitempty"`
}

func (x *MemorySummary) Reset() {
	*x = MemorySummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemorySummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemorySummary) ProtoMessage() {}

func (x *MemorySummary) ProtoReflect() protoreflect.Message {
	mi := &file_common_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemorySummary.ProtoReflect.Descriptor instead.
func (*MemorySummary) Descriptor() ([]byte, []int) {
	return file_common_common_proto_rawDescGZIP(), []int{6}
}

func (x *MemorySummary) GetMemTotal() uint64 {
	if x != nil {
		return x.MemTotal
	}
	return 0
}

func (x *MemorySummary) GetMemFree() uint64 {
	if x != nil {
		return x.MemFree
	}
	return 0
}

func (x *MemorySummary) GetMemAvailable() uint64 {
	if x != nil {
		return x.MemAvailable
	}
	return 0
}

// Request to create a generic client. Client type should be inferred by usage.
// This data should be stored securely on the client endpoint.
type GenericClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique Client ID as UUID
	ClientId string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	// Strong secret value (min length of 10)
	Secret string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *GenericClient) Reset() {
	*x = GenericClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericClient) ProtoMessage() {}

func (x *GenericClient) ProtoReflect() protoreflect.Message {
	mi := &file_common_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericClient.ProtoReflect.Descriptor instead.
func (*GenericClient) Descriptor() ([]byte, []int) {
	return file_common_common_proto_rawDescGZIP(), []int{7}
}

func (x *GenericClient) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GenericClient) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

// Tenant response
type TenantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique uuid for this tenant
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The unique name for this tenant
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Created timestamp
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// Last updated timestamp
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *TenantResponse) Reset() {
	*x = TenantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_common_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantResponse) ProtoMessage() {}

func (x *TenantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_common_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantResponse.ProtoReflect.Descriptor instead.
func (*TenantResponse) Descriptor() ([]byte, []int) {
	return file_common_common_proto_rawDescGZIP(), []int{8}
}

func (x *TenantResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TenantResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TenantResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TenantResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// A message for telling the server how to paginate and order data
type PaginationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parameter to order the data by. If empty, the server will choose a default ordering
	Ordering string `protobuf:"bytes,1,opt,name=ordering,proto3" json:"ordering,omitempty"`
	// If "True" the data will be sorted in decending order
	Decending bool `protobuf:"varint,2,opt,name=decending,proto3" json:"decending,omitempty"`
	// The page index to return
	PageIndex int32 `protobuf:"varint,3,opt,name=pageIndex,proto3" json:"pageIndex,omitempty"`
	// The preferred number of elements per page. If zero the server will choose a default size
	// The server enforces a maximum page size of 100
	PageSize int32 `protobuf:"varint,4,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
}

func (x *PaginationOptions) Reset() {
	*x = PaginationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_common_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationOptions) ProtoMessage() {}

func (x *PaginationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_common_common_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationOptions.ProtoReflect.Descriptor instead.
func (*PaginationOptions) Descriptor() ([]byte, []int) {
	return file_common_common_proto_rawDescGZIP(), []int{9}
}

func (x *PaginationOptions) GetOrdering() string {
	if x != nil {
		return x.Ordering
	}
	return ""
}

func (x *PaginationOptions) GetDecending() bool {
	if x != nil {
		return x.Decending
	}
	return false
}

func (x *PaginationOptions) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *PaginationOptions) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// A message for the server to tell how the data has been paginated
type PaginationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parameter by which the data has been ordered by
	Ordering string `protobuf:"bytes,1,opt,name=ordering,proto3" json:"ordering,omitempty"`
	// "True" if the data has been sorted in decending order
	Decending bool `protobuf:"varint,2,opt,name=decending,proto3" json:"decending,omitempty"`
	// A list of all possible parameters that the data can be ordered by
	PossibleOrderings []string `protobuf:"bytes,3,rep,name=possibleOrderings,proto3" json:"possibleOrderings,omitempty"`
	// The total count of data objects
	TotalCount int64 `protobuf:"varint,4,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	// The page size of the data
	PageSize int32 `protobuf:"varint,5,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	// The page index for the previous page. If negative there is no previous page
	PrevPageIndex int32 `protobuf:"varint,6,opt,name=prevPageIndex,proto3" json:"prevPageIndex,omitempty"`
	// The page index for the current page.
	CurrentPageIndex int32 `protobuf:"varint,7,opt,name=currentPageIndex,proto3" json:"currentPageIndex,omitempty"`
	// The page index for the next page. If negative there is no next page
	NextPageIndex int32 `protobuf:"varint,8,opt,name=nextPageIndex,proto3" json:"nextPageIndex,omitempty"`
}

func (x *PaginationResponse) Reset() {
	*x = PaginationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_common_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginationResponse) ProtoMessage() {}

func (x *PaginationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_common_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginationResponse.ProtoReflect.Descriptor instead.
func (*PaginationResponse) Descriptor() ([]byte, []int) {
	return file_common_common_proto_rawDescGZIP(), []int{10}
}

func (x *PaginationResponse) GetOrdering() string {
	if x != nil {
		return x.Ordering
	}
	return ""
}

func (x *PaginationResponse) GetDecending() bool {
	if x != nil {
		return x.Decending
	}
	return false
}

func (x *PaginationResponse) GetPossibleOrderings() []string {
	if x != nil {
		return x.PossibleOrderings
	}
	return nil
}

func (x *PaginationResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *PaginationResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PaginationResponse) GetPrevPageIndex() int32 {
	if x != nil {
		return x.PrevPageIndex
	}
	return 0
}

func (x *PaginationResponse) GetCurrentPageIndex() int32 {
	if x != nil {
		return x.CurrentPageIndex
	}
	return 0
}

func (x *PaginationResponse) GetNextPageIndex() int32 {
	if x != nil {
		return x.NextPageIndex
	}
	return 0
}

// A message with an encrypted enrollment token and a token expiration date
type EnrollmentToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Encrypted token containing enrollment information
	Token []byte `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// The number of seconds until the enrollment token expires
	// An expiration of 0 means that the enrollment token never expires
	Expiration int64 `protobuf:"varint,2,opt,name=expiration,proto3" json:"expiration,omitempty"`
}

func (x *EnrollmentToken) Reset() {
	*x = EnrollmentToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_common_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrollmentToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrollmentToken) ProtoMessage() {}

func (x *EnrollmentToken) ProtoReflect() protoreflect.Message {
	mi := &file_common_common_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrollmentToken.ProtoReflect.Descriptor instead.
func (*EnrollmentToken) Descriptor() ([]byte, []int) {
	return file_common_common_proto_rawDescGZIP(), []int{11}
}

func (x *EnrollmentToken) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *EnrollmentToken) GetExpiration() int64 {
	if x != nil {
		return x.Expiration
	}
	return 0
}

var File_common_common_proto protoreflect.FileDescriptor

var file_common_common_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x63, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x47, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5b,
	0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x14,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x03, 0x63, 0x70, 0x75,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x70, 0x75, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x43, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0xee, 0x01, 0x0a, 0x0a, 0x43,
	0x70, 0x75, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x6e, 0x69, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x64, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x69, 0x64, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69,
	0x6f, 0x57, 0x61, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x72, 0x71, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x69, 0x72, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x66, 0x74, 0x49,
	0x72, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x6f, 0x66, 0x74, 0x49, 0x72,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x67, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x67, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x67, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x69, 0x63, 0x65, 0x22, 0x69, 0x0a, 0x0d, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x65, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6d, 0x65, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x46,
	0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x46, 0x72,
	0x65, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x56, 0x0a, 0x0d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x0a, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0xa8,
	0x01, 0x0a, 0x0e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x65, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x64, 0x65, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0xb0, 0x02, 0x0a, 0x12, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x63, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x70, 0x6f, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x47, 0x0a, 0x0f, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a,
	0x16, 0x0a, 0x04, 0x56, 0x6f, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x4f, 0x49, 0x44, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x00, 0x2a, 0x51, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x45, 0x44, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x48,
	0x41, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x03, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x04, 0x2a, 0x34, 0x0a, 0x0b, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x53, 0x53,
	0x56, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x53, 0x5f, 0x41, 0x4c,
	0x4c, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x4e, 0x4c, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02,
	0x2a, 0xa4, 0x04, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x56,
	0x4f, 0x49, 0x43, 0x45, 0x5f, 0x42, 0x49, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54,
	0x45, 0x58, 0x54, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x42, 0x49, 0x4f, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x5f, 0x57, 0x41, 0x4b, 0x45, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x02, 0x12,
	0x18, 0x0a, 0x14, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x57,
	0x41, 0x4b, 0x45, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x4f, 0x49,
	0x43, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x47, 0x52,
	0x41, 0x4d, 0x4d, 0x41, 0x52, 0x10, 0x04, 0x12, 0x27, 0x0a, 0x23, 0x56, 0x4f, 0x49, 0x43, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x41, 0x4e, 0x44, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x05,
	0x12, 0x28, 0x0a, 0x24, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x44,
	0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x4f,
	0x49, 0x43, 0x45, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52,
	0x41, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x56, 0x4f, 0x49, 0x43, 0x45,
	0x5f, 0x42, 0x49, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x4e,
	0x45, 0x53, 0x53, 0x5f, 0x44, 0x49, 0x47, 0x49, 0x54, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x56,
	0x4f, 0x49, 0x43, 0x45, 0x5f, 0x42, 0x49, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54,
	0x45, 0x58, 0x54, 0x5f, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x10, 0x09, 0x12,
	0x13, 0x0a, 0x0f, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x48, 0x45, 0x53,
	0x49, 0x53, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x64,
	0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x52, 0x45, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x65, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x49,
	0x58, 0x45, 0x44, 0x10, 0x66, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x53,
	0x43, 0x45, 0x4e, 0x45, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x10, 0x67, 0x12, 0x13, 0x0a, 0x0e,
	0x46, 0x41, 0x43, 0x45, 0x5f, 0x42, 0x49, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0xc9,
	0x01, 0x12, 0x15, 0x0a, 0x10, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xca, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xcb,
	0x01, 0x12, 0x14, 0x0a, 0x0f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x4f, 0x52, 0x4d, 0x10, 0xcc, 0x01, 0x2a, 0x4a, 0x0a, 0x0e, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x53, 0x53, 0x56, 0x10, 0x01,
	0x12, 0x06, 0x0a, 0x02, 0x54, 0x53, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x4e, 0x4c, 0x10,
	0x03, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x54, 0x54, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x54,
	0x53, 0x10, 0x05, 0x2a, 0x26, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f,
	0x47, 0x52, 0x41, 0x59, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x10, 0x00, 0x2a, 0x5b, 0x0a, 0x0a, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x4f, 0x4f,
	0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x55, 0x53, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x50, 0x45, 0x52, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e,
	0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x05, 0x2a, 0x67, 0x0a, 0x0e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x55,
	0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x59, 0x4e, 0x54, 0x48, 0x45, 0x53, 0x49, 0x53, 0x10, 0x03, 0x12, 0x11,
	0x0a, 0x0d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x04, 0x2a, 0x1f, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x09, 0x0a, 0x05, 0x54, 0x49, 0x54, 0x41, 0x4e, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4f,
	0x10, 0x01, 0x42, 0x6f, 0x0a, 0x1a, 0x61, 0x69, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x42, 0x15, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x41, 0x70, 0x69, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x69, 0x74, 0x61, 0x6e,
	0x2e, 0x67, 0x69, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_common_proto_rawDescOnce sync.Once
	file_common_common_proto_rawDescData = file_common_common_proto_rawDesc
)

func file_common_common_proto_rawDescGZIP() []byte {
	file_common_common_proto_rawDescOnce.Do(func() {
		file_common_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_common_proto_rawDescData)
	})
	return file_common_common_proto_rawDescData
}

var file_common_common_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_common_common_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_common_common_proto_goTypes = []interface{}{
	(Void)(0),                        // 0: sensory.api.common.Void
	(KeyType)(0),                     // 1: sensory.api.common.KeyType
	(FeatureFlag)(0),                 // 2: sensory.api.common.FeatureFlag
	(ModelType)(0),                   // 3: sensory.api.common.ModelType
	(TechnologyType)(0),              // 4: sensory.api.common.TechnologyType
	(CompressionType)(0),             // 5: sensory.api.common.CompressionType
	(ClientType)(0),                  // 6: sensory.api.common.ClientType
	(UsageEventType)(0),              // 7: sensory.api.common.UsageEventType
	(ServerType)(0),                  // 8: sensory.api.common.ServerType
	(*CompressionConfiguration)(nil), // 9: sensory.api.common.CompressionConfiguration
	(*TokenResponse)(nil),            // 10: sensory.api.common.TokenResponse
	(*ServiceHealth)(nil),            // 11: sensory.api.common.ServiceHealth
	(*ServerHealthResponse)(nil),     // 12: sensory.api.common.ServerHealthResponse
	(*SystemSummary)(nil),            // 13: sensory.api.common.SystemSummary
	(*CpuSummary)(nil),               // 14: sensory.api.common.CpuSummary
	(*MemorySummary)(nil),            // 15: sensory.api.common.MemorySummary
	(*GenericClient)(nil),            // 16: sensory.api.common.GenericClient
	(*TenantResponse)(nil),           // 17: sensory.api.common.TenantResponse
	(*PaginationOptions)(nil),        // 18: sensory.api.common.PaginationOptions
	(*PaginationResponse)(nil),       // 19: sensory.api.common.PaginationResponse
	(*EnrollmentToken)(nil),          // 20: sensory.api.common.EnrollmentToken
	(*timestamppb.Timestamp)(nil),    // 21: google.protobuf.Timestamp
}
var file_common_common_proto_depIdxs = []int32{
	5,  // 0: sensory.api.common.CompressionConfiguration.compressions:type_name -> sensory.api.common.CompressionType
	11, // 1: sensory.api.common.ServerHealthResponse.services:type_name -> sensory.api.common.ServiceHealth
	8,  // 2: sensory.api.common.ServerHealthResponse.serverType:type_name -> sensory.api.common.ServerType
	14, // 3: sensory.api.common.SystemSummary.cpu:type_name -> sensory.api.common.CpuSummary
	15, // 4: sensory.api.common.SystemSummary.memory:type_name -> sensory.api.common.MemorySummary
	21, // 5: sensory.api.common.TenantResponse.createdAt:type_name -> google.protobuf.Timestamp
	21, // 6: sensory.api.common.TenantResponse.updatedAt:type_name -> google.protobuf.Timestamp
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_common_common_proto_init() }
func file_common_common_proto_init() {
	if File_common_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompressionConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerHealthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CpuSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemorySummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_common_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_common_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_common_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_common_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnrollmentToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_common_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_common_proto_goTypes,
		DependencyIndexes: file_common_common_proto_depIdxs,
		EnumInfos:         file_common_common_proto_enumTypes,
		MessageInfos:      file_common_common_proto_msgTypes,
	}.Build()
	File_common_common_proto = out.File
	file_common_common_proto_rawDesc = nil
	file_common_common_proto_goTypes = nil
	file_common_common_proto_depIdxs = nil
}
