// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/common.proto

package common

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _common_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CompressionConfiguration with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompressionConfiguration) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompressionConfiguration with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompressionConfigurationMultiError, or nil if none found.
func (m *CompressionConfiguration) ValidateAll() error {
	return m.validate(true)
}

func (m *CompressionConfiguration) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CompressionConfigurationMultiError(errors)
	}

	return nil
}

// CompressionConfigurationMultiError is an error wrapping multiple validation
// errors returned by CompressionConfiguration.ValidateAll() if the designated
// constraints aren't met.
type CompressionConfigurationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompressionConfigurationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompressionConfigurationMultiError) AllErrors() []error { return m }

// CompressionConfigurationValidationError is the validation error returned by
// CompressionConfiguration.Validate if the designated constraints aren't met.
type CompressionConfigurationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompressionConfigurationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompressionConfigurationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompressionConfigurationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompressionConfigurationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompressionConfigurationValidationError) ErrorName() string {
	return "CompressionConfigurationValidationError"
}

// Error satisfies the builtin error interface
func (e CompressionConfigurationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompressionConfiguration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompressionConfigurationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompressionConfigurationValidationError{}

// Validate checks the field values on TokenResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenResponseMultiError, or
// nil if none found.
func (m *TokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for ExpiresIn

	// no validation rules for KeyId

	// no validation rules for TokenType

	if len(errors) > 0 {
		return TokenResponseMultiError(errors)
	}

	return nil
}

// TokenResponseMultiError is an error wrapping multiple validation errors
// returned by TokenResponse.ValidateAll() if the designated constraints
// aren't met.
type TokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenResponseMultiError) AllErrors() []error { return m }

// TokenResponseValidationError is the validation error returned by
// TokenResponse.Validate if the designated constraints aren't met.
type TokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenResponseValidationError) ErrorName() string { return "TokenResponseValidationError" }

// Error satisfies the builtin error interface
func (e TokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenResponseValidationError{}

// Validate checks the field values on ServiceHealth with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServiceHealth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServiceHealth with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServiceHealthMultiError, or
// nil if none found.
func (m *ServiceHealth) ValidateAll() error {
	return m.validate(true)
}

func (m *ServiceHealth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsHealthy

	// no validation rules for Name

	// no validation rules for Message

	if len(errors) > 0 {
		return ServiceHealthMultiError(errors)
	}

	return nil
}

// ServiceHealthMultiError is an error wrapping multiple validation errors
// returned by ServiceHealth.ValidateAll() if the designated constraints
// aren't met.
type ServiceHealthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceHealthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceHealthMultiError) AllErrors() []error { return m }

// ServiceHealthValidationError is the validation error returned by
// ServiceHealth.Validate if the designated constraints aren't met.
type ServiceHealthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceHealthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceHealthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceHealthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceHealthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceHealthValidationError) ErrorName() string { return "ServiceHealthValidationError" }

// Error satisfies the builtin error interface
func (e ServiceHealthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceHealth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceHealthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceHealthValidationError{}

// Validate checks the field values on ServerHealthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ServerHealthResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerHealthResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ServerHealthResponseMultiError, or nil if none found.
func (m *ServerHealthResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerHealthResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsHealthy

	// no validation rules for ServerVersion

	// no validation rules for Id

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerHealthResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerHealthResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerHealthResponseValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ServerType

	// no validation rules for IsLeader

	if len(errors) > 0 {
		return ServerHealthResponseMultiError(errors)
	}

	return nil
}

// ServerHealthResponseMultiError is an error wrapping multiple validation
// errors returned by ServerHealthResponse.ValidateAll() if the designated
// constraints aren't met.
type ServerHealthResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerHealthResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerHealthResponseMultiError) AllErrors() []error { return m }

// ServerHealthResponseValidationError is the validation error returned by
// ServerHealthResponse.Validate if the designated constraints aren't met.
type ServerHealthResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerHealthResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerHealthResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerHealthResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerHealthResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerHealthResponseValidationError) ErrorName() string {
	return "ServerHealthResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ServerHealthResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerHealthResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerHealthResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerHealthResponseValidationError{}

// Validate checks the field values on SystemSummary with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SystemSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SystemSummary with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SystemSummaryMultiError, or
// nil if none found.
func (m *SystemSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *SystemSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCpu() == nil {
		err := SystemSummaryValidationError{
			field:  "Cpu",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCpu()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SystemSummaryValidationError{
					field:  "Cpu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SystemSummaryValidationError{
					field:  "Cpu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCpu()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SystemSummaryValidationError{
				field:  "Cpu",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetMemory() == nil {
		err := SystemSummaryValidationError{
			field:  "Memory",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMemory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SystemSummaryValidationError{
					field:  "Memory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SystemSummaryValidationError{
					field:  "Memory",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMemory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SystemSummaryValidationError{
				field:  "Memory",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SystemSummaryMultiError(errors)
	}

	return nil
}

// SystemSummaryMultiError is an error wrapping multiple validation errors
// returned by SystemSummary.ValidateAll() if the designated constraints
// aren't met.
type SystemSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemSummaryMultiError) AllErrors() []error { return m }

// SystemSummaryValidationError is the validation error returned by
// SystemSummary.Validate if the designated constraints aren't met.
type SystemSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemSummaryValidationError) ErrorName() string { return "SystemSummaryValidationError" }

// Error satisfies the builtin error interface
func (e SystemSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemSummaryValidationError{}

// Validate checks the field values on CpuSummary with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CpuSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CpuSummary with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CpuSummaryMultiError, or
// nil if none found.
func (m *CpuSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *CpuSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for User

	// no validation rules for Nice

	// no validation rules for System

	// no validation rules for Idle

	// no validation rules for IoWait

	// no validation rules for Irq

	// no validation rules for SoftIrq

	// no validation rules for Steal

	// no validation rules for Guest

	// no validation rules for GuestNice

	if len(errors) > 0 {
		return CpuSummaryMultiError(errors)
	}

	return nil
}

// CpuSummaryMultiError is an error wrapping multiple validation errors
// returned by CpuSummary.ValidateAll() if the designated constraints aren't met.
type CpuSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CpuSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CpuSummaryMultiError) AllErrors() []error { return m }

// CpuSummaryValidationError is the validation error returned by
// CpuSummary.Validate if the designated constraints aren't met.
type CpuSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CpuSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CpuSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CpuSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CpuSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CpuSummaryValidationError) ErrorName() string { return "CpuSummaryValidationError" }

// Error satisfies the builtin error interface
func (e CpuSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCpuSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CpuSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CpuSummaryValidationError{}

// Validate checks the field values on MemorySummary with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemorySummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemorySummary with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemorySummaryMultiError, or
// nil if none found.
func (m *MemorySummary) ValidateAll() error {
	return m.validate(true)
}

func (m *MemorySummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MemTotal

	// no validation rules for MemFree

	// no validation rules for MemAvailable

	if len(errors) > 0 {
		return MemorySummaryMultiError(errors)
	}

	return nil
}

// MemorySummaryMultiError is an error wrapping multiple validation errors
// returned by MemorySummary.ValidateAll() if the designated constraints
// aren't met.
type MemorySummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemorySummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemorySummaryMultiError) AllErrors() []error { return m }

// MemorySummaryValidationError is the validation error returned by
// MemorySummary.Validate if the designated constraints aren't met.
type MemorySummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemorySummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemorySummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemorySummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemorySummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemorySummaryValidationError) ErrorName() string { return "MemorySummaryValidationError" }

// Error satisfies the builtin error interface
func (e MemorySummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemorySummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemorySummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemorySummaryValidationError{}

// Validate checks the field values on GenericClient with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GenericClient) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenericClient with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GenericClientMultiError, or
// nil if none found.
func (m *GenericClient) ValidateAll() error {
	return m.validate(true)
}

func (m *GenericClient) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetClientId()); err != nil {
		err = GenericClientValidationError{
			field:  "ClientId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecret()) < 10 {
		err := GenericClientValidationError{
			field:  "Secret",
			reason: "value length must be at least 10 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GenericClientMultiError(errors)
	}

	return nil
}

func (m *GenericClient) _validateUuid(uuid string) error {
	if matched := _common_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GenericClientMultiError is an error wrapping multiple validation errors
// returned by GenericClient.ValidateAll() if the designated constraints
// aren't met.
type GenericClientMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenericClientMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenericClientMultiError) AllErrors() []error { return m }

// GenericClientValidationError is the validation error returned by
// GenericClient.Validate if the designated constraints aren't met.
type GenericClientValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenericClientValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenericClientValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenericClientValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenericClientValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenericClientValidationError) ErrorName() string { return "GenericClientValidationError" }

// Error satisfies the builtin error interface
func (e GenericClientValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenericClient.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenericClientValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenericClientValidationError{}

// Validate checks the field values on TenantResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TenantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TenantResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TenantResponseMultiError,
// or nil if none found.
func (m *TenantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TenantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TenantResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TenantResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TenantResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TenantResponseMultiError(errors)
	}

	return nil
}

// TenantResponseMultiError is an error wrapping multiple validation errors
// returned by TenantResponse.ValidateAll() if the designated constraints
// aren't met.
type TenantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TenantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TenantResponseMultiError) AllErrors() []error { return m }

// TenantResponseValidationError is the validation error returned by
// TenantResponse.Validate if the designated constraints aren't met.
type TenantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TenantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TenantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TenantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TenantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TenantResponseValidationError) ErrorName() string { return "TenantResponseValidationError" }

// Error satisfies the builtin error interface
func (e TenantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTenantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TenantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TenantResponseValidationError{}

// Validate checks the field values on PaginationOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PaginationOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaginationOptions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaginationOptionsMultiError, or nil if none found.
func (m *PaginationOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *PaginationOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ordering

	// no validation rules for Decending

	// no validation rules for PageIndex

	// no validation rules for PageSize

	if len(errors) > 0 {
		return PaginationOptionsMultiError(errors)
	}

	return nil
}

// PaginationOptionsMultiError is an error wrapping multiple validation errors
// returned by PaginationOptions.ValidateAll() if the designated constraints
// aren't met.
type PaginationOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginationOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginationOptionsMultiError) AllErrors() []error { return m }

// PaginationOptionsValidationError is the validation error returned by
// PaginationOptions.Validate if the designated constraints aren't met.
type PaginationOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationOptionsValidationError) ErrorName() string {
	return "PaginationOptionsValidationError"
}

// Error satisfies the builtin error interface
func (e PaginationOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginationOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationOptionsValidationError{}

// Validate checks the field values on PaginationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PaginationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaginationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaginationResponseMultiError, or nil if none found.
func (m *PaginationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PaginationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ordering

	// no validation rules for Decending

	// no validation rules for TotalCount

	// no validation rules for PageSize

	// no validation rules for PrevPageIndex

	// no validation rules for CurrentPageIndex

	// no validation rules for NextPageIndex

	if len(errors) > 0 {
		return PaginationResponseMultiError(errors)
	}

	return nil
}

// PaginationResponseMultiError is an error wrapping multiple validation errors
// returned by PaginationResponse.ValidateAll() if the designated constraints
// aren't met.
type PaginationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginationResponseMultiError) AllErrors() []error { return m }

// PaginationResponseValidationError is the validation error returned by
// PaginationResponse.Validate if the designated constraints aren't met.
type PaginationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationResponseValidationError) ErrorName() string {
	return "PaginationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PaginationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationResponseValidationError{}

// Validate checks the field values on EnrollmentToken with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EnrollmentToken) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnrollmentToken with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnrollmentTokenMultiError, or nil if none found.
func (m *EnrollmentToken) ValidateAll() error {
	return m.validate(true)
}

func (m *EnrollmentToken) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Expiration

	if len(errors) > 0 {
		return EnrollmentTokenMultiError(errors)
	}

	return nil
}

// EnrollmentTokenMultiError is an error wrapping multiple validation errors
// returned by EnrollmentToken.ValidateAll() if the designated constraints
// aren't met.
type EnrollmentTokenMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnrollmentTokenMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnrollmentTokenMultiError) AllErrors() []error { return m }

// EnrollmentTokenValidationError is the validation error returned by
// EnrollmentToken.Validate if the designated constraints aren't met.
type EnrollmentTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnrollmentTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnrollmentTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnrollmentTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnrollmentTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnrollmentTokenValidationError) ErrorName() string { return "EnrollmentTokenValidationError" }

// Error satisfies the builtin error interface
func (e EnrollmentTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnrollmentToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnrollmentTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnrollmentTokenValidationError{}

// Validate checks the field values on CreateKeyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateKeyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateKeyRequestMultiError, or nil if none found.
func (m *CreateKeyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateKeyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 127 {
		err := CreateKeyRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 127 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := KeyType_name[int32(m.GetKeyType())]; !ok {
		err := CreateKeyRequestValidationError{
			field:  "KeyType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Value

	// no validation rules for Expiration

	if len(errors) > 0 {
		return CreateKeyRequestMultiError(errors)
	}

	return nil
}

// CreateKeyRequestMultiError is an error wrapping multiple validation errors
// returned by CreateKeyRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateKeyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateKeyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateKeyRequestMultiError) AllErrors() []error { return m }

// CreateKeyRequestValidationError is the validation error returned by
// CreateKeyRequest.Validate if the designated constraints aren't met.
type CreateKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateKeyRequestValidationError) ErrorName() string { return "CreateKeyRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateKeyRequestValidationError{}

// Validate checks the field values on KeyResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *KeyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on KeyResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in KeyResponseMultiError, or
// nil if none found.
func (m *KeyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *KeyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for KeyType

	// no validation rules for Expiration

	// no validation rules for TenantId

	// no validation rules for Disabled

	if len(errors) > 0 {
		return KeyResponseMultiError(errors)
	}

	return nil
}

// KeyResponseMultiError is an error wrapping multiple validation errors
// returned by KeyResponse.ValidateAll() if the designated constraints aren't met.
type KeyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m KeyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m KeyResponseMultiError) AllErrors() []error { return m }

// KeyResponseValidationError is the validation error returned by
// KeyResponse.Validate if the designated constraints aren't met.
type KeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e KeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e KeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e KeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e KeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e KeyResponseValidationError) ErrorName() string { return "KeyResponseValidationError" }

// Error satisfies the builtin error interface
func (e KeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = KeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = KeyResponseValidationError{}
