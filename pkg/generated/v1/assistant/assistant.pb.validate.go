// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/assistant/assistant.proto

package assistant

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AssistantMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssistantMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssistantMessageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssistantMessageRequestMultiError, or nil if none found.
func (m *AssistantMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssistantMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPostProcessingAction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssistantMessageRequestValidationError{
					field:  "PostProcessingAction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssistantMessageRequestValidationError{
					field:  "PostProcessingAction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPostProcessingAction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssistantMessageRequestValidationError{
				field:  "PostProcessingAction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	oneofStreamingRequestPresent := false
	switch v := m.StreamingRequest.(type) {
	case *AssistantMessageRequest_Config:
		if v == nil {
			err := AssistantMessageRequestValidationError{
				field:  "StreamingRequest",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofStreamingRequestPresent = true

		if all {
			switch v := interface{}(m.GetConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssistantMessageRequestValidationError{
						field:  "Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssistantMessageRequestValidationError{
						field:  "Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssistantMessageRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AssistantMessageRequest_Message:
		if v == nil {
			err := AssistantMessageRequestValidationError{
				field:  "StreamingRequest",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofStreamingRequestPresent = true

		if all {
			switch v := interface{}(m.GetMessage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssistantMessageRequestValidationError{
						field:  "Message",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssistantMessageRequestValidationError{
						field:  "Message",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssistantMessageRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofStreamingRequestPresent {
		err := AssistantMessageRequestValidationError{
			field:  "StreamingRequest",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AssistantMessageRequestMultiError(errors)
	}

	return nil
}

// AssistantMessageRequestMultiError is an error wrapping multiple validation
// errors returned by AssistantMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type AssistantMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssistantMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssistantMessageRequestMultiError) AllErrors() []error { return m }

// AssistantMessageRequestValidationError is the validation error returned by
// AssistantMessageRequest.Validate if the designated constraints aren't met.
type AssistantMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssistantMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssistantMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssistantMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssistantMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssistantMessageRequestValidationError) ErrorName() string {
	return "AssistantMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssistantMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssistantMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssistantMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssistantMessageRequestValidationError{}

// Validate checks the field values on AssistantMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AssistantMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssistantMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssistantMessageMultiError, or nil if none found.
func (m *AssistantMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *AssistantMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofMessagePresent := false
	switch v := m.Message.(type) {
	case *AssistantMessage_Text:
		if v == nil {
			err := AssistantMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofMessagePresent = true

		if l := utf8.RuneCountInString(m.GetText()); l < 1 || l > 2047 {
			err := AssistantMessageValidationError{
				field:  "Text",
				reason: "value length must be between 1 and 2047 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *AssistantMessage_AudioContent:
		if v == nil {
			err := AssistantMessageValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofMessagePresent = true
		// no validation rules for AudioContent
	default:
		_ = v // ensures v is used
	}
	if !oneofMessagePresent {
		err := AssistantMessageValidationError{
			field:  "Message",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AssistantMessageMultiError(errors)
	}

	return nil
}

// AssistantMessageMultiError is an error wrapping multiple validation errors
// returned by AssistantMessage.ValidateAll() if the designated constraints
// aren't met.
type AssistantMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssistantMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssistantMessageMultiError) AllErrors() []error { return m }

// AssistantMessageValidationError is the validation error returned by
// AssistantMessage.Validate if the designated constraints aren't met.
type AssistantMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssistantMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssistantMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssistantMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssistantMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssistantMessageValidationError) ErrorName() string { return "AssistantMessageValidationError" }

// Error satisfies the builtin error interface
func (e AssistantMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssistantMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssistantMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssistantMessageValidationError{}

// Validate checks the field values on Intent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Intent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Intent with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IntentMultiError, or nil if none found.
func (m *Intent) ValidateAll() error {
	return m.validate(true)
}

func (m *Intent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Confidence

	if len(errors) > 0 {
		return IntentMultiError(errors)
	}

	return nil
}

// IntentMultiError is an error wrapping multiple validation errors returned by
// Intent.ValidateAll() if the designated constraints aren't met.
type IntentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntentMultiError) AllErrors() []error { return m }

// IntentValidationError is the validation error returned by Intent.Validate if
// the designated constraints aren't met.
type IntentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntentValidationError) ErrorName() string { return "IntentValidationError" }

// Error satisfies the builtin error interface
func (e IntentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntentValidationError{}

// Validate checks the field values on AssistantMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssistantMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssistantMessageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssistantMessageResponseMultiError, or nil if none found.
func (m *AssistantMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AssistantMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Text

	// no validation rules for AudioContent

	if all {
		switch v := interface{}(m.GetIntent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssistantMessageResponseValidationError{
					field:  "Intent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssistantMessageResponseValidationError{
					field:  "Intent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIntent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssistantMessageResponseValidationError{
				field:  "Intent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetIntents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AssistantMessageResponseValidationError{
						field:  fmt.Sprintf("Intents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AssistantMessageResponseValidationError{
						field:  fmt.Sprintf("Intents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AssistantMessageResponseValidationError{
					field:  fmt.Sprintf("Intents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsAudioComplete

	if all {
		switch v := interface{}(m.GetPostProcessingAction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssistantMessageResponseValidationError{
					field:  "PostProcessingAction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssistantMessageResponseValidationError{
					field:  "PostProcessingAction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPostProcessingAction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssistantMessageResponseValidationError{
				field:  "PostProcessingAction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AssistantMessageResponseMultiError(errors)
	}

	return nil
}

// AssistantMessageResponseMultiError is an error wrapping multiple validation
// errors returned by AssistantMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type AssistantMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssistantMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssistantMessageResponseMultiError) AllErrors() []error { return m }

// AssistantMessageResponseValidationError is the validation error returned by
// AssistantMessageResponse.Validate if the designated constraints aren't met.
type AssistantMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssistantMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssistantMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssistantMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssistantMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssistantMessageResponseValidationError) ErrorName() string {
	return "AssistantMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssistantMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssistantMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssistantMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssistantMessageResponseValidationError{}

// Validate checks the field values on AssistantMessageConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssistantMessageConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssistantMessageConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssistantMessageConfigMultiError, or nil if none found.
func (m *AssistantMessageConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *AssistantMessageConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 127 {
		err := AssistantMessageConfigValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 127 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDeviceId()); l < 1 || l > 127 {
		err := AssistantMessageConfigValidationError{
			field:  "DeviceId",
			reason: "value length must be between 1 and 127 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetModelName()); l < 1 || l > 255 {
		err := AssistantMessageConfigValidationError{
			field:  "ModelName",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IncludeAudioResponse

	if len(errors) > 0 {
		return AssistantMessageConfigMultiError(errors)
	}

	return nil
}

// AssistantMessageConfigMultiError is an error wrapping multiple validation
// errors returned by AssistantMessageConfig.ValidateAll() if the designated
// constraints aren't met.
type AssistantMessageConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssistantMessageConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssistantMessageConfigMultiError) AllErrors() []error { return m }

// AssistantMessageConfigValidationError is the validation error returned by
// AssistantMessageConfig.Validate if the designated constraints aren't met.
type AssistantMessageConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssistantMessageConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssistantMessageConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssistantMessageConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssistantMessageConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssistantMessageConfigValidationError) ErrorName() string {
	return "AssistantMessageConfigValidationError"
}

// Error satisfies the builtin error interface
func (e AssistantMessageConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssistantMessageConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssistantMessageConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssistantMessageConfigValidationError{}

// Validate checks the field values on AssistantPostProcessingActionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AssistantPostProcessingActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssistantPostProcessingActionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AssistantPostProcessingActionRequestMultiError, or nil if none found.
func (m *AssistantPostProcessingActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssistantPostProcessingActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	if _, ok := AssistantPostProcessingAction_name[int32(m.GetAction())]; !ok {
		err := AssistantPostProcessingActionRequestValidationError{
			field:  "Action",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AssistantPostProcessingActionRequestMultiError(errors)
	}

	return nil
}

// AssistantPostProcessingActionRequestMultiError is an error wrapping multiple
// validation errors returned by
// AssistantPostProcessingActionRequest.ValidateAll() if the designated
// constraints aren't met.
type AssistantPostProcessingActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssistantPostProcessingActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssistantPostProcessingActionRequestMultiError) AllErrors() []error { return m }

// AssistantPostProcessingActionRequestValidationError is the validation error
// returned by AssistantPostProcessingActionRequest.Validate if the designated
// constraints aren't met.
type AssistantPostProcessingActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssistantPostProcessingActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssistantPostProcessingActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssistantPostProcessingActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssistantPostProcessingActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssistantPostProcessingActionRequestValidationError) ErrorName() string {
	return "AssistantPostProcessingActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssistantPostProcessingActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssistantPostProcessingActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssistantPostProcessingActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssistantPostProcessingActionRequestValidationError{}

// Validate checks the field values on AssistantPostProcessingActionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AssistantPostProcessingActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssistantPostProcessingActionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AssistantPostProcessingActionResponseMultiError, or nil if none found.
func (m *AssistantPostProcessingActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AssistantPostProcessingActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActionId

	if _, ok := AssistantPostProcessingAction_name[int32(m.GetAction())]; !ok {
		err := AssistantPostProcessingActionResponseValidationError{
			field:  "Action",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AssistantPostProcessingActionResponseMultiError(errors)
	}

	return nil
}

// AssistantPostProcessingActionResponseMultiError is an error wrapping
// multiple validation errors returned by
// AssistantPostProcessingActionResponse.ValidateAll() if the designated
// constraints aren't met.
type AssistantPostProcessingActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssistantPostProcessingActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssistantPostProcessingActionResponseMultiError) AllErrors() []error { return m }

// AssistantPostProcessingActionResponseValidationError is the validation error
// returned by AssistantPostProcessingActionResponse.Validate if the
// designated constraints aren't met.
type AssistantPostProcessingActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssistantPostProcessingActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssistantPostProcessingActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssistantPostProcessingActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssistantPostProcessingActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssistantPostProcessingActionResponseValidationError) ErrorName() string {
	return "AssistantPostProcessingActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssistantPostProcessingActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssistantPostProcessingActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssistantPostProcessingActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssistantPostProcessingActionResponseValidationError{}
