// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: v1/assistant/assistant.proto

package assistant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AssistantServiceClient is the client API for AssistantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssistantServiceClient interface {
	// Sends and process messages from a virtual assistant
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	ProcessMessage(ctx context.Context, opts ...grpc.CallOption) (AssistantService_ProcessMessageClient, error)
}

type assistantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssistantServiceClient(cc grpc.ClientConnInterface) AssistantServiceClient {
	return &assistantServiceClient{cc}
}

func (c *assistantServiceClient) ProcessMessage(ctx context.Context, opts ...grpc.CallOption) (AssistantService_ProcessMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &AssistantService_ServiceDesc.Streams[0], "/sensory.api.v1.assistant.AssistantService/ProcessMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &assistantServiceProcessMessageClient{stream}
	return x, nil
}

type AssistantService_ProcessMessageClient interface {
	Send(*AssistantMessageRequest) error
	Recv() (*AssistantMessageResponse, error)
	grpc.ClientStream
}

type assistantServiceProcessMessageClient struct {
	grpc.ClientStream
}

func (x *assistantServiceProcessMessageClient) Send(m *AssistantMessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *assistantServiceProcessMessageClient) Recv() (*AssistantMessageResponse, error) {
	m := new(AssistantMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AssistantServiceServer is the server API for AssistantService service.
// All implementations must embed UnimplementedAssistantServiceServer
// for forward compatibility
type AssistantServiceServer interface {
	// Sends and process messages from a virtual assistant
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	ProcessMessage(AssistantService_ProcessMessageServer) error
	mustEmbedUnimplementedAssistantServiceServer()
}

// UnimplementedAssistantServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAssistantServiceServer struct {
}

func (UnimplementedAssistantServiceServer) ProcessMessage(AssistantService_ProcessMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessMessage not implemented")
}
func (UnimplementedAssistantServiceServer) mustEmbedUnimplementedAssistantServiceServer() {}

// UnsafeAssistantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssistantServiceServer will
// result in compilation errors.
type UnsafeAssistantServiceServer interface {
	mustEmbedUnimplementedAssistantServiceServer()
}

func RegisterAssistantServiceServer(s grpc.ServiceRegistrar, srv AssistantServiceServer) {
	s.RegisterService(&AssistantService_ServiceDesc, srv)
}

func _AssistantService_ProcessMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AssistantServiceServer).ProcessMessage(&assistantServiceProcessMessageServer{stream})
}

type AssistantService_ProcessMessageServer interface {
	Send(*AssistantMessageResponse) error
	Recv() (*AssistantMessageRequest, error)
	grpc.ServerStream
}

type assistantServiceProcessMessageServer struct {
	grpc.ServerStream
}

func (x *assistantServiceProcessMessageServer) Send(m *AssistantMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *assistantServiceProcessMessageServer) Recv() (*AssistantMessageRequest, error) {
	m := new(AssistantMessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AssistantService_ServiceDesc is the grpc.ServiceDesc for AssistantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssistantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sensory.api.v1.assistant.AssistantService",
	HandlerType: (*AssistantServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessMessage",
			Handler:       _AssistantService_ProcessMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1/assistant/assistant.proto",
}
