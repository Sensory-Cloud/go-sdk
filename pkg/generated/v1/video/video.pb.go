// sensory.api.video

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: v1/video/video.proto

package video

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	common "github.com/Sensory-Cloud/go-sdk/pkg/generated/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Specifies how sensitive the recognition threshold of the model should be
type RecognitionThreshold int32

const (
	RecognitionThreshold_LOW     RecognitionThreshold = 0
	RecognitionThreshold_MEDIUM  RecognitionThreshold = 1
	RecognitionThreshold_HIGH    RecognitionThreshold = 2
	RecognitionThreshold_HIGHEST RecognitionThreshold = 3
)

// Enum value maps for RecognitionThreshold.
var (
	RecognitionThreshold_name = map[int32]string{
		0: "LOW",
		1: "MEDIUM",
		2: "HIGH",
		3: "HIGHEST",
	}
	RecognitionThreshold_value = map[string]int32{
		"LOW":     0,
		"MEDIUM":  1,
		"HIGH":    2,
		"HIGHEST": 3,
	}
)

func (x RecognitionThreshold) Enum() *RecognitionThreshold {
	p := new(RecognitionThreshold)
	*p = x
	return p
}

func (x RecognitionThreshold) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecognitionThreshold) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_video_video_proto_enumTypes[0].Descriptor()
}

func (RecognitionThreshold) Type() protoreflect.EnumType {
	return &file_v1_video_video_proto_enumTypes[0]
}

func (x RecognitionThreshold) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecognitionThreshold.Descriptor instead.
func (RecognitionThreshold) EnumDescriptor() ([]byte, []int) {
	return file_v1_video_video_proto_rawDescGZIP(), []int{0}
}

// A model that is available for use
type VideoModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the model
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Boolean representing if a model can be used in enrollment
	IsEnrollable bool `protobuf:"varint,2,opt,name=isEnrollable,proto3" json:"isEnrollable,omitempty"`
	// Model type string
	ModelType common.ModelType `protobuf:"varint,3,opt,name=modelType,proto3,enum=sensory.api.common.ModelType" json:"modelType,omitempty"`
	// Specific object for which this model is made
	FixedObject string `protobuf:"bytes,4,opt,name=fixedObject,proto3" json:"fixedObject,omitempty"`
	// List of versions available for this model
	Versions []string `protobuf:"bytes,5,rep,name=versions,proto3" json:"versions,omitempty"`
	// The technology backing this model
	Technology common.TechnologyType `protobuf:"varint,6,opt,name=technology,proto3,enum=sensory.api.common.TechnologyType" json:"technology,omitempty"`
	// Indicates if liveness is supported by this model
	IsLivenessSupported bool `protobuf:"varint,7,opt,name=isLivenessSupported,proto3" json:"isLivenessSupported,omitempty"`
}

func (x *VideoModel) Reset() {
	*x = VideoModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_video_video_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoModel) ProtoMessage() {}

func (x *VideoModel) ProtoReflect() protoreflect.Message {
	mi := &file_v1_video_video_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoModel.ProtoReflect.Descriptor instead.
func (*VideoModel) Descriptor() ([]byte, []int) {
	return file_v1_video_video_proto_rawDescGZIP(), []int{0}
}

func (x *VideoModel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VideoModel) GetIsEnrollable() bool {
	if x != nil {
		return x.IsEnrollable
	}
	return false
}

func (x *VideoModel) GetModelType() common.ModelType {
	if x != nil {
		return x.ModelType
	}
	return common.ModelType(0)
}

func (x *VideoModel) GetFixedObject() string {
	if x != nil {
		return x.FixedObject
	}
	return ""
}

func (x *VideoModel) GetVersions() []string {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *VideoModel) GetTechnology() common.TechnologyType {
	if x != nil {
		return x.Technology
	}
	return common.TechnologyType(0)
}

func (x *VideoModel) GetIsLivenessSupported() bool {
	if x != nil {
		return x.IsLivenessSupported
	}
	return false
}

// Request to get a list of the available models
type GetModelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetModelsRequest) Reset() {
	*x = GetModelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_video_video_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelsRequest) ProtoMessage() {}

func (x *GetModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_video_video_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelsRequest.ProtoReflect.Descriptor instead.
func (*GetModelsRequest) Descriptor() ([]byte, []int) {
	return file_v1_video_video_proto_rawDescGZIP(), []int{1}
}

// Response containing the models currently available
type GetModelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Models []*VideoModel `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty"` // List of supported models
}

func (x *GetModelsResponse) Reset() {
	*x = GetModelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_video_video_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelsResponse) ProtoMessage() {}

func (x *GetModelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_video_video_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelsResponse.ProtoReflect.Descriptor instead.
func (*GetModelsResponse) Descriptor() ([]byte, []int) {
	return file_v1_video_video_proto_rawDescGZIP(), []int{2}
}

func (x *GetModelsResponse) GetModels() []*VideoModel {
	if x != nil {
		return x.Models
	}
	return nil
}

// The top-level message sent by the client for the `CreateEnrollment` method.
// Multiple `CreateEnrollmentRequest` messages are sent in a stream. The first message
// must contain a `config` message and must not contain `imageContent`.
// All subsequent messages must contain `imageContent` and
// must not contain a `config` message.
type CreateEnrollmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The streaming request, which is either a config or image content.
	//
	// Types that are assignable to StreamingRequest:
	//	*CreateEnrollmentRequest_Config
	//	*CreateEnrollmentRequest_ImageContent
	StreamingRequest isCreateEnrollmentRequest_StreamingRequest `protobuf_oneof:"streamingRequest"`
}

func (x *CreateEnrollmentRequest) Reset() {
	*x = CreateEnrollmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_video_video_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEnrollmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnrollmentRequest) ProtoMessage() {}

func (x *CreateEnrollmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_video_video_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnrollmentRequest.ProtoReflect.Descriptor instead.
func (*CreateEnrollmentRequest) Descriptor() ([]byte, []int) {
	return file_v1_video_video_proto_rawDescGZIP(), []int{3}
}

func (m *CreateEnrollmentRequest) GetStreamingRequest() isCreateEnrollmentRequest_StreamingRequest {
	if m != nil {
		return m.StreamingRequest
	}
	return nil
}

func (x *CreateEnrollmentRequest) GetConfig() *CreateEnrollmentConfig {
	if x, ok := x.GetStreamingRequest().(*CreateEnrollmentRequest_Config); ok {
		return x.Config
	}
	return nil
}

func (x *CreateEnrollmentRequest) GetImageContent() []byte {
	if x, ok := x.GetStreamingRequest().(*CreateEnrollmentRequest_ImageContent); ok {
		return x.ImageContent
	}
	return nil
}

type isCreateEnrollmentRequest_StreamingRequest interface {
	isCreateEnrollmentRequest_StreamingRequest()
}

type CreateEnrollmentRequest_Config struct {
	// Provides information that specifies how to process the
	// request. The first `CreateEnrollmentRequest` message must contain a
	// `config`  message.
	Config *CreateEnrollmentConfig `protobuf:"bytes,1,opt,name=config,proto3,oneof"`
}

type CreateEnrollmentRequest_ImageContent struct {
	// The image content to be recognized sent as bytes.
	ImageContent []byte `protobuf:"bytes,2,opt,name=imageContent,proto3,oneof"`
}

func (*CreateEnrollmentRequest_Config) isCreateEnrollmentRequest_StreamingRequest() {}

func (*CreateEnrollmentRequest_ImageContent) isCreateEnrollmentRequest_StreamingRequest() {}

// The top-level message sent by the client for the `Authenticate` method.
// Multiple `AuthenticateRequest` messages are sent in a stream. The first message
// must contain a `config` message and must not contain `imageContent`.
// All subsequent messages must contain `imageContent` and
// must not contain a `config` message.
type AuthenticateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The streaming request, which is either a config or image content.
	//
	// Types that are assignable to StreamingRequest:
	//	*AuthenticateRequest_Config
	//	*AuthenticateRequest_ImageContent
	StreamingRequest isAuthenticateRequest_StreamingRequest `protobuf_oneof:"streamingRequest"`
}

func (x *AuthenticateRequest) Reset() {
	*x = AuthenticateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_video_video_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateRequest) ProtoMessage() {}

func (x *AuthenticateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_video_video_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateRequest) Descriptor() ([]byte, []int) {
	return file_v1_video_video_proto_rawDescGZIP(), []int{4}
}

func (m *AuthenticateRequest) GetStreamingRequest() isAuthenticateRequest_StreamingRequest {
	if m != nil {
		return m.StreamingRequest
	}
	return nil
}

func (x *AuthenticateRequest) GetConfig() *AuthenticateConfig {
	if x, ok := x.GetStreamingRequest().(*AuthenticateRequest_Config); ok {
		return x.Config
	}
	return nil
}

func (x *AuthenticateRequest) GetImageContent() []byte {
	if x, ok := x.GetStreamingRequest().(*AuthenticateRequest_ImageContent); ok {
		return x.ImageContent
	}
	return nil
}

type isAuthenticateRequest_StreamingRequest interface {
	isAuthenticateRequest_StreamingRequest()
}

type AuthenticateRequest_Config struct {
	// Provides information that specifies how to process the
	// request. The first `AuthenticateRequest` message must contain a
	// `config`  message.
	Config *AuthenticateConfig `protobuf:"bytes,1,opt,name=config,proto3,oneof"`
}

type AuthenticateRequest_ImageContent struct {
	// The image content to be recognized sent as bytes.
	ImageContent []byte `protobuf:"bytes,2,opt,name=imageContent,proto3,oneof"`
}

func (*AuthenticateRequest_Config) isAuthenticateRequest_StreamingRequest() {}

func (*AuthenticateRequest_ImageContent) isAuthenticateRequest_StreamingRequest() {}

// The top-level message sent by the client for the `ValidateLiveness` method.
// Multiple `ValidateRecognitionRequest` messages are sent in a stream. The first message
// must contain a `config` message and must not contain `imageContent`.
// All subsequent messages must contain `imageContent` and
// must not contain a `config` message.
type ValidateRecognitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The streaming request, which is either a config or image content.
	//
	// Types that are assignable to StreamingRequest:
	//	*ValidateRecognitionRequest_Config
	//	*ValidateRecognitionRequest_ImageContent
	StreamingRequest isValidateRecognitionRequest_StreamingRequest `protobuf_oneof:"streamingRequest"`
}

func (x *ValidateRecognitionRequest) Reset() {
	*x = ValidateRecognitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_video_video_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateRecognitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRecognitionRequest) ProtoMessage() {}

func (x *ValidateRecognitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_video_video_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRecognitionRequest.ProtoReflect.Descriptor instead.
func (*ValidateRecognitionRequest) Descriptor() ([]byte, []int) {
	return file_v1_video_video_proto_rawDescGZIP(), []int{5}
}

func (m *ValidateRecognitionRequest) GetStreamingRequest() isValidateRecognitionRequest_StreamingRequest {
	if m != nil {
		return m.StreamingRequest
	}
	return nil
}

func (x *ValidateRecognitionRequest) GetConfig() *ValidateRecognitionConfig {
	if x, ok := x.GetStreamingRequest().(*ValidateRecognitionRequest_Config); ok {
		return x.Config
	}
	return nil
}

func (x *ValidateRecognitionRequest) GetImageContent() []byte {
	if x, ok := x.GetStreamingRequest().(*ValidateRecognitionRequest_ImageContent); ok {
		return x.ImageContent
	}
	return nil
}

type isValidateRecognitionRequest_StreamingRequest interface {
	isValidateRecognitionRequest_StreamingRequest()
}

type ValidateRecognitionRequest_Config struct {
	// Provides information that specifies how to process the
	// request. The first `ValidateRecognitionRequest` message must contain a
	// `config`  message.
	Config *ValidateRecognitionConfig `protobuf:"bytes,1,opt,name=config,proto3,oneof"`
}

type ValidateRecognitionRequest_ImageContent struct {
	// The image content to be recognized sent as bytes.
	ImageContent []byte `protobuf:"bytes,2,opt,name=imageContent,proto3,oneof"`
}

func (*ValidateRecognitionRequest_Config) isValidateRecognitionRequest_StreamingRequest() {}

func (*ValidateRecognitionRequest_ImageContent) isValidateRecognitionRequest_StreamingRequest() {}

// Response to an enrollment request
type CreateEnrollmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Percent Complete as values between 0 and 100
	PercentComplete int64 `protobuf:"varint,1,opt,name=percentComplete,proto3" json:"percentComplete,omitempty"`
	// Liveness check bit. This value with always be false if 'isLivenessEnabled' is set to false in the CreateEnrollmentConfig
	IsAlive bool `protobuf:"varint,2,opt,name=isAlive,proto3" json:"isAlive,omitempty"`
	// If enrollment is successful, this value will be the unique Enrollment ID
	EnrollmentId string `protobuf:"bytes,3,opt,name=enrollmentId,proto3" json:"enrollmentId,omitempty"`
	// Model used for enrollment
	ModelName string `protobuf:"bytes,4,opt,name=modelName,proto3" json:"modelName,omitempty"`
	// Model version used for enrollment
	ModelVersion string `protobuf:"bytes,5,opt,name=modelVersion,proto3" json:"modelVersion,omitempty"`
	// Score of the enrollment. Currently only used for error messages.
	Score float32 `protobuf:"fixed32,6,opt,name=score,proto3" json:"score,omitempty"`
	// Encrypted enrollment token, this token should be included in authentication requests
	// If the server is configured to store enrollments server side, this will be left empty
	EnrollmentToken *common.EnrollmentToken `protobuf:"bytes,7,opt,name=enrollmentToken,proto3" json:"enrollmentToken,omitempty"`
}

func (x *CreateEnrollmentResponse) Reset() {
	*x = CreateEnrollmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_video_video_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEnrollmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnrollmentResponse) ProtoMessage() {}

func (x *CreateEnrollmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_video_video_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnrollmentResponse.ProtoReflect.Descriptor instead.
func (*CreateEnrollmentResponse) Descriptor() ([]byte, []int) {
	return file_v1_video_video_proto_rawDescGZIP(), []int{6}
}

func (x *CreateEnrollmentResponse) GetPercentComplete() int64 {
	if x != nil {
		return x.PercentComplete
	}
	return 0
}

func (x *CreateEnrollmentResponse) GetIsAlive() bool {
	if x != nil {
		return x.IsAlive
	}
	return false
}

func (x *CreateEnrollmentResponse) GetEnrollmentId() string {
	if x != nil {
		return x.EnrollmentId
	}
	return ""
}

func (x *CreateEnrollmentResponse) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *CreateEnrollmentResponse) GetModelVersion() string {
	if x != nil {
		return x.ModelVersion
	}
	return ""
}

func (x *CreateEnrollmentResponse) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *CreateEnrollmentResponse) GetEnrollmentToken() *common.EnrollmentToken {
	if x != nil {
		return x.EnrollmentToken
	}
	return nil
}

// Response to an authentication request
type AuthenticateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Success / Failure bit
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Score of the authentication (lower is better)
	Score float32 `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
	// Liveness check bit. This value with always be false if 'isLivenessEnabled' is set to false in the AuthenticateConfig
	IsAlive bool `protobuf:"varint,3,opt,name=isAlive,proto3" json:"isAlive,omitempty"`
	// Optional token that will be returned upon a successful authentication if doIncludeToken is set to true in the AuthenticateConfig
	Token *common.TokenResponse `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	// The userID of the authenticated user
	// Useful when evaluating enrollment groups
	UserId string `protobuf:"bytes,5,opt,name=userId,proto3" json:"userId,omitempty"`
	// The enrollment ID of the authenticated enrollment
	// Useful when evaluating enrollment groups
	EnrollmentId string `protobuf:"bytes,6,opt,name=enrollmentId,proto3" json:"enrollmentId,omitempty"`
}

func (x *AuthenticateResponse) Reset() {
	*x = AuthenticateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_video_video_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateResponse) ProtoMessage() {}

func (x *AuthenticateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_video_video_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateResponse.ProtoReflect.Descriptor instead.
func (*AuthenticateResponse) Descriptor() ([]byte, []int) {
	return file_v1_video_video_proto_rawDescGZIP(), []int{7}
}

func (x *AuthenticateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AuthenticateResponse) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *AuthenticateResponse) GetIsAlive() bool {
	if x != nil {
		return x.IsAlive
	}
	return false
}

func (x *AuthenticateResponse) GetToken() *common.TokenResponse {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *AuthenticateResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AuthenticateResponse) GetEnrollmentId() string {
	if x != nil {
		return x.EnrollmentId
	}
	return ""
}

// Response to a liveness recognition request
type LivenessRecognitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Success / Failure bit
	IsAlive bool `protobuf:"varint,1,opt,name=isAlive,proto3" json:"isAlive,omitempty"`
	// Score of the liveness (lower is better)
	Score float32 `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *LivenessRecognitionResponse) Reset() {
	*x = LivenessRecognitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_video_video_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LivenessRecognitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LivenessRecognitionResponse) ProtoMessage() {}

func (x *LivenessRecognitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_video_video_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LivenessRecognitionResponse.ProtoReflect.Descriptor instead.
func (*LivenessRecognitionResponse) Descriptor() ([]byte, []int) {
	return file_v1_video_video_proto_rawDescGZIP(), []int{8}
}

func (x *LivenessRecognitionResponse) GetIsAlive() bool {
	if x != nil {
		return x.IsAlive
	}
	return false
}

func (x *LivenessRecognitionResponse) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

// Provides information for an enrollment
type CreateEnrollmentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique user Identifer. This value should be a unique email address or username known by the user.
	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	// The unique device Identifer. This value should be something retrieved by the devie prior to enrollment (like MAC Address)
	// this value is used to identify a device uniquely across multiple enrollments
	DeviceId string `protobuf:"bytes,2,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	// Name of background model to be enrolled in
	// Background models can be retrieved from the GetModels() gRPC call
	ModelName string `protobuf:"bytes,3,opt,name=modelName,proto3" json:"modelName,omitempty"`
	// Description of the enrollment as entered by the user.
	// Max length is 1023 characters
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Enable a liveness check on the image, which will further improve the security of enrollment at the expense of a slightly slower response.
	IsLivenessEnabled bool `protobuf:"varint,5,opt,name=isLivenessEnabled,proto3" json:"isLivenessEnabled,omitempty"`
	// The liveness threshold
	LivenessThreshold RecognitionThreshold `protobuf:"varint,6,opt,name=livenessThreshold,proto3,enum=sensory.api.v1.video.RecognitionThreshold" json:"livenessThreshold,omitempty"`
	// Information about how the video data will be compressed.
	Compression *common.CompressionConfiguration `protobuf:"bytes,7,opt,name=compression,proto3" json:"compression,omitempty"`
	// Reference Id allows clients to assign their own identifier to enrollments for various purposes
	// such as tying an audio and video enrollment together.
	ReferenceId string `protobuf:"bytes,8,opt,name=referenceId,proto3" json:"referenceId,omitempty"`
	// If isLivenessEnabled is true, this determines how many frames need to pass the liveness check before the enrollment can be successful
	// A value of 0 means that all enrollment frames must pass the liveness check.
	NumLivenessFramesRequired int32 `protobuf:"varint,9,opt,name=numLivenessFramesRequired,proto3" json:"numLivenessFramesRequired,omitempty"`
	// Prevent the server from storing the enrollment template. The template will be returned to the client for storage.
	DisableServerEnrollmentTemplateStorage bool `protobuf:"varint,10,opt,name=disableServerEnrollmentTemplateStorage,proto3" json:"disableServerEnrollmentTemplateStorage,omitempty"`
}

func (x *CreateEnrollmentConfig) Reset() {
	*x = CreateEnrollmentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_video_video_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEnrollmentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnrollmentConfig) ProtoMessage() {}

func (x *CreateEnrollmentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_v1_video_video_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnrollmentConfig.ProtoReflect.Descriptor instead.
func (*CreateEnrollmentConfig) Descriptor() ([]byte, []int) {
	return file_v1_video_video_proto_rawDescGZIP(), []int{9}
}

func (x *CreateEnrollmentConfig) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateEnrollmentConfig) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *CreateEnrollmentConfig) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *CreateEnrollmentConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateEnrollmentConfig) GetIsLivenessEnabled() bool {
	if x != nil {
		return x.IsLivenessEnabled
	}
	return false
}

func (x *CreateEnrollmentConfig) GetLivenessThreshold() RecognitionThreshold {
	if x != nil {
		return x.LivenessThreshold
	}
	return RecognitionThreshold_LOW
}

func (x *CreateEnrollmentConfig) GetCompression() *common.CompressionConfiguration {
	if x != nil {
		return x.Compression
	}
	return nil
}

func (x *CreateEnrollmentConfig) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

func (x *CreateEnrollmentConfig) GetNumLivenessFramesRequired() int32 {
	if x != nil {
		return x.NumLivenessFramesRequired
	}
	return 0
}

func (x *CreateEnrollmentConfig) GetDisableServerEnrollmentTemplateStorage() bool {
	if x != nil {
		return x.DisableServerEnrollmentTemplateStorage
	}
	return false
}

// Provides information for an image-based authentication
type AuthenticateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An identifier for what to authenticate against, either an individual enrollment or a group of enrollments
	//
	// Types that are assignable to AuthId:
	//	*AuthenticateConfig_EnrollmentId
	//	*AuthenticateConfig_EnrollmentGroupId
	AuthId isAuthenticateConfig_AuthId `protobuf_oneof:"authId"`
	// Enable a liveness check on the image, which will further improve the security of authentication at the expense of a slightly slower response.
	IsLivenessEnabled bool `protobuf:"varint,3,opt,name=isLivenessEnabled,proto3" json:"isLivenessEnabled,omitempty"`
	// The liveness threshold
	LivenessThreshold RecognitionThreshold `protobuf:"varint,4,opt,name=livenessThreshold,proto3,enum=sensory.api.v1.video.RecognitionThreshold" json:"livenessThreshold,omitempty"`
	// Information aobut how the video data will be compressed.
	Compression *common.CompressionConfiguration `protobuf:"bytes,5,opt,name=compression,proto3" json:"compression,omitempty"`
	// A boolean indicating if the response should include an OAuth token for the user associated with the enrollmentId
	// The OAuth token will only be returned if the authentication is successful.
	// It's important to note there will be a minor performance hit to authentication, as OAuth token generation is a semi-expensive operation.
	DoIncludeToken bool `protobuf:"varint,6,opt,name=doIncludeToken,proto3" json:"doIncludeToken,omitempty"`
	// Encrypted enrollment token that was provided on enrollment creation
	// If the server is configured to store enrollments server side, this may be left blank
	EnrollmentToken []byte `protobuf:"bytes,7,opt,name=enrollmentToken,proto3" json:"enrollmentToken,omitempty"`
}

func (x *AuthenticateConfig) Reset() {
	*x = AuthenticateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_video_video_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateConfig) ProtoMessage() {}

func (x *AuthenticateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_v1_video_video_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateConfig.ProtoReflect.Descriptor instead.
func (*AuthenticateConfig) Descriptor() ([]byte, []int) {
	return file_v1_video_video_proto_rawDescGZIP(), []int{10}
}

func (m *AuthenticateConfig) GetAuthId() isAuthenticateConfig_AuthId {
	if m != nil {
		return m.AuthId
	}
	return nil
}

func (x *AuthenticateConfig) GetEnrollmentId() string {
	if x, ok := x.GetAuthId().(*AuthenticateConfig_EnrollmentId); ok {
		return x.EnrollmentId
	}
	return ""
}

func (x *AuthenticateConfig) GetEnrollmentGroupId() string {
	if x, ok := x.GetAuthId().(*AuthenticateConfig_EnrollmentGroupId); ok {
		return x.EnrollmentGroupId
	}
	return ""
}

func (x *AuthenticateConfig) GetIsLivenessEnabled() bool {
	if x != nil {
		return x.IsLivenessEnabled
	}
	return false
}

func (x *AuthenticateConfig) GetLivenessThreshold() RecognitionThreshold {
	if x != nil {
		return x.LivenessThreshold
	}
	return RecognitionThreshold_LOW
}

func (x *AuthenticateConfig) GetCompression() *common.CompressionConfiguration {
	if x != nil {
		return x.Compression
	}
	return nil
}

func (x *AuthenticateConfig) GetDoIncludeToken() bool {
	if x != nil {
		return x.DoIncludeToken
	}
	return false
}

func (x *AuthenticateConfig) GetEnrollmentToken() []byte {
	if x != nil {
		return x.EnrollmentToken
	}
	return nil
}

type isAuthenticateConfig_AuthId interface {
	isAuthenticateConfig_AuthId()
}

type AuthenticateConfig_EnrollmentId struct {
	// Unique identifier created at enrollment
	EnrollmentId string `protobuf:"bytes,1,opt,name=enrollmentId,proto3,oneof"`
}

type AuthenticateConfig_EnrollmentGroupId struct {
	// Unique identifier for an enrollment group
	EnrollmentGroupId string `protobuf:"bytes,2,opt,name=enrollmentGroupId,proto3,oneof"`
}

func (*AuthenticateConfig_EnrollmentId) isAuthenticateConfig_AuthId() {}

func (*AuthenticateConfig_EnrollmentGroupId) isAuthenticateConfig_AuthId() {}

// Provides information for a video-based event recognition
type ValidateRecognitionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of model to validate against
	// Models can be retrieved from the GetModels() gRPC call
	ModelName string `protobuf:"bytes,1,opt,name=modelName,proto3" json:"modelName,omitempty"`
	// The unique user Identifer
	UserId string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	// The model threshold
	Threshold RecognitionThreshold `protobuf:"varint,3,opt,name=threshold,proto3,enum=sensory.api.v1.video.RecognitionThreshold" json:"threshold,omitempty"`
}

func (x *ValidateRecognitionConfig) Reset() {
	*x = ValidateRecognitionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_video_video_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateRecognitionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRecognitionConfig) ProtoMessage() {}

func (x *ValidateRecognitionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_v1_video_video_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRecognitionConfig.ProtoReflect.Descriptor instead.
func (*ValidateRecognitionConfig) Descriptor() ([]byte, []int) {
	return file_v1_video_video_proto_rawDescGZIP(), []int{11}
}

func (x *ValidateRecognitionConfig) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *ValidateRecognitionConfig) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ValidateRecognitionConfig) GetThreshold() RecognitionThreshold {
	if x != nil {
		return x.Threshold
	}
	return RecognitionThreshold_LOW
}

var File_v1_video_video_proto protoreflect.FileDescriptor

var file_v1_video_video_proto_rawDesc = []byte{
	0x0a, 0x14, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x02, 0x0a, 0x0a, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x73, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x3b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x0a,
	0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x12, 0x30, 0x0a, 0x13, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69,
	0x73, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x06, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x46, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0c, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42,
	0x17, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x98, 0x01, 0x0a, 0x13, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x42, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x10, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x03,
	0xf8, 0x42, 0x01, 0x22, 0xa6, 0x01, 0x0a, 0x1a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x49, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a,
	0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xa9, 0x02, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x65, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xd5, 0x01, 0x0a, 0x14, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x4d, 0x0a, 0x1b, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x63, 0x6f,
	0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22,
	0xdb, 0x04, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72,
	0x04, 0x10, 0x01, 0x18, 0x7f, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x7f, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0xff, 0x01, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xff, 0x07, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73,
	0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x62, 0x0a, 0x11, 0x6c, 0x69, 0x76, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x6e,
	0x65, 0x73, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4e, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x0b,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x7f, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x4c, 0x69,
	0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6e, 0x75, 0x6d, 0x4c,
	0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x26, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0xb7, 0x03,
	0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x0c, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x11, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x11, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x62, 0x0a, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x11, 0x6c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x4e, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x6f, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x64, 0x6f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x0d, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x49, 0x64, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xbc, 0x01, 0x0a, 0x19, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10,
	0x01, 0x18, 0xff, 0x01, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x7f, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x52, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x09, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x2a, 0x42, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x07,
	0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55,
	0x4d, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x48, 0x49, 0x47, 0x48, 0x45, 0x53, 0x54, 0x10, 0x03, 0x32, 0x6d, 0x0a, 0x0b, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x5e, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x26, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xf7, 0x01, 0x0a, 0x0f, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x42, 0x69, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x77, 0x0a,
	0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x2d, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x6b, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x32, 0x91, 0x01, 0x0a, 0x10, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65, 0x63,
	0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7d, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x30, 0x2e, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x74, 0x0a, 0x1c, 0x61, 0x69, 0x2e, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x79, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x42, 0x16, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79,
	0x41, 0x70, 0x69, 0x56, 0x31, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_video_video_proto_rawDescOnce sync.Once
	file_v1_video_video_proto_rawDescData = file_v1_video_video_proto_rawDesc
)

func file_v1_video_video_proto_rawDescGZIP() []byte {
	file_v1_video_video_proto_rawDescOnce.Do(func() {
		file_v1_video_video_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_video_video_proto_rawDescData)
	})
	return file_v1_video_video_proto_rawDescData
}

var file_v1_video_video_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_v1_video_video_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_v1_video_video_proto_goTypes = []interface{}{
	(RecognitionThreshold)(0),               // 0: sensory.api.v1.video.RecognitionThreshold
	(*VideoModel)(nil),                      // 1: sensory.api.v1.video.VideoModel
	(*GetModelsRequest)(nil),                // 2: sensory.api.v1.video.GetModelsRequest
	(*GetModelsResponse)(nil),               // 3: sensory.api.v1.video.GetModelsResponse
	(*CreateEnrollmentRequest)(nil),         // 4: sensory.api.v1.video.CreateEnrollmentRequest
	(*AuthenticateRequest)(nil),             // 5: sensory.api.v1.video.AuthenticateRequest
	(*ValidateRecognitionRequest)(nil),      // 6: sensory.api.v1.video.ValidateRecognitionRequest
	(*CreateEnrollmentResponse)(nil),        // 7: sensory.api.v1.video.CreateEnrollmentResponse
	(*AuthenticateResponse)(nil),            // 8: sensory.api.v1.video.AuthenticateResponse
	(*LivenessRecognitionResponse)(nil),     // 9: sensory.api.v1.video.LivenessRecognitionResponse
	(*CreateEnrollmentConfig)(nil),          // 10: sensory.api.v1.video.CreateEnrollmentConfig
	(*AuthenticateConfig)(nil),              // 11: sensory.api.v1.video.AuthenticateConfig
	(*ValidateRecognitionConfig)(nil),       // 12: sensory.api.v1.video.ValidateRecognitionConfig
	(common.ModelType)(0),                   // 13: sensory.api.common.ModelType
	(common.TechnologyType)(0),              // 14: sensory.api.common.TechnologyType
	(*common.EnrollmentToken)(nil),          // 15: sensory.api.common.EnrollmentToken
	(*common.TokenResponse)(nil),            // 16: sensory.api.common.TokenResponse
	(*common.CompressionConfiguration)(nil), // 17: sensory.api.common.CompressionConfiguration
}
var file_v1_video_video_proto_depIdxs = []int32{
	13, // 0: sensory.api.v1.video.VideoModel.modelType:type_name -> sensory.api.common.ModelType
	14, // 1: sensory.api.v1.video.VideoModel.technology:type_name -> sensory.api.common.TechnologyType
	1,  // 2: sensory.api.v1.video.GetModelsResponse.models:type_name -> sensory.api.v1.video.VideoModel
	10, // 3: sensory.api.v1.video.CreateEnrollmentRequest.config:type_name -> sensory.api.v1.video.CreateEnrollmentConfig
	11, // 4: sensory.api.v1.video.AuthenticateRequest.config:type_name -> sensory.api.v1.video.AuthenticateConfig
	12, // 5: sensory.api.v1.video.ValidateRecognitionRequest.config:type_name -> sensory.api.v1.video.ValidateRecognitionConfig
	15, // 6: sensory.api.v1.video.CreateEnrollmentResponse.enrollmentToken:type_name -> sensory.api.common.EnrollmentToken
	16, // 7: sensory.api.v1.video.AuthenticateResponse.token:type_name -> sensory.api.common.TokenResponse
	0,  // 8: sensory.api.v1.video.CreateEnrollmentConfig.livenessThreshold:type_name -> sensory.api.v1.video.RecognitionThreshold
	17, // 9: sensory.api.v1.video.CreateEnrollmentConfig.compression:type_name -> sensory.api.common.CompressionConfiguration
	0,  // 10: sensory.api.v1.video.AuthenticateConfig.livenessThreshold:type_name -> sensory.api.v1.video.RecognitionThreshold
	17, // 11: sensory.api.v1.video.AuthenticateConfig.compression:type_name -> sensory.api.common.CompressionConfiguration
	0,  // 12: sensory.api.v1.video.ValidateRecognitionConfig.threshold:type_name -> sensory.api.v1.video.RecognitionThreshold
	2,  // 13: sensory.api.v1.video.VideoModels.GetModels:input_type -> sensory.api.v1.video.GetModelsRequest
	4,  // 14: sensory.api.v1.video.VideoBiometrics.CreateEnrollment:input_type -> sensory.api.v1.video.CreateEnrollmentRequest
	5,  // 15: sensory.api.v1.video.VideoBiometrics.Authenticate:input_type -> sensory.api.v1.video.AuthenticateRequest
	6,  // 16: sensory.api.v1.video.VideoRecognition.ValidateLiveness:input_type -> sensory.api.v1.video.ValidateRecognitionRequest
	3,  // 17: sensory.api.v1.video.VideoModels.GetModels:output_type -> sensory.api.v1.video.GetModelsResponse
	7,  // 18: sensory.api.v1.video.VideoBiometrics.CreateEnrollment:output_type -> sensory.api.v1.video.CreateEnrollmentResponse
	8,  // 19: sensory.api.v1.video.VideoBiometrics.Authenticate:output_type -> sensory.api.v1.video.AuthenticateResponse
	9,  // 20: sensory.api.v1.video.VideoRecognition.ValidateLiveness:output_type -> sensory.api.v1.video.LivenessRecognitionResponse
	17, // [17:21] is the sub-list for method output_type
	13, // [13:17] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_v1_video_video_proto_init() }
func file_v1_video_video_proto_init() {
	if File_v1_video_video_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_video_video_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_video_video_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_video_video_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_video_video_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEnrollmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_video_video_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_video_video_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateRecognitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_video_video_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEnrollmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_video_video_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_video_video_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LivenessRecognitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_video_video_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEnrollmentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_video_video_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_video_video_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateRecognitionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_video_video_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CreateEnrollmentRequest_Config)(nil),
		(*CreateEnrollmentRequest_ImageContent)(nil),
	}
	file_v1_video_video_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*AuthenticateRequest_Config)(nil),
		(*AuthenticateRequest_ImageContent)(nil),
	}
	file_v1_video_video_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ValidateRecognitionRequest_Config)(nil),
		(*ValidateRecognitionRequest_ImageContent)(nil),
	}
	file_v1_video_video_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*AuthenticateConfig_EnrollmentId)(nil),
		(*AuthenticateConfig_EnrollmentGroupId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_video_video_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_v1_video_video_proto_goTypes,
		DependencyIndexes: file_v1_video_video_proto_depIdxs,
		EnumInfos:         file_v1_video_video_proto_enumTypes,
		MessageInfos:      file_v1_video_video_proto_msgTypes,
	}.Build()
	File_v1_video_video_proto = out.File
	file_v1_video_video_proto_rawDesc = nil
	file_v1_video_video_proto_goTypes = nil
	file_v1_video_video_proto_depIdxs = nil
}
