// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/video/video.proto

package video

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	common "github.com/Sensory-Cloud/go-sdk/pkg/generated/common"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = common.TechnologyType(0)
)

// define the regex for a UUID once up-front
var _video_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on VideoModel with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VideoModel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VideoModel with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VideoModelMultiError, or
// nil if none found.
func (m *VideoModel) ValidateAll() error {
	return m.validate(true)
}

func (m *VideoModel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for IsEnrollable

	// no validation rules for ModelType

	// no validation rules for FixedObject

	// no validation rules for Technology

	// no validation rules for IsLivenessSupported

	if len(errors) > 0 {
		return VideoModelMultiError(errors)
	}

	return nil
}

// VideoModelMultiError is an error wrapping multiple validation errors
// returned by VideoModel.ValidateAll() if the designated constraints aren't met.
type VideoModelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoModelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoModelMultiError) AllErrors() []error { return m }

// VideoModelValidationError is the validation error returned by
// VideoModel.Validate if the designated constraints aren't met.
type VideoModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoModelValidationError) ErrorName() string { return "VideoModelValidationError" }

// Error satisfies the builtin error interface
func (e VideoModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideoModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoModelValidationError{}

// Validate checks the field values on GetModelsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetModelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetModelsRequestMultiError, or nil if none found.
func (m *GetModelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetModelsRequestMultiError(errors)
	}

	return nil
}

// GetModelsRequestMultiError is an error wrapping multiple validation errors
// returned by GetModelsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetModelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModelsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModelsRequestMultiError) AllErrors() []error { return m }

// GetModelsRequestValidationError is the validation error returned by
// GetModelsRequest.Validate if the designated constraints aren't met.
type GetModelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModelsRequestValidationError) ErrorName() string { return "GetModelsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetModelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModelsRequestValidationError{}

// Validate checks the field values on GetModelsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetModelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModelsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetModelsResponseMultiError, or nil if none found.
func (m *GetModelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetModels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetModelsResponseValidationError{
						field:  fmt.Sprintf("Models[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetModelsResponseValidationError{
						field:  fmt.Sprintf("Models[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetModelsResponseValidationError{
					field:  fmt.Sprintf("Models[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetModelsResponseMultiError(errors)
	}

	return nil
}

// GetModelsResponseMultiError is an error wrapping multiple validation errors
// returned by GetModelsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetModelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModelsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModelsResponseMultiError) AllErrors() []error { return m }

// GetModelsResponseValidationError is the validation error returned by
// GetModelsResponse.Validate if the designated constraints aren't met.
type GetModelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModelsResponseValidationError) ErrorName() string {
	return "GetModelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetModelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModelsResponseValidationError{}

// Validate checks the field values on CreateEnrollmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEnrollmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEnrollmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEnrollmentRequestMultiError, or nil if none found.
func (m *CreateEnrollmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEnrollmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofStreamingRequestPresent := false
	switch v := m.StreamingRequest.(type) {
	case *CreateEnrollmentRequest_Config:
		if v == nil {
			err := CreateEnrollmentRequestValidationError{
				field:  "StreamingRequest",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofStreamingRequestPresent = true

		if all {
			switch v := interface{}(m.GetConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateEnrollmentRequestValidationError{
						field:  "Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateEnrollmentRequestValidationError{
						field:  "Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateEnrollmentRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateEnrollmentRequest_ImageContent:
		if v == nil {
			err := CreateEnrollmentRequestValidationError{
				field:  "StreamingRequest",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofStreamingRequestPresent = true
		// no validation rules for ImageContent
	default:
		_ = v // ensures v is used
	}
	if !oneofStreamingRequestPresent {
		err := CreateEnrollmentRequestValidationError{
			field:  "StreamingRequest",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateEnrollmentRequestMultiError(errors)
	}

	return nil
}

// CreateEnrollmentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateEnrollmentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateEnrollmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEnrollmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEnrollmentRequestMultiError) AllErrors() []error { return m }

// CreateEnrollmentRequestValidationError is the validation error returned by
// CreateEnrollmentRequest.Validate if the designated constraints aren't met.
type CreateEnrollmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEnrollmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEnrollmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEnrollmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEnrollmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEnrollmentRequestValidationError) ErrorName() string {
	return "CreateEnrollmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEnrollmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEnrollmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEnrollmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEnrollmentRequestValidationError{}

// Validate checks the field values on AuthenticateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthenticateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthenticateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthenticateRequestMultiError, or nil if none found.
func (m *AuthenticateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthenticateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofStreamingRequestPresent := false
	switch v := m.StreamingRequest.(type) {
	case *AuthenticateRequest_Config:
		if v == nil {
			err := AuthenticateRequestValidationError{
				field:  "StreamingRequest",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofStreamingRequestPresent = true

		if all {
			switch v := interface{}(m.GetConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthenticateRequestValidationError{
						field:  "Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthenticateRequestValidationError{
						field:  "Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthenticateRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AuthenticateRequest_ImageContent:
		if v == nil {
			err := AuthenticateRequestValidationError{
				field:  "StreamingRequest",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofStreamingRequestPresent = true
		// no validation rules for ImageContent
	default:
		_ = v // ensures v is used
	}
	if !oneofStreamingRequestPresent {
		err := AuthenticateRequestValidationError{
			field:  "StreamingRequest",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthenticateRequestMultiError(errors)
	}

	return nil
}

// AuthenticateRequestMultiError is an error wrapping multiple validation
// errors returned by AuthenticateRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthenticateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenticateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenticateRequestMultiError) AllErrors() []error { return m }

// AuthenticateRequestValidationError is the validation error returned by
// AuthenticateRequest.Validate if the designated constraints aren't met.
type AuthenticateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticateRequestValidationError) ErrorName() string {
	return "AuthenticateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticateRequestValidationError{}

// Validate checks the field values on ValidateRecognitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateRecognitionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateRecognitionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateRecognitionRequestMultiError, or nil if none found.
func (m *ValidateRecognitionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateRecognitionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofStreamingRequestPresent := false
	switch v := m.StreamingRequest.(type) {
	case *ValidateRecognitionRequest_Config:
		if v == nil {
			err := ValidateRecognitionRequestValidationError{
				field:  "StreamingRequest",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofStreamingRequestPresent = true

		if all {
			switch v := interface{}(m.GetConfig()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValidateRecognitionRequestValidationError{
						field:  "Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValidateRecognitionRequestValidationError{
						field:  "Config",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateRecognitionRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ValidateRecognitionRequest_ImageContent:
		if v == nil {
			err := ValidateRecognitionRequestValidationError{
				field:  "StreamingRequest",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofStreamingRequestPresent = true
		// no validation rules for ImageContent
	default:
		_ = v // ensures v is used
	}
	if !oneofStreamingRequestPresent {
		err := ValidateRecognitionRequestValidationError{
			field:  "StreamingRequest",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ValidateRecognitionRequestMultiError(errors)
	}

	return nil
}

// ValidateRecognitionRequestMultiError is an error wrapping multiple
// validation errors returned by ValidateRecognitionRequest.ValidateAll() if
// the designated constraints aren't met.
type ValidateRecognitionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateRecognitionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateRecognitionRequestMultiError) AllErrors() []error { return m }

// ValidateRecognitionRequestValidationError is the validation error returned
// by ValidateRecognitionRequest.Validate if the designated constraints aren't met.
type ValidateRecognitionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateRecognitionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateRecognitionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateRecognitionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateRecognitionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateRecognitionRequestValidationError) ErrorName() string {
	return "ValidateRecognitionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateRecognitionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateRecognitionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateRecognitionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateRecognitionRequestValidationError{}

// Validate checks the field values on CreateEnrollmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEnrollmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEnrollmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEnrollmentResponseMultiError, or nil if none found.
func (m *CreateEnrollmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEnrollmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PercentComplete

	// no validation rules for IsAlive

	// no validation rules for EnrollmentId

	// no validation rules for ModelName

	// no validation rules for ModelVersion

	// no validation rules for Score

	if all {
		switch v := interface{}(m.GetEnrollmentToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateEnrollmentResponseValidationError{
					field:  "EnrollmentToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateEnrollmentResponseValidationError{
					field:  "EnrollmentToken",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnrollmentToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEnrollmentResponseValidationError{
				field:  "EnrollmentToken",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateEnrollmentResponseMultiError(errors)
	}

	return nil
}

// CreateEnrollmentResponseMultiError is an error wrapping multiple validation
// errors returned by CreateEnrollmentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateEnrollmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEnrollmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEnrollmentResponseMultiError) AllErrors() []error { return m }

// CreateEnrollmentResponseValidationError is the validation error returned by
// CreateEnrollmentResponse.Validate if the designated constraints aren't met.
type CreateEnrollmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEnrollmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEnrollmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEnrollmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEnrollmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEnrollmentResponseValidationError) ErrorName() string {
	return "CreateEnrollmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEnrollmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEnrollmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEnrollmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEnrollmentResponseValidationError{}

// Validate checks the field values on AuthenticateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthenticateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthenticateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthenticateResponseMultiError, or nil if none found.
func (m *AuthenticateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthenticateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Score

	// no validation rules for IsAlive

	if all {
		switch v := interface{}(m.GetToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthenticateResponseValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthenticateResponseValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthenticateResponseValidationError{
				field:  "Token",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	// no validation rules for EnrollmentId

	if len(errors) > 0 {
		return AuthenticateResponseMultiError(errors)
	}

	return nil
}

// AuthenticateResponseMultiError is an error wrapping multiple validation
// errors returned by AuthenticateResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthenticateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenticateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenticateResponseMultiError) AllErrors() []error { return m }

// AuthenticateResponseValidationError is the validation error returned by
// AuthenticateResponse.Validate if the designated constraints aren't met.
type AuthenticateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticateResponseValidationError) ErrorName() string {
	return "AuthenticateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticateResponseValidationError{}

// Validate checks the field values on LivenessRecognitionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LivenessRecognitionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LivenessRecognitionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LivenessRecognitionResponseMultiError, or nil if none found.
func (m *LivenessRecognitionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LivenessRecognitionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAlive

	// no validation rules for Score

	if len(errors) > 0 {
		return LivenessRecognitionResponseMultiError(errors)
	}

	return nil
}

// LivenessRecognitionResponseMultiError is an error wrapping multiple
// validation errors returned by LivenessRecognitionResponse.ValidateAll() if
// the designated constraints aren't met.
type LivenessRecognitionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LivenessRecognitionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LivenessRecognitionResponseMultiError) AllErrors() []error { return m }

// LivenessRecognitionResponseValidationError is the validation error returned
// by LivenessRecognitionResponse.Validate if the designated constraints
// aren't met.
type LivenessRecognitionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LivenessRecognitionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LivenessRecognitionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LivenessRecognitionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LivenessRecognitionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LivenessRecognitionResponseValidationError) ErrorName() string {
	return "LivenessRecognitionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LivenessRecognitionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLivenessRecognitionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LivenessRecognitionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LivenessRecognitionResponseValidationError{}

// Validate checks the field values on CreateEnrollmentConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateEnrollmentConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateEnrollmentConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateEnrollmentConfigMultiError, or nil if none found.
func (m *CreateEnrollmentConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateEnrollmentConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 127 {
		err := CreateEnrollmentConfigValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 127 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDeviceId()); l < 1 || l > 127 {
		err := CreateEnrollmentConfigValidationError{
			field:  "DeviceId",
			reason: "value length must be between 1 and 127 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetModelName()); l < 1 || l > 255 {
		err := CreateEnrollmentConfigValidationError{
			field:  "ModelName",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 1023 {
		err := CreateEnrollmentConfigValidationError{
			field:  "Description",
			reason: "value length must be at most 1023 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsLivenessEnabled

	if _, ok := RecognitionThreshold_name[int32(m.GetLivenessThreshold())]; !ok {
		err := CreateEnrollmentConfigValidationError{
			field:  "LivenessThreshold",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCompression()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateEnrollmentConfigValidationError{
					field:  "Compression",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateEnrollmentConfigValidationError{
					field:  "Compression",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompression()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEnrollmentConfigValidationError{
				field:  "Compression",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetReferenceId()) > 127 {
		err := CreateEnrollmentConfigValidationError{
			field:  "ReferenceId",
			reason: "value length must be at most 127 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for NumLivenessFramesRequired

	// no validation rules for DisableServerEnrollmentTemplateStorage

	if len(errors) > 0 {
		return CreateEnrollmentConfigMultiError(errors)
	}

	return nil
}

// CreateEnrollmentConfigMultiError is an error wrapping multiple validation
// errors returned by CreateEnrollmentConfig.ValidateAll() if the designated
// constraints aren't met.
type CreateEnrollmentConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEnrollmentConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEnrollmentConfigMultiError) AllErrors() []error { return m }

// CreateEnrollmentConfigValidationError is the validation error returned by
// CreateEnrollmentConfig.Validate if the designated constraints aren't met.
type CreateEnrollmentConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEnrollmentConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEnrollmentConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEnrollmentConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEnrollmentConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEnrollmentConfigValidationError) ErrorName() string {
	return "CreateEnrollmentConfigValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEnrollmentConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEnrollmentConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEnrollmentConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEnrollmentConfigValidationError{}

// Validate checks the field values on AuthenticateConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthenticateConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthenticateConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthenticateConfigMultiError, or nil if none found.
func (m *AuthenticateConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthenticateConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsLivenessEnabled

	if _, ok := RecognitionThreshold_name[int32(m.GetLivenessThreshold())]; !ok {
		err := AuthenticateConfigValidationError{
			field:  "LivenessThreshold",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCompression()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthenticateConfigValidationError{
					field:  "Compression",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthenticateConfigValidationError{
					field:  "Compression",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompression()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthenticateConfigValidationError{
				field:  "Compression",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DoIncludeToken

	// no validation rules for EnrollmentToken

	oneofAuthIdPresent := false
	switch v := m.AuthId.(type) {
	case *AuthenticateConfig_EnrollmentId:
		if v == nil {
			err := AuthenticateConfigValidationError{
				field:  "AuthId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofAuthIdPresent = true

		if err := m._validateUuid(m.GetEnrollmentId()); err != nil {
			err = AuthenticateConfigValidationError{
				field:  "EnrollmentId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *AuthenticateConfig_EnrollmentGroupId:
		if v == nil {
			err := AuthenticateConfigValidationError{
				field:  "AuthId",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofAuthIdPresent = true
		// no validation rules for EnrollmentGroupId
	default:
		_ = v // ensures v is used
	}
	if !oneofAuthIdPresent {
		err := AuthenticateConfigValidationError{
			field:  "AuthId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthenticateConfigMultiError(errors)
	}

	return nil
}

func (m *AuthenticateConfig) _validateUuid(uuid string) error {
	if matched := _video_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AuthenticateConfigMultiError is an error wrapping multiple validation errors
// returned by AuthenticateConfig.ValidateAll() if the designated constraints
// aren't met.
type AuthenticateConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthenticateConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthenticateConfigMultiError) AllErrors() []error { return m }

// AuthenticateConfigValidationError is the validation error returned by
// AuthenticateConfig.Validate if the designated constraints aren't met.
type AuthenticateConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticateConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticateConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticateConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticateConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticateConfigValidationError) ErrorName() string {
	return "AuthenticateConfigValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticateConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticateConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticateConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticateConfigValidationError{}

// Validate checks the field values on ValidateRecognitionConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateRecognitionConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateRecognitionConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateRecognitionConfigMultiError, or nil if none found.
func (m *ValidateRecognitionConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateRecognitionConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetModelName()); l < 1 || l > 255 {
		err := ValidateRecognitionConfigValidationError{
			field:  "ModelName",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 127 {
		err := ValidateRecognitionConfigValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 127 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := RecognitionThreshold_name[int32(m.GetThreshold())]; !ok {
		err := ValidateRecognitionConfigValidationError{
			field:  "Threshold",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ValidateRecognitionConfigMultiError(errors)
	}

	return nil
}

// ValidateRecognitionConfigMultiError is an error wrapping multiple validation
// errors returned by ValidateRecognitionConfig.ValidateAll() if the
// designated constraints aren't met.
type ValidateRecognitionConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateRecognitionConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateRecognitionConfigMultiError) AllErrors() []error { return m }

// ValidateRecognitionConfigValidationError is the validation error returned by
// ValidateRecognitionConfig.Validate if the designated constraints aren't met.
type ValidateRecognitionConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateRecognitionConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateRecognitionConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateRecognitionConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateRecognitionConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateRecognitionConfigValidationError) ErrorName() string {
	return "ValidateRecognitionConfigValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateRecognitionConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateRecognitionConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateRecognitionConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateRecognitionConfigValidationError{}
