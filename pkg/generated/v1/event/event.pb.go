// sensory.api.event

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.3
// source: v1/event/event.proto

package event

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	common "github.com/Sensory-Cloud/go-sdk/pkg/generated/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request to create a new usage event
type PublishUsageEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of events to publish
	Events []*UsageEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *PublishUsageEventsRequest) Reset() {
	*x = PublishUsageEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_event_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishUsageEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishUsageEventsRequest) ProtoMessage() {}

func (x *PublishUsageEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_event_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishUsageEventsRequest.ProtoReflect.Descriptor instead.
func (*PublishUsageEventsRequest) Descriptor() ([]byte, []int) {
	return file_v1_event_event_proto_rawDescGZIP(), []int{0}
}

func (x *PublishUsageEventsRequest) GetEvents() []*UsageEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type UsageEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The UTC timestamp
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The duration of the event in milliseconds
	Duration int64 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	// UUID representing the unique event
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// OAuth ClientID related to the event
	ClientId string `protobuf:"bytes,4,opt,name=clientId,proto3" json:"clientId,omitempty"`
	// Type of event to create
	Type common.UsageEventType `protobuf:"varint,5,opt,name=type,proto3,enum=sensory.api.common.UsageEventType" json:"type,omitempty"`
	// The specific route (endpoint) that was accessed
	Route string `protobuf:"bytes,6,opt,name=route,proto3" json:"route,omitempty"`
	// The technologies that were used
	Technologies []common.TechnologyType `protobuf:"varint,7,rep,packed,name=technologies,proto3,enum=sensory.api.common.TechnologyType" json:"technologies,omitempty"`
	// The models that were used
	Models []string `protobuf:"bytes,8,rep,name=models,proto3" json:"models,omitempty"`
	// The duration audio processed in milliseconds
	AudioDurationMs int64 `protobuf:"varint,9,opt,name=audioDurationMs,proto3" json:"audioDurationMs,omitempty"`
	// The number of video frames processed
	VideoFrameCount int64 `protobuf:"varint,10,opt,name=videoFrameCount,proto3" json:"videoFrameCount,omitempty"`
	// Optional Tenant ID of the event. Used internally by Sensory multi-tenant servers
	TenantId string `protobuf:"bytes,11,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	// Billable function, if applicable
	BillableFunction common.ModelType `protobuf:"varint,12,opt,name=billableFunction,proto3,enum=sensory.api.common.ModelType" json:"billableFunction,omitempty"`
	// The number of tokens processed
	TokenCount int64 `protobuf:"varint,13,opt,name=tokenCount,proto3" json:"tokenCount,omitempty"`
}

func (x *UsageEvent) Reset() {
	*x = UsageEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_event_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageEvent) ProtoMessage() {}

func (x *UsageEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v1_event_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageEvent.ProtoReflect.Descriptor instead.
func (*UsageEvent) Descriptor() ([]byte, []int) {
	return file_v1_event_event_proto_rawDescGZIP(), []int{1}
}

func (x *UsageEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *UsageEvent) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *UsageEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UsageEvent) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *UsageEvent) GetType() common.UsageEventType {
	if x != nil {
		return x.Type
	}
	return common.UsageEventType(0)
}

func (x *UsageEvent) GetRoute() string {
	if x != nil {
		return x.Route
	}
	return ""
}

func (x *UsageEvent) GetTechnologies() []common.TechnologyType {
	if x != nil {
		return x.Technologies
	}
	return nil
}

func (x *UsageEvent) GetModels() []string {
	if x != nil {
		return x.Models
	}
	return nil
}

func (x *UsageEvent) GetAudioDurationMs() int64 {
	if x != nil {
		return x.AudioDurationMs
	}
	return 0
}

func (x *UsageEvent) GetVideoFrameCount() int64 {
	if x != nil {
		return x.VideoFrameCount
	}
	return 0
}

func (x *UsageEvent) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *UsageEvent) GetBillableFunction() common.ModelType {
	if x != nil {
		return x.BillableFunction
	}
	return common.ModelType(0)
}

func (x *UsageEvent) GetTokenCount() int64 {
	if x != nil {
		return x.TokenCount
	}
	return 0
}

type UsageEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The UTC timestamp
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The duration of the event in milliseconds
	Duration int64 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	// UUID representing the unique event
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// OAuth ClientID related to the event
	ClientId string `protobuf:"bytes,4,opt,name=clientId,proto3" json:"clientId,omitempty"`
	// Type of event to create
	Type common.UsageEventType `protobuf:"varint,5,opt,name=type,proto3,enum=sensory.api.common.UsageEventType" json:"type,omitempty"`
	// The specific route (endpoint) that was accessed
	Route string `protobuf:"bytes,6,opt,name=route,proto3" json:"route,omitempty"`
	// The technologies that were used
	Technologies []common.TechnologyType `protobuf:"varint,7,rep,packed,name=technologies,proto3,enum=sensory.api.common.TechnologyType" json:"technologies,omitempty"`
	// The models that were used
	Models []string `protobuf:"bytes,8,rep,name=models,proto3" json:"models,omitempty"`
	// The value that is billed for this event
	BillableValue int64 `protobuf:"varint,9,opt,name=billableValue,proto3" json:"billableValue,omitempty"`
	// The units of this billed event
	BillableUnits string `protobuf:"bytes,10,opt,name=billableUnits,proto3" json:"billableUnits,omitempty"`
	// Optional Tenant ID of the event. Used internally by Sensory multi-tenant servers
	TenantId string `protobuf:"bytes,11,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	// Billable function, if applicable
	BillableFunction common.ModelType `protobuf:"varint,12,opt,name=billableFunction,proto3,enum=sensory.api.common.ModelType" json:"billableFunction,omitempty"`
	// Credits used by this event
	Credits float64 `protobuf:"fixed64,13,opt,name=credits,proto3" json:"credits,omitempty"`
}

func (x *UsageEventResponse) Reset() {
	*x = UsageEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_event_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageEventResponse) ProtoMessage() {}

func (x *UsageEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_event_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageEventResponse.ProtoReflect.Descriptor instead.
func (*UsageEventResponse) Descriptor() ([]byte, []int) {
	return file_v1_event_event_proto_rawDescGZIP(), []int{2}
}

func (x *UsageEventResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *UsageEventResponse) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *UsageEventResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UsageEventResponse) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *UsageEventResponse) GetType() common.UsageEventType {
	if x != nil {
		return x.Type
	}
	return common.UsageEventType(0)
}

func (x *UsageEventResponse) GetRoute() string {
	if x != nil {
		return x.Route
	}
	return ""
}

func (x *UsageEventResponse) GetTechnologies() []common.TechnologyType {
	if x != nil {
		return x.Technologies
	}
	return nil
}

func (x *UsageEventResponse) GetModels() []string {
	if x != nil {
		return x.Models
	}
	return nil
}

func (x *UsageEventResponse) GetBillableValue() int64 {
	if x != nil {
		return x.BillableValue
	}
	return 0
}

func (x *UsageEventResponse) GetBillableUnits() string {
	if x != nil {
		return x.BillableUnits
	}
	return ""
}

func (x *UsageEventResponse) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *UsageEventResponse) GetBillableFunction() common.ModelType {
	if x != nil {
		return x.BillableFunction
	}
	return common.ModelType(0)
}

func (x *UsageEventResponse) GetCredits() float64 {
	if x != nil {
		return x.Credits
	}
	return 0
}

type UsageEventListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional tenantId which must be a UUID. If this UUID is omitted, it will be inferred from the requestor.
	TenantId string `protobuf:"bytes,1,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	// Metadata about how to paginate the response
	Pagination *common.PaginationOptions `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Optional Start UTC timestamp. Internally this timestamp is rounded to the nearest second.
	After *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=after,proto3" json:"after,omitempty"`
	// Optional End UTC timestamp. Internally this timestamp is rounded to the nearest second.
	Before *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=before,proto3" json:"before,omitempty"`
	// Type of event to filter on
	BillableFunctions []common.ModelType `protobuf:"varint,5,rep,packed,name=billableFunctions,proto3,enum=sensory.api.common.ModelType" json:"billableFunctions,omitempty"`
}

func (x *UsageEventListRequest) Reset() {
	*x = UsageEventListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_event_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageEventListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageEventListRequest) ProtoMessage() {}

func (x *UsageEventListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_event_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageEventListRequest.ProtoReflect.Descriptor instead.
func (*UsageEventListRequest) Descriptor() ([]byte, []int) {
	return file_v1_event_event_proto_rawDescGZIP(), []int{3}
}

func (x *UsageEventListRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *UsageEventListRequest) GetPagination() *common.PaginationOptions {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *UsageEventListRequest) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *UsageEventListRequest) GetBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *UsageEventListRequest) GetBillableFunctions() []common.ModelType {
	if x != nil {
		return x.BillableFunctions
	}
	return nil
}

type UsageEventListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of usage events
	Events []*UsageEventResponse `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	// Metadata about how the response has been paginated
	Pagination *common.PaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *UsageEventListResponse) Reset() {
	*x = UsageEventListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_event_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageEventListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageEventListResponse) ProtoMessage() {}

func (x *UsageEventListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_event_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageEventListResponse.ProtoReflect.Descriptor instead.
func (*UsageEventListResponse) Descriptor() ([]byte, []int) {
	return file_v1_event_event_proto_rawDescGZIP(), []int{4}
}

func (x *UsageEventListResponse) GetEvents() []*UsageEventResponse {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *UsageEventListResponse) GetPagination() *common.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GlobalEventSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of tenants to return data for, If left empty all tenants will be included in the response
	Tenants []string `protobuf:"bytes,1,rep,name=tenants,proto3" json:"tenants,omitempty"`
	// Optional Start UTC timestamp. Internally this timestamp is rounded to the nearest second.
	After *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=after,proto3" json:"after,omitempty"`
	// Optional End UTC timestamp. Internally this timestamp is rounded to the nearest second.
	Before *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=before,proto3" json:"before,omitempty"`
	// Type of event to filter on, If left empty all event types will be included
	BillableFunctions []common.ModelType `protobuf:"varint,5,rep,packed,name=billableFunctions,proto3,enum=sensory.api.common.ModelType" json:"billableFunctions,omitempty"`
}

func (x *GlobalEventSummaryRequest) Reset() {
	*x = GlobalEventSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_event_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalEventSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalEventSummaryRequest) ProtoMessage() {}

func (x *GlobalEventSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_event_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalEventSummaryRequest.ProtoReflect.Descriptor instead.
func (*GlobalEventSummaryRequest) Descriptor() ([]byte, []int) {
	return file_v1_event_event_proto_rawDescGZIP(), []int{5}
}

func (x *GlobalEventSummaryRequest) GetTenants() []string {
	if x != nil {
		return x.Tenants
	}
	return nil
}

func (x *GlobalEventSummaryRequest) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *GlobalEventSummaryRequest) GetBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *GlobalEventSummaryRequest) GetBillableFunctions() []common.ModelType {
	if x != nil {
		return x.BillableFunctions
	}
	return nil
}

type UsageEventSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of summaries organized by type
	Summaries []*UsageEventModelSummary `protobuf:"bytes,1,rep,name=summaries,proto3" json:"summaries,omitempty"`
}

func (x *UsageEventSummary) Reset() {
	*x = UsageEventSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_event_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageEventSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageEventSummary) ProtoMessage() {}

func (x *UsageEventSummary) ProtoReflect() protoreflect.Message {
	mi := &file_v1_event_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageEventSummary.ProtoReflect.Descriptor instead.
func (*UsageEventSummary) Descriptor() ([]byte, []int) {
	return file_v1_event_event_proto_rawDescGZIP(), []int{6}
}

func (x *UsageEventSummary) GetSummaries() []*UsageEventModelSummary {
	if x != nil {
		return x.Summaries
	}
	return nil
}

type UsageEventModelSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Function of the model used
	BillableFunction common.ModelType `protobuf:"varint,1,opt,name=billableFunction,proto3,enum=sensory.api.common.ModelType" json:"billableFunction,omitempty"`
	// Units of measure for the summary value
	Units string `protobuf:"bytes,2,opt,name=units,proto3" json:"units,omitempty"`
	// The value of the summary
	Value int64 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	// The number of events included in the summary
	Count int64 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	// Credits used by this event
	Credits float64 `protobuf:"fixed64,5,opt,name=credits,proto3" json:"credits,omitempty"`
	// Tenant that the events are from. For summaries that span multiple tenants, this field will be empty
	TenantId string `protobuf:"bytes,6,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *UsageEventModelSummary) Reset() {
	*x = UsageEventModelSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_event_event_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageEventModelSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageEventModelSummary) ProtoMessage() {}

func (x *UsageEventModelSummary) ProtoReflect() protoreflect.Message {
	mi := &file_v1_event_event_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageEventModelSummary.ProtoReflect.Descriptor instead.
func (*UsageEventModelSummary) Descriptor() ([]byte, []int) {
	return file_v1_event_event_proto_rawDescGZIP(), []int{7}
}

func (x *UsageEventModelSummary) GetBillableFunction() common.ModelType {
	if x != nil {
		return x.BillableFunction
	}
	return common.ModelType(0)
}

func (x *UsageEventModelSummary) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

func (x *UsageEventModelSummary) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UsageEventModelSummary) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UsageEventModelSummary) GetCredits() float64 {
	if x != nil {
		return x.Credits
	}
	return 0
}

func (x *UsageEventModelSummary) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

// Response to a publish events request
type PublishUsageEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PublishUsageEventsResponse) Reset() {
	*x = PublishUsageEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_event_event_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishUsageEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishUsageEventsResponse) ProtoMessage() {}

func (x *PublishUsageEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_event_event_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishUsageEventsResponse.ProtoReflect.Descriptor instead.
func (*PublishUsageEventsResponse) Descriptor() ([]byte, []int) {
	return file_v1_event_event_proto_rawDescGZIP(), []int{8}
}

var File_v1_event_event_proto protoreflect.FileDescriptor

var file_v1_event_event_proto_rawDesc = []byte{
	0x0a, 0x14, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x55, 0x0a, 0x19, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0xd5, 0x04, 0x0a, 0x0a, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x42, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18,
	0x7f, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x03, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x46, 0x0a, 0x0c, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x49, 0x0a, 0x10, 0x62, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x62, 0x69, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcf, 0x04, 0x0a, 0x12, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0xb2, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x22, 0x02, 0x28, 0x00,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18,
	0x7f, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a,
	0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x03, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x46, 0x0a, 0x0c, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x65, 0x63, 0x68, 0x6e,
	0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x69,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x10, 0x62, 0x69, 0x6c, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x10, 0x62, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x22, 0xad, 0x02, 0x0a,
	0x15, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12,
	0x4b, 0x0a, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa2, 0x01, 0x0a,
	0x16, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xe8, 0x01, 0x0a, 0x19, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12,
	0x4b, 0x0a, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x62, 0x69, 0x6c, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5f, 0x0a, 0x11,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x4a, 0x0a, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0xdb, 0x01,
	0x0a, 0x16, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x49, 0x0a, 0x10, 0x62, 0x69, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x10, 0x62, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xe0, 0x03, 0x0a, 0x0c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x79, 0x0a, 0x12, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x2f, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x2b, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x2f, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x00, 0x42, 0x7b, 0x0a, 0x1c,
	0x61, 0x69, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x16, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x79, 0x41, 0x70, 0x69, 0x56, 0x31, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x2e, 0x67, 0x69,
	0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0xa2, 0x02, 0x04, 0x53, 0x45, 0x4e, 0x47, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_v1_event_event_proto_rawDescOnce sync.Once
	file_v1_event_event_proto_rawDescData = file_v1_event_event_proto_rawDesc
)

func file_v1_event_event_proto_rawDescGZIP() []byte {
	file_v1_event_event_proto_rawDescOnce.Do(func() {
		file_v1_event_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_event_event_proto_rawDescData)
	})
	return file_v1_event_event_proto_rawDescData
}

var file_v1_event_event_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_v1_event_event_proto_goTypes = []interface{}{
	(*PublishUsageEventsRequest)(nil),  // 0: sensory.api.v1.event.PublishUsageEventsRequest
	(*UsageEvent)(nil),                 // 1: sensory.api.v1.event.UsageEvent
	(*UsageEventResponse)(nil),         // 2: sensory.api.v1.event.UsageEventResponse
	(*UsageEventListRequest)(nil),      // 3: sensory.api.v1.event.UsageEventListRequest
	(*UsageEventListResponse)(nil),     // 4: sensory.api.v1.event.UsageEventListResponse
	(*GlobalEventSummaryRequest)(nil),  // 5: sensory.api.v1.event.GlobalEventSummaryRequest
	(*UsageEventSummary)(nil),          // 6: sensory.api.v1.event.UsageEventSummary
	(*UsageEventModelSummary)(nil),     // 7: sensory.api.v1.event.UsageEventModelSummary
	(*PublishUsageEventsResponse)(nil), // 8: sensory.api.v1.event.PublishUsageEventsResponse
	(*timestamppb.Timestamp)(nil),      // 9: google.protobuf.Timestamp
	(common.UsageEventType)(0),         // 10: sensory.api.common.UsageEventType
	(common.TechnologyType)(0),         // 11: sensory.api.common.TechnologyType
	(common.ModelType)(0),              // 12: sensory.api.common.ModelType
	(*common.PaginationOptions)(nil),   // 13: sensory.api.common.PaginationOptions
	(*common.PaginationResponse)(nil),  // 14: sensory.api.common.PaginationResponse
}
var file_v1_event_event_proto_depIdxs = []int32{
	1,  // 0: sensory.api.v1.event.PublishUsageEventsRequest.events:type_name -> sensory.api.v1.event.UsageEvent
	9,  // 1: sensory.api.v1.event.UsageEvent.timestamp:type_name -> google.protobuf.Timestamp
	10, // 2: sensory.api.v1.event.UsageEvent.type:type_name -> sensory.api.common.UsageEventType
	11, // 3: sensory.api.v1.event.UsageEvent.technologies:type_name -> sensory.api.common.TechnologyType
	12, // 4: sensory.api.v1.event.UsageEvent.billableFunction:type_name -> sensory.api.common.ModelType
	9,  // 5: sensory.api.v1.event.UsageEventResponse.timestamp:type_name -> google.protobuf.Timestamp
	10, // 6: sensory.api.v1.event.UsageEventResponse.type:type_name -> sensory.api.common.UsageEventType
	11, // 7: sensory.api.v1.event.UsageEventResponse.technologies:type_name -> sensory.api.common.TechnologyType
	12, // 8: sensory.api.v1.event.UsageEventResponse.billableFunction:type_name -> sensory.api.common.ModelType
	13, // 9: sensory.api.v1.event.UsageEventListRequest.pagination:type_name -> sensory.api.common.PaginationOptions
	9,  // 10: sensory.api.v1.event.UsageEventListRequest.after:type_name -> google.protobuf.Timestamp
	9,  // 11: sensory.api.v1.event.UsageEventListRequest.before:type_name -> google.protobuf.Timestamp
	12, // 12: sensory.api.v1.event.UsageEventListRequest.billableFunctions:type_name -> sensory.api.common.ModelType
	2,  // 13: sensory.api.v1.event.UsageEventListResponse.events:type_name -> sensory.api.v1.event.UsageEventResponse
	14, // 14: sensory.api.v1.event.UsageEventListResponse.pagination:type_name -> sensory.api.common.PaginationResponse
	9,  // 15: sensory.api.v1.event.GlobalEventSummaryRequest.after:type_name -> google.protobuf.Timestamp
	9,  // 16: sensory.api.v1.event.GlobalEventSummaryRequest.before:type_name -> google.protobuf.Timestamp
	12, // 17: sensory.api.v1.event.GlobalEventSummaryRequest.billableFunctions:type_name -> sensory.api.common.ModelType
	7,  // 18: sensory.api.v1.event.UsageEventSummary.summaries:type_name -> sensory.api.v1.event.UsageEventModelSummary
	12, // 19: sensory.api.v1.event.UsageEventModelSummary.billableFunction:type_name -> sensory.api.common.ModelType
	0,  // 20: sensory.api.v1.event.EventService.PublishUsageEvents:input_type -> sensory.api.v1.event.PublishUsageEventsRequest
	3,  // 21: sensory.api.v1.event.EventService.GetUsageEventList:input_type -> sensory.api.v1.event.UsageEventListRequest
	3,  // 22: sensory.api.v1.event.EventService.GetUsageEventSummary:input_type -> sensory.api.v1.event.UsageEventListRequest
	5,  // 23: sensory.api.v1.event.EventService.GetGlobalUsageSummary:input_type -> sensory.api.v1.event.GlobalEventSummaryRequest
	8,  // 24: sensory.api.v1.event.EventService.PublishUsageEvents:output_type -> sensory.api.v1.event.PublishUsageEventsResponse
	4,  // 25: sensory.api.v1.event.EventService.GetUsageEventList:output_type -> sensory.api.v1.event.UsageEventListResponse
	6,  // 26: sensory.api.v1.event.EventService.GetUsageEventSummary:output_type -> sensory.api.v1.event.UsageEventSummary
	6,  // 27: sensory.api.v1.event.EventService.GetGlobalUsageSummary:output_type -> sensory.api.v1.event.UsageEventSummary
	24, // [24:28] is the sub-list for method output_type
	20, // [20:24] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_v1_event_event_proto_init() }
func file_v1_event_event_proto_init() {
	if File_v1_event_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_event_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishUsageEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_event_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_event_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_event_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageEventListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_event_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageEventListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_event_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalEventSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_event_event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageEventSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_event_event_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageEventModelSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_event_event_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishUsageEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_event_event_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_event_event_proto_goTypes,
		DependencyIndexes: file_v1_event_event_proto_depIdxs,
		MessageInfos:      file_v1_event_event_proto_msgTypes,
	}.Build()
	File_v1_event_event_proto = out.File
	file_v1_event_event_proto_rawDesc = nil
	file_v1_event_event_proto_goTypes = nil
	file_v1_event_event_proto_depIdxs = nil
}
