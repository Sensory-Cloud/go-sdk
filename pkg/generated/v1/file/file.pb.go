// sensory.api.file

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: v1/file/file.proto

package file

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A type of file supported by this API
type FileCategory int32

const (
	// A model used with TSSV
	FileCategory_TSSV_MODEL FileCategory = 0
	// A model used with the Atlas library
	FileCategory_ATLAS_MODEL FileCategory = 1
	// A model used with the TNL library
	FileCategory_TNL_MODEL FileCategory = 2
	// Unknown Model Type
	FileCategory_UNKNOWN FileCategory = 100
)

// Enum value maps for FileCategory.
var (
	FileCategory_name = map[int32]string{
		0:   "TSSV_MODEL",
		1:   "ATLAS_MODEL",
		2:   "TNL_MODEL",
		100: "UNKNOWN",
	}
	FileCategory_value = map[string]int32{
		"TSSV_MODEL":  0,
		"ATLAS_MODEL": 1,
		"TNL_MODEL":   2,
		"UNKNOWN":     100,
	}
)

func (x FileCategory) Enum() *FileCategory {
	p := new(FileCategory)
	*p = x
	return p
}

func (x FileCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_file_file_proto_enumTypes[0].Descriptor()
}

func (FileCategory) Type() protoreflect.EnumType {
	return &file_v1_file_file_proto_enumTypes[0]
}

func (x FileCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileCategory.Descriptor instead.
func (FileCategory) EnumDescriptor() ([]byte, []int) {
	return file_v1_file_file_proto_rawDescGZIP(), []int{0}
}

// A request to download file
type FileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The complete path of the file to be downloaded
	// including the filename. (E.G my/file/path/file.txt)
	File string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	// The category of file requested with version information.
	Category *VersionedFileCategory `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	// The offset value based on the number of bytes previously downloaded.
	// Useful if the download previously failed, and you'd like to start from where you left off.
	Offset int64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *FileRequest) Reset() {
	*x = FileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_file_file_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRequest) ProtoMessage() {}

func (x *FileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_file_file_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRequest.ProtoReflect.Descriptor instead.
func (*FileRequest) Descriptor() ([]byte, []int) {
	return file_v1_file_file_proto_rawDescGZIP(), []int{0}
}

func (x *FileRequest) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *FileRequest) GetCategory() *VersionedFileCategory {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *FileRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// The top-level message returned from the client for the `Download` method.
// Multiple `FileResponse` messages are sent in a stream. The first message
// will contain an `info` message and will not contain `FileChunk`.
// All subsequent messages must contain `FileChunk` and
// must not contain an `info` message.
type FileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The streaming response, which is either info or chunk.
	//
	// Types that are assignable to StreamingResponse:
	//
	//	*FileResponse_Info
	//	*FileResponse_Chunk
	StreamingResponse isFileResponse_StreamingResponse `protobuf_oneof:"streamingResponse"`
	// File download complete flag
	Complete bool `protobuf:"varint,3,opt,name=complete,proto3" json:"complete,omitempty"`
}

func (x *FileResponse) Reset() {
	*x = FileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_file_file_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileResponse) ProtoMessage() {}

func (x *FileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_file_file_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileResponse.ProtoReflect.Descriptor instead.
func (*FileResponse) Descriptor() ([]byte, []int) {
	return file_v1_file_file_proto_rawDescGZIP(), []int{1}
}

func (m *FileResponse) GetStreamingResponse() isFileResponse_StreamingResponse {
	if m != nil {
		return m.StreamingResponse
	}
	return nil
}

func (x *FileResponse) GetInfo() *FileInfo {
	if x, ok := x.GetStreamingResponse().(*FileResponse_Info); ok {
		return x.Info
	}
	return nil
}

func (x *FileResponse) GetChunk() *FileChunk {
	if x, ok := x.GetStreamingResponse().(*FileResponse_Chunk); ok {
		return x.Chunk
	}
	return nil
}

func (x *FileResponse) GetComplete() bool {
	if x != nil {
		return x.Complete
	}
	return false
}

type isFileResponse_StreamingResponse interface {
	isFileResponse_StreamingResponse()
}

type FileResponse_Info struct {
	// Provides information about the requested file.
	Info *FileInfo `protobuf:"bytes,1,opt,name=info,proto3,oneof"`
}

type FileResponse_Chunk struct {
	// A chunk of the downloaded file
	Chunk *FileChunk `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*FileResponse_Info) isFileResponse_StreamingResponse() {}

func (*FileResponse_Chunk) isFileResponse_StreamingResponse() {}

// A request to obtain a catalog of all files
type FileCatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map of file category versions
	Categories []*VersionedFileCategory `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *FileCatalogRequest) Reset() {
	*x = FileCatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_file_file_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileCatalogRequest) ProtoMessage() {}

func (x *FileCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_file_file_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileCatalogRequest.ProtoReflect.Descriptor instead.
func (*FileCatalogRequest) Descriptor() ([]byte, []int) {
	return file_v1_file_file_proto_rawDescGZIP(), []int{2}
}

func (x *FileCatalogRequest) GetCategories() []*VersionedFileCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

// a request to obtain the complete file catalog (Internal only)
type FileCompleteCatalogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional tenantId to retrieve tenant-specific models in addition to the complete catalog
	TenantId string `protobuf:"bytes,1,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *FileCompleteCatalogRequest) Reset() {
	*x = FileCompleteCatalogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_file_file_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileCompleteCatalogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileCompleteCatalogRequest) ProtoMessage() {}

func (x *FileCompleteCatalogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_file_file_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileCompleteCatalogRequest.ProtoReflect.Descriptor instead.
func (*FileCompleteCatalogRequest) Descriptor() ([]byte, []int) {
	return file_v1_file_file_proto_rawDescGZIP(), []int{3}
}

func (x *FileCompleteCatalogRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

// A reponse with the file catalog
type FileCatalogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The catalog of files
	Catalog []*FileCatalog `protobuf:"bytes,1,rep,name=catalog,proto3" json:"catalog,omitempty"`
}

func (x *FileCatalogResponse) Reset() {
	*x = FileCatalogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_file_file_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileCatalogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileCatalogResponse) ProtoMessage() {}

func (x *FileCatalogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_file_file_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileCatalogResponse.ProtoReflect.Descriptor instead.
func (*FileCatalogResponse) Descriptor() ([]byte, []int) {
	return file_v1_file_file_proto_rawDescGZIP(), []int{4}
}

func (x *FileCatalogResponse) GetCatalog() []*FileCatalog {
	if x != nil {
		return x.Catalog
	}
	return nil
}

// A chunk of a downloaded file
type FileChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The bytes to be sent to the
	Bytes []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	// The offset value based on the number of bytes currently written
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *FileChunk) Reset() {
	*x = FileChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_file_file_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileChunk) ProtoMessage() {}

func (x *FileChunk) ProtoReflect() protoreflect.Message {
	mi := &file_v1_file_file_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileChunk.ProtoReflect.Descriptor instead.
func (*FileChunk) Descriptor() ([]byte, []int) {
	return file_v1_file_file_proto_rawDescGZIP(), []int{5}
}

func (x *FileChunk) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *FileChunk) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// Information about the file
type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the base file.
	File string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	// The complete path of the file to be downloaded
	// including the filename. (E.G my/file/path/file.txt)
	AbsolutePath string `protobuf:"bytes,2,opt,name=absolutePath,proto3" json:"absolutePath,omitempty"`
	// The full size of the file
	Size int64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// A standard MIME type describing the format of the file
	ContentType string `protobuf:"bytes,4,opt,name=contentType,proto3" json:"contentType,omitempty"`
	// The md5 file hash
	Hash string `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
	// Optional tenantID associated with this file
	TenantId string `protobuf:"bytes,6,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_file_file_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_v1_file_file_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_v1_file_file_proto_rawDescGZIP(), []int{6}
}

func (x *FileInfo) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *FileInfo) GetAbsolutePath() string {
	if x != nil {
		return x.AbsolutePath
	}
	return ""
}

func (x *FileInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileInfo) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *FileInfo) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *FileInfo) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

// A message containing a list of FileInfos
type FileCatalog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of files
	Files []*FileInfo `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	// The category of files in this catalog
	Category *VersionedFileCategory `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *FileCatalog) Reset() {
	*x = FileCatalog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_file_file_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileCatalog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileCatalog) ProtoMessage() {}

func (x *FileCatalog) ProtoReflect() protoreflect.Message {
	mi := &file_v1_file_file_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileCatalog.ProtoReflect.Descriptor instead.
func (*FileCatalog) Descriptor() ([]byte, []int) {
	return file_v1_file_file_proto_rawDescGZIP(), []int{7}
}

func (x *FileCatalog) GetFiles() []*FileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *FileCatalog) GetCategory() *VersionedFileCategory {
	if x != nil {
		return x.Category
	}
	return nil
}

// A versioned file category
type VersionedFileCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The category of file
	Category FileCategory `protobuf:"varint,1,opt,name=category,proto3,enum=sensory.api.v1.file.FileCategory" json:"category,omitempty"`
	// The version of the category (e.g. For TSSV v3.16.3 models, the version would be 3.16)
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *VersionedFileCategory) Reset() {
	*x = VersionedFileCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_file_file_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionedFileCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionedFileCategory) ProtoMessage() {}

func (x *VersionedFileCategory) ProtoReflect() protoreflect.Message {
	mi := &file_v1_file_file_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionedFileCategory.ProtoReflect.Descriptor instead.
func (*VersionedFileCategory) Descriptor() ([]byte, []int) {
	return file_v1_file_file_proto_rawDescGZIP(), []int{8}
}

func (x *VersionedFileCategory) GetCategory() FileCategory {
	if x != nil {
		return x.Category
	}
	return FileCategory_TSSV_MODEL
}

func (x *VersionedFileCategory) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

var File_v1_file_file_proto protoreflect.FileDescriptor

var file_v1_file_file_proto_rawDesc = []byte{
	0x0a, 0x12, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x0f, 0x52, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x13, 0x0a, 0x11,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x6a, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08,
	0x01, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x38, 0x0a,
	0x1a, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x22, 0x39, 0x0a, 0x09, 0x46, 0x69,
	0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x62,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x8a, 0x01, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x12, 0x33, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x7a, 0x0a,
	0x15, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2a, 0x4b, 0x0a, 0x0c, 0x46, 0x69, 0x6c,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x53, 0x53,
	0x56, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x54, 0x4c,
	0x41, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x4e,
	0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x64, 0x32, 0xff, 0x02, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x4c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x61, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x27, 0x2e, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x71, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x2f, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x08, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x20, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x71, 0x0a, 0x1b, 0x61, 0x69, 0x2e, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x15, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79,
	0x41, 0x70, 0x69, 0x56, 0x31, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x39, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x79, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x74, 0x69, 0x74, 0x61, 0x6e, 0x2e, 0x67, 0x69, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_v1_file_file_proto_rawDescOnce sync.Once
	file_v1_file_file_proto_rawDescData = file_v1_file_file_proto_rawDesc
)

func file_v1_file_file_proto_rawDescGZIP() []byte {
	file_v1_file_file_proto_rawDescOnce.Do(func() {
		file_v1_file_file_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_file_file_proto_rawDescData)
	})
	return file_v1_file_file_proto_rawDescData
}

var file_v1_file_file_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_v1_file_file_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_v1_file_file_proto_goTypes = []interface{}{
	(FileCategory)(0),                  // 0: sensory.api.v1.file.FileCategory
	(*FileRequest)(nil),                // 1: sensory.api.v1.file.FileRequest
	(*FileResponse)(nil),               // 2: sensory.api.v1.file.FileResponse
	(*FileCatalogRequest)(nil),         // 3: sensory.api.v1.file.FileCatalogRequest
	(*FileCompleteCatalogRequest)(nil), // 4: sensory.api.v1.file.FileCompleteCatalogRequest
	(*FileCatalogResponse)(nil),        // 5: sensory.api.v1.file.FileCatalogResponse
	(*FileChunk)(nil),                  // 6: sensory.api.v1.file.FileChunk
	(*FileInfo)(nil),                   // 7: sensory.api.v1.file.FileInfo
	(*FileCatalog)(nil),                // 8: sensory.api.v1.file.FileCatalog
	(*VersionedFileCategory)(nil),      // 9: sensory.api.v1.file.VersionedFileCategory
}
var file_v1_file_file_proto_depIdxs = []int32{
	9,  // 0: sensory.api.v1.file.FileRequest.category:type_name -> sensory.api.v1.file.VersionedFileCategory
	7,  // 1: sensory.api.v1.file.FileResponse.info:type_name -> sensory.api.v1.file.FileInfo
	6,  // 2: sensory.api.v1.file.FileResponse.chunk:type_name -> sensory.api.v1.file.FileChunk
	9,  // 3: sensory.api.v1.file.FileCatalogRequest.categories:type_name -> sensory.api.v1.file.VersionedFileCategory
	8,  // 4: sensory.api.v1.file.FileCatalogResponse.catalog:type_name -> sensory.api.v1.file.FileCatalog
	7,  // 5: sensory.api.v1.file.FileCatalog.files:type_name -> sensory.api.v1.file.FileInfo
	9,  // 6: sensory.api.v1.file.FileCatalog.category:type_name -> sensory.api.v1.file.VersionedFileCategory
	0,  // 7: sensory.api.v1.file.VersionedFileCategory.category:type_name -> sensory.api.v1.file.FileCategory
	1,  // 8: sensory.api.v1.file.File.GetInfo:input_type -> sensory.api.v1.file.FileRequest
	3,  // 9: sensory.api.v1.file.File.GetCatalog:input_type -> sensory.api.v1.file.FileCatalogRequest
	4,  // 10: sensory.api.v1.file.File.GetCompleteCatalog:input_type -> sensory.api.v1.file.FileCompleteCatalogRequest
	1,  // 11: sensory.api.v1.file.File.Download:input_type -> sensory.api.v1.file.FileRequest
	7,  // 12: sensory.api.v1.file.File.GetInfo:output_type -> sensory.api.v1.file.FileInfo
	5,  // 13: sensory.api.v1.file.File.GetCatalog:output_type -> sensory.api.v1.file.FileCatalogResponse
	5,  // 14: sensory.api.v1.file.File.GetCompleteCatalog:output_type -> sensory.api.v1.file.FileCatalogResponse
	2,  // 15: sensory.api.v1.file.File.Download:output_type -> sensory.api.v1.file.FileResponse
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_v1_file_file_proto_init() }
func file_v1_file_file_proto_init() {
	if File_v1_file_file_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_file_file_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_file_file_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_file_file_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileCatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_file_file_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileCompleteCatalogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_file_file_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileCatalogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_file_file_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_file_file_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_file_file_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileCatalog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_file_file_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionedFileCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_file_file_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*FileResponse_Info)(nil),
		(*FileResponse_Chunk)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_file_file_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_file_file_proto_goTypes,
		DependencyIndexes: file_v1_file_file_proto_depIdxs,
		EnumInfos:         file_v1_file_file_proto_enumTypes,
		MessageInfos:      file_v1_file_file_proto_msgTypes,
	}.Build()
	File_v1_file_file_proto = out.File
	file_v1_file_file_proto_rawDesc = nil
	file_v1_file_file_proto_goTypes = nil
	file_v1_file_file_proto_depIdxs = nil
}
