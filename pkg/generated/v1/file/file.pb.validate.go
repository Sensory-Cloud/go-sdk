// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/file/file.proto

package file

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _file_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on FileRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FileRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetFile()); l < 1 || l > 2047 {
		return FileRequestValidationError{
			field:  "File",
			reason: "value length must be between 1 and 2047 runes, inclusive",
		}
	}

	if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileRequestValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Offset

	return nil
}

// FileRequestValidationError is the validation error returned by
// FileRequest.Validate if the designated constraints aren't met.
type FileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileRequestValidationError) ErrorName() string { return "FileRequestValidationError" }

// Error satisfies the builtin error interface
func (e FileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileRequestValidationError{}

// Validate checks the field values on FileResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FileResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Complete

	switch m.StreamingResponse.(type) {

	case *FileResponse_Info:

		if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FileResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *FileResponse_Chunk:

		if v, ok := interface{}(m.GetChunk()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FileResponseValidationError{
					field:  "Chunk",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// FileResponseValidationError is the validation error returned by
// FileResponse.Validate if the designated constraints aren't met.
type FileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileResponseValidationError) ErrorName() string { return "FileResponseValidationError" }

// Error satisfies the builtin error interface
func (e FileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileResponseValidationError{}

// Validate checks the field values on FileCatalogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FileCatalogRequest) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetCategories()) < 1 {
		return FileCatalogRequestValidationError{
			field:  "Categories",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetCategories() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FileCatalogRequestValidationError{
					field:  fmt.Sprintf("Categories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// FileCatalogRequestValidationError is the validation error returned by
// FileCatalogRequest.Validate if the designated constraints aren't met.
type FileCatalogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileCatalogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileCatalogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileCatalogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileCatalogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileCatalogRequestValidationError) ErrorName() string {
	return "FileCatalogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FileCatalogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileCatalogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileCatalogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileCatalogRequestValidationError{}

// Validate checks the field values on FileCompleteCatalogRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FileCompleteCatalogRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TenantId

	return nil
}

// FileCompleteCatalogRequestValidationError is the validation error returned
// by FileCompleteCatalogRequest.Validate if the designated constraints aren't met.
type FileCompleteCatalogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileCompleteCatalogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileCompleteCatalogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileCompleteCatalogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileCompleteCatalogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileCompleteCatalogRequestValidationError) ErrorName() string {
	return "FileCompleteCatalogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FileCompleteCatalogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileCompleteCatalogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileCompleteCatalogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileCompleteCatalogRequestValidationError{}

// Validate checks the field values on FileCatalogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FileCatalogResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetCatalog() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FileCatalogResponseValidationError{
					field:  fmt.Sprintf("Catalog[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// FileCatalogResponseValidationError is the validation error returned by
// FileCatalogResponse.Validate if the designated constraints aren't met.
type FileCatalogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileCatalogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileCatalogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileCatalogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileCatalogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileCatalogResponseValidationError) ErrorName() string {
	return "FileCatalogResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FileCatalogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileCatalogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileCatalogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileCatalogResponseValidationError{}

// Validate checks the field values on FileChunk with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FileChunk) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Bytes

	// no validation rules for Offset

	return nil
}

// FileChunkValidationError is the validation error returned by
// FileChunk.Validate if the designated constraints aren't met.
type FileChunkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileChunkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileChunkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileChunkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileChunkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileChunkValidationError) ErrorName() string { return "FileChunkValidationError" }

// Error satisfies the builtin error interface
func (e FileChunkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileChunk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileChunkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileChunkValidationError{}

// Validate checks the field values on FileInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FileInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for File

	// no validation rules for AbsolutePath

	// no validation rules for Size

	// no validation rules for ContentType

	// no validation rules for Hash

	// no validation rules for TenantId

	return nil
}

// FileInfoValidationError is the validation error returned by
// FileInfo.Validate if the designated constraints aren't met.
type FileInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileInfoValidationError) ErrorName() string { return "FileInfoValidationError" }

// Error satisfies the builtin error interface
func (e FileInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileInfoValidationError{}

// Validate checks the field values on FileCatalog with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FileCatalog) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetFiles() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FileCatalogValidationError{
					field:  fmt.Sprintf("Files[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileCatalogValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FileCatalogValidationError is the validation error returned by
// FileCatalog.Validate if the designated constraints aren't met.
type FileCatalogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileCatalogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileCatalogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileCatalogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileCatalogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileCatalogValidationError) ErrorName() string { return "FileCatalogValidationError" }

// Error satisfies the builtin error interface
func (e FileCatalogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileCatalog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileCatalogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileCatalogValidationError{}

// Validate checks the field values on VersionedFileCategory with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VersionedFileCategory) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := FileCategory_name[int32(m.GetCategory())]; !ok {
		return VersionedFileCategoryValidationError{
			field:  "Category",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for Version

	return nil
}

// VersionedFileCategoryValidationError is the validation error returned by
// VersionedFileCategory.Validate if the designated constraints aren't met.
type VersionedFileCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionedFileCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionedFileCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionedFileCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionedFileCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionedFileCategoryValidationError) ErrorName() string {
	return "VersionedFileCategoryValidationError"
}

// Error satisfies the builtin error interface
func (e VersionedFileCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersionedFileCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionedFileCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionedFileCategoryValidationError{}
