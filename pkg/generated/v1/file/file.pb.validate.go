// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/file/file.proto

package file

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FileRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileRequestMultiError, or
// nil if none found.
func (m *FileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetFile()); l < 1 || l > 2047 {
		err := FileRequestValidationError{
			field:  "File",
			reason: "value length must be between 1 and 2047 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileRequestValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileRequestValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileRequestValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Offset

	if len(errors) > 0 {
		return FileRequestMultiError(errors)
	}

	return nil
}

// FileRequestMultiError is an error wrapping multiple validation errors
// returned by FileRequest.ValidateAll() if the designated constraints aren't met.
type FileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileRequestMultiError) AllErrors() []error { return m }

// FileRequestValidationError is the validation error returned by
// FileRequest.Validate if the designated constraints aren't met.
type FileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileRequestValidationError) ErrorName() string { return "FileRequestValidationError" }

// Error satisfies the builtin error interface
func (e FileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileRequestValidationError{}

// Validate checks the field values on FileResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileResponseMultiError, or
// nil if none found.
func (m *FileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Complete

	switch v := m.StreamingResponse.(type) {
	case *FileResponse_Info:
		if v == nil {
			err := FileResponseValidationError{
				field:  "StreamingResponse",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetInfo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FileResponseValidationError{
						field:  "Info",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FileResponseValidationError{
						field:  "Info",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FileResponseValidationError{
					field:  "Info",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *FileResponse_Chunk:
		if v == nil {
			err := FileResponseValidationError{
				field:  "StreamingResponse",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetChunk()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FileResponseValidationError{
						field:  "Chunk",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FileResponseValidationError{
						field:  "Chunk",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChunk()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FileResponseValidationError{
					field:  "Chunk",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return FileResponseMultiError(errors)
	}

	return nil
}

// FileResponseMultiError is an error wrapping multiple validation errors
// returned by FileResponse.ValidateAll() if the designated constraints aren't met.
type FileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileResponseMultiError) AllErrors() []error { return m }

// FileResponseValidationError is the validation error returned by
// FileResponse.Validate if the designated constraints aren't met.
type FileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileResponseValidationError) ErrorName() string { return "FileResponseValidationError" }

// Error satisfies the builtin error interface
func (e FileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileResponseValidationError{}

// Validate checks the field values on FileCatalogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileCatalogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileCatalogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileCatalogRequestMultiError, or nil if none found.
func (m *FileCatalogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FileCatalogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetCategories()) < 1 {
		err := FileCatalogRequestValidationError{
			field:  "Categories",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetCategories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FileCatalogRequestValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FileCatalogRequestValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FileCatalogRequestValidationError{
					field:  fmt.Sprintf("Categories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FileCatalogRequestMultiError(errors)
	}

	return nil
}

// FileCatalogRequestMultiError is an error wrapping multiple validation errors
// returned by FileCatalogRequest.ValidateAll() if the designated constraints
// aren't met.
type FileCatalogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileCatalogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileCatalogRequestMultiError) AllErrors() []error { return m }

// FileCatalogRequestValidationError is the validation error returned by
// FileCatalogRequest.Validate if the designated constraints aren't met.
type FileCatalogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileCatalogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileCatalogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileCatalogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileCatalogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileCatalogRequestValidationError) ErrorName() string {
	return "FileCatalogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FileCatalogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileCatalogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileCatalogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileCatalogRequestValidationError{}

// Validate checks the field values on FileCompleteCatalogRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileCompleteCatalogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileCompleteCatalogRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileCompleteCatalogRequestMultiError, or nil if none found.
func (m *FileCompleteCatalogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FileCompleteCatalogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	if len(errors) > 0 {
		return FileCompleteCatalogRequestMultiError(errors)
	}

	return nil
}

// FileCompleteCatalogRequestMultiError is an error wrapping multiple
// validation errors returned by FileCompleteCatalogRequest.ValidateAll() if
// the designated constraints aren't met.
type FileCompleteCatalogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileCompleteCatalogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileCompleteCatalogRequestMultiError) AllErrors() []error { return m }

// FileCompleteCatalogRequestValidationError is the validation error returned
// by FileCompleteCatalogRequest.Validate if the designated constraints aren't met.
type FileCompleteCatalogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileCompleteCatalogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileCompleteCatalogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileCompleteCatalogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileCompleteCatalogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileCompleteCatalogRequestValidationError) ErrorName() string {
	return "FileCompleteCatalogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FileCompleteCatalogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileCompleteCatalogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileCompleteCatalogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileCompleteCatalogRequestValidationError{}

// Validate checks the field values on FileCatalogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FileCatalogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileCatalogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileCatalogResponseMultiError, or nil if none found.
func (m *FileCatalogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FileCatalogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCatalog() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FileCatalogResponseValidationError{
						field:  fmt.Sprintf("Catalog[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FileCatalogResponseValidationError{
						field:  fmt.Sprintf("Catalog[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FileCatalogResponseValidationError{
					field:  fmt.Sprintf("Catalog[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FileCatalogResponseMultiError(errors)
	}

	return nil
}

// FileCatalogResponseMultiError is an error wrapping multiple validation
// errors returned by FileCatalogResponse.ValidateAll() if the designated
// constraints aren't met.
type FileCatalogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileCatalogResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileCatalogResponseMultiError) AllErrors() []error { return m }

// FileCatalogResponseValidationError is the validation error returned by
// FileCatalogResponse.Validate if the designated constraints aren't met.
type FileCatalogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileCatalogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileCatalogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileCatalogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileCatalogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileCatalogResponseValidationError) ErrorName() string {
	return "FileCatalogResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FileCatalogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileCatalogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileCatalogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileCatalogResponseValidationError{}

// Validate checks the field values on FileChunk with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileChunk) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileChunk with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileChunkMultiError, or nil
// if none found.
func (m *FileChunk) ValidateAll() error {
	return m.validate(true)
}

func (m *FileChunk) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Bytes

	// no validation rules for Offset

	if len(errors) > 0 {
		return FileChunkMultiError(errors)
	}

	return nil
}

// FileChunkMultiError is an error wrapping multiple validation errors returned
// by FileChunk.ValidateAll() if the designated constraints aren't met.
type FileChunkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileChunkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileChunkMultiError) AllErrors() []error { return m }

// FileChunkValidationError is the validation error returned by
// FileChunk.Validate if the designated constraints aren't met.
type FileChunkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileChunkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileChunkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileChunkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileChunkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileChunkValidationError) ErrorName() string { return "FileChunkValidationError" }

// Error satisfies the builtin error interface
func (e FileChunkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileChunk.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileChunkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileChunkValidationError{}

// Validate checks the field values on FileInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileInfoMultiError, or nil
// if none found.
func (m *FileInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *FileInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for File

	// no validation rules for AbsolutePath

	// no validation rules for Size

	// no validation rules for ContentType

	// no validation rules for Hash

	// no validation rules for TenantId

	if len(errors) > 0 {
		return FileInfoMultiError(errors)
	}

	return nil
}

// FileInfoMultiError is an error wrapping multiple validation errors returned
// by FileInfo.ValidateAll() if the designated constraints aren't met.
type FileInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileInfoMultiError) AllErrors() []error { return m }

// FileInfoValidationError is the validation error returned by
// FileInfo.Validate if the designated constraints aren't met.
type FileInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileInfoValidationError) ErrorName() string { return "FileInfoValidationError" }

// Error satisfies the builtin error interface
func (e FileInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileInfoValidationError{}

// Validate checks the field values on FileCatalog with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileCatalog) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileCatalog with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileCatalogMultiError, or
// nil if none found.
func (m *FileCatalog) ValidateAll() error {
	return m.validate(true)
}

func (m *FileCatalog) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FileCatalogValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FileCatalogValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FileCatalogValidationError{
					field:  fmt.Sprintf("Files[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileCatalogValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileCatalogValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileCatalogValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FileCatalogMultiError(errors)
	}

	return nil
}

// FileCatalogMultiError is an error wrapping multiple validation errors
// returned by FileCatalog.ValidateAll() if the designated constraints aren't met.
type FileCatalogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileCatalogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileCatalogMultiError) AllErrors() []error { return m }

// FileCatalogValidationError is the validation error returned by
// FileCatalog.Validate if the designated constraints aren't met.
type FileCatalogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileCatalogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileCatalogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileCatalogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileCatalogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileCatalogValidationError) ErrorName() string { return "FileCatalogValidationError" }

// Error satisfies the builtin error interface
func (e FileCatalogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileCatalog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileCatalogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileCatalogValidationError{}

// Validate checks the field values on VersionedFileCategory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VersionedFileCategory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VersionedFileCategory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VersionedFileCategoryMultiError, or nil if none found.
func (m *VersionedFileCategory) ValidateAll() error {
	return m.validate(true)
}

func (m *VersionedFileCategory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := FileCategory_name[int32(m.GetCategory())]; !ok {
		err := VersionedFileCategoryValidationError{
			field:  "Category",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Version

	if len(errors) > 0 {
		return VersionedFileCategoryMultiError(errors)
	}

	return nil
}

// VersionedFileCategoryMultiError is an error wrapping multiple validation
// errors returned by VersionedFileCategory.ValidateAll() if the designated
// constraints aren't met.
type VersionedFileCategoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VersionedFileCategoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VersionedFileCategoryMultiError) AllErrors() []error { return m }

// VersionedFileCategoryValidationError is the validation error returned by
// VersionedFileCategory.Validate if the designated constraints aren't met.
type VersionedFileCategoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionedFileCategoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionedFileCategoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionedFileCategoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionedFileCategoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionedFileCategoryValidationError) ErrorName() string {
	return "VersionedFileCategoryValidationError"
}

// Error satisfies the builtin error interface
func (e VersionedFileCategoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersionedFileCategory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionedFileCategoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionedFileCategoryValidationError{}
