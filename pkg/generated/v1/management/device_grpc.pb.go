// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package management

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceServiceClient is the client API for DeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceServiceClient interface {
	// Create a new device in the database
	EnrollDevice(ctx context.Context, in *EnrollDeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error)
	// Renew a device's credential, which links the device to a key in the database.
	// This endpoint can be used to assign a new credential to a device if the old credential has expired.
	RenewDeviceCredential(ctx context.Context, in *RenewDeviceCredentialRequest, opts ...grpc.CallOption) (*DeviceResponse, error)
	// Allows a device to fetch information about itself
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	GetWhoAmI(ctx context.Context, in *DeviceGetWhoAmIRequest, opts ...grpc.CallOption) (*DeviceResponse, error)
	// Returns a list of devices associated with the given userId
	GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (*DeviceListResponse, error)
	// Allows the name of a device to be updated
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error)
	// Allows a device to be deleted
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error)
}

type deviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceServiceClient(cc grpc.ClientConnInterface) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) EnrollDevice(ctx context.Context, in *EnrollDeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error) {
	out := new(DeviceResponse)
	err := c.cc.Invoke(ctx, "/sensory.api.v1.management.DeviceService/EnrollDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) RenewDeviceCredential(ctx context.Context, in *RenewDeviceCredentialRequest, opts ...grpc.CallOption) (*DeviceResponse, error) {
	out := new(DeviceResponse)
	err := c.cc.Invoke(ctx, "/sensory.api.v1.management.DeviceService/RenewDeviceCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetWhoAmI(ctx context.Context, in *DeviceGetWhoAmIRequest, opts ...grpc.CallOption) (*DeviceResponse, error) {
	out := new(DeviceResponse)
	err := c.cc.Invoke(ctx, "/sensory.api.v1.management.DeviceService/GetWhoAmI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetDevices(ctx context.Context, in *GetDevicesRequest, opts ...grpc.CallOption) (*DeviceListResponse, error) {
	out := new(DeviceListResponse)
	err := c.cc.Invoke(ctx, "/sensory.api.v1.management.DeviceService/GetDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error) {
	out := new(DeviceResponse)
	err := c.cc.Invoke(ctx, "/sensory.api.v1.management.DeviceService/UpdateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeviceResponse, error) {
	out := new(DeviceResponse)
	err := c.cc.Invoke(ctx, "/sensory.api.v1.management.DeviceService/DeleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServiceServer is the server API for DeviceService service.
// All implementations must embed UnimplementedDeviceServiceServer
// for forward compatibility
type DeviceServiceServer interface {
	// Create a new device in the database
	EnrollDevice(context.Context, *EnrollDeviceRequest) (*DeviceResponse, error)
	// Renew a device's credential, which links the device to a key in the database.
	// This endpoint can be used to assign a new credential to a device if the old credential has expired.
	RenewDeviceCredential(context.Context, *RenewDeviceCredentialRequest) (*DeviceResponse, error)
	// Allows a device to fetch information about itself
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	GetWhoAmI(context.Context, *DeviceGetWhoAmIRequest) (*DeviceResponse, error)
	// Returns a list of devices associated with the given userId
	GetDevices(context.Context, *GetDevicesRequest) (*DeviceListResponse, error)
	// Allows the name of a device to be updated
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*DeviceResponse, error)
	// Allows a device to be deleted
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*DeviceResponse, error)
	mustEmbedUnimplementedDeviceServiceServer()
}

// UnimplementedDeviceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceServiceServer struct {
}

func (UnimplementedDeviceServiceServer) EnrollDevice(context.Context, *EnrollDeviceRequest) (*DeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnrollDevice not implemented")
}
func (UnimplementedDeviceServiceServer) RenewDeviceCredential(context.Context, *RenewDeviceCredentialRequest) (*DeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewDeviceCredential not implemented")
}
func (UnimplementedDeviceServiceServer) GetWhoAmI(context.Context, *DeviceGetWhoAmIRequest) (*DeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWhoAmI not implemented")
}
func (UnimplementedDeviceServiceServer) GetDevices(context.Context, *GetDevicesRequest) (*DeviceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevices not implemented")
}
func (UnimplementedDeviceServiceServer) UpdateDevice(context.Context, *UpdateDeviceRequest) (*DeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedDeviceServiceServer) DeleteDevice(context.Context, *DeleteDeviceRequest) (*DeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedDeviceServiceServer) mustEmbedUnimplementedDeviceServiceServer() {}

// UnsafeDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceServiceServer will
// result in compilation errors.
type UnsafeDeviceServiceServer interface {
	mustEmbedUnimplementedDeviceServiceServer()
}

func RegisterDeviceServiceServer(s grpc.ServiceRegistrar, srv DeviceServiceServer) {
	s.RegisterService(&DeviceService_ServiceDesc, srv)
}

func _DeviceService_EnrollDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnrollDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).EnrollDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensory.api.v1.management.DeviceService/EnrollDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).EnrollDevice(ctx, req.(*EnrollDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_RenewDeviceCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewDeviceCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).RenewDeviceCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensory.api.v1.management.DeviceService/RenewDeviceCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).RenewDeviceCredential(ctx, req.(*RenewDeviceCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetWhoAmI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceGetWhoAmIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetWhoAmI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensory.api.v1.management.DeviceService/GetWhoAmI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetWhoAmI(ctx, req.(*DeviceGetWhoAmIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensory.api.v1.management.DeviceService/GetDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDevices(ctx, req.(*GetDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensory.api.v1.management.DeviceService/UpdateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensory.api.v1.management.DeviceService/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceService_ServiceDesc is the grpc.ServiceDesc for DeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sensory.api.v1.management.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnrollDevice",
			Handler:    _DeviceService_EnrollDevice_Handler,
		},
		{
			MethodName: "RenewDeviceCredential",
			Handler:    _DeviceService_RenewDeviceCredential_Handler,
		},
		{
			MethodName: "GetWhoAmI",
			Handler:    _DeviceService_GetWhoAmI_Handler,
		},
		{
			MethodName: "GetDevices",
			Handler:    _DeviceService_GetDevices_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _DeviceService_UpdateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _DeviceService_DeleteDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/management/device.proto",
}
