// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/management/device.proto

package management

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _device_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on EnrollDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EnrollDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnrollDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnrollDeviceRequestMultiError, or nil if none found.
func (m *EnrollDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnrollDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 127 {
		err := EnrollDeviceRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 127 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDeviceId()); l < 1 || l > 127 {
		err := EnrollDeviceRequestValidationError{
			field:  "DeviceId",
			reason: "value length must be between 1 and 127 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetTenantId()); err != nil {
		err = EnrollDeviceRequestValidationError{
			field:  "TenantId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetClient() == nil {
		err := EnrollDeviceRequestValidationError{
			field:  "Client",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetClient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EnrollDeviceRequestValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EnrollDeviceRequestValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EnrollDeviceRequestValidationError{
				field:  "Client",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Credential

	if len(errors) > 0 {
		return EnrollDeviceRequestMultiError(errors)
	}

	return nil
}

func (m *EnrollDeviceRequest) _validateUuid(uuid string) error {
	if matched := _device_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// EnrollDeviceRequestMultiError is an error wrapping multiple validation
// errors returned by EnrollDeviceRequest.ValidateAll() if the designated
// constraints aren't met.
type EnrollDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnrollDeviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnrollDeviceRequestMultiError) AllErrors() []error { return m }

// EnrollDeviceRequestValidationError is the validation error returned by
// EnrollDeviceRequest.Validate if the designated constraints aren't met.
type EnrollDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnrollDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnrollDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnrollDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnrollDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnrollDeviceRequestValidationError) ErrorName() string {
	return "EnrollDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EnrollDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnrollDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnrollDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnrollDeviceRequestValidationError{}

// Validate checks the field values on RenewDeviceCredentialRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenewDeviceCredentialRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenewDeviceCredentialRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenewDeviceCredentialRequestMultiError, or nil if none found.
func (m *RenewDeviceCredentialRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenewDeviceCredentialRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetDeviceId()); l < 1 || l > 127 {
		err := RenewDeviceCredentialRequestValidationError{
			field:  "DeviceId",
			reason: "value length must be between 1 and 127 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetClientId()); err != nil {
		err = RenewDeviceCredentialRequestValidationError{
			field:  "ClientId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetTenantId()); err != nil {
		err = RenewDeviceCredentialRequestValidationError{
			field:  "TenantId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCredential()); l < 1 || l > 255 {
		err := RenewDeviceCredentialRequestValidationError{
			field:  "Credential",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RenewDeviceCredentialRequestMultiError(errors)
	}

	return nil
}

func (m *RenewDeviceCredentialRequest) _validateUuid(uuid string) error {
	if matched := _device_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RenewDeviceCredentialRequestMultiError is an error wrapping multiple
// validation errors returned by RenewDeviceCredentialRequest.ValidateAll() if
// the designated constraints aren't met.
type RenewDeviceCredentialRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenewDeviceCredentialRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenewDeviceCredentialRequestMultiError) AllErrors() []error { return m }

// RenewDeviceCredentialRequestValidationError is the validation error returned
// by RenewDeviceCredentialRequest.Validate if the designated constraints
// aren't met.
type RenewDeviceCredentialRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenewDeviceCredentialRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenewDeviceCredentialRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenewDeviceCredentialRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenewDeviceCredentialRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenewDeviceCredentialRequestValidationError) ErrorName() string {
	return "RenewDeviceCredentialRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenewDeviceCredentialRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenewDeviceCredentialRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenewDeviceCredentialRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenewDeviceCredentialRequestValidationError{}

// Validate checks the field values on DeviceGetWhoAmIRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeviceGetWhoAmIRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceGetWhoAmIRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceGetWhoAmIRequestMultiError, or nil if none found.
func (m *DeviceGetWhoAmIRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceGetWhoAmIRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeviceGetWhoAmIRequestMultiError(errors)
	}

	return nil
}

// DeviceGetWhoAmIRequestMultiError is an error wrapping multiple validation
// errors returned by DeviceGetWhoAmIRequest.ValidateAll() if the designated
// constraints aren't met.
type DeviceGetWhoAmIRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceGetWhoAmIRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceGetWhoAmIRequestMultiError) AllErrors() []error { return m }

// DeviceGetWhoAmIRequestValidationError is the validation error returned by
// DeviceGetWhoAmIRequest.Validate if the designated constraints aren't met.
type DeviceGetWhoAmIRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceGetWhoAmIRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceGetWhoAmIRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceGetWhoAmIRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceGetWhoAmIRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceGetWhoAmIRequestValidationError) ErrorName() string {
	return "DeviceGetWhoAmIRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceGetWhoAmIRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceGetWhoAmIRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceGetWhoAmIRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceGetWhoAmIRequestValidationError{}

// Validate checks the field values on DeviceRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceRequestMultiError, or
// nil if none found.
func (m *DeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetDeviceId()); l < 1 || l > 127 {
		err := DeviceRequestValidationError{
			field:  "DeviceId",
			reason: "value length must be between 1 and 127 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeviceRequestMultiError(errors)
	}

	return nil
}

// DeviceRequestMultiError is an error wrapping multiple validation errors
// returned by DeviceRequest.ValidateAll() if the designated constraints
// aren't met.
type DeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceRequestMultiError) AllErrors() []error { return m }

// DeviceRequestValidationError is the validation error returned by
// DeviceRequest.Validate if the designated constraints aren't met.
type DeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceRequestValidationError) ErrorName() string { return "DeviceRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceRequestValidationError{}

// Validate checks the field values on GetDevicesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDevicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDevicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDevicesRequestMultiError, or nil if none found.
func (m *GetDevicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDevicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TenantId

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDevicesRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDevicesRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDevicesRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetUserId()) > 127 {
		err := GetDevicesRequestValidationError{
			field:  "UserId",
			reason: "value length must be at most 127 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDevicesRequestMultiError(errors)
	}

	return nil
}

// GetDevicesRequestMultiError is an error wrapping multiple validation errors
// returned by GetDevicesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDevicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDevicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDevicesRequestMultiError) AllErrors() []error { return m }

// GetDevicesRequestValidationError is the validation error returned by
// GetDevicesRequest.Validate if the designated constraints aren't met.
type GetDevicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDevicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDevicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDevicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDevicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDevicesRequestValidationError) ErrorName() string {
	return "GetDevicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDevicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDevicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDevicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDevicesRequestValidationError{}

// Validate checks the field values on UpdateDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDeviceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDeviceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDeviceRequestMultiError, or nil if none found.
func (m *UpdateDeviceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDeviceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetDeviceId()); l < 1 || l > 127 {
		err := UpdateDeviceRequestValidationError{
			field:  "DeviceId",
			reason: "value length must be between 1 and 127 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 127 {
		err := UpdateDeviceRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 127 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateDeviceRequestMultiError(errors)
	}

	return nil
}

// UpdateDeviceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDeviceRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDeviceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDeviceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDeviceRequestMultiError) AllErrors() []error { return m }

// UpdateDeviceRequestValidationError is the validation error returned by
// UpdateDeviceRequest.Validate if the designated constraints aren't met.
type UpdateDeviceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDeviceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDeviceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDeviceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDeviceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDeviceRequestValidationError) ErrorName() string {
	return "UpdateDeviceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDeviceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDeviceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDeviceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDeviceRequestValidationError{}

// Validate checks the field values on DeviceResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeviceResponseMultiError,
// or nil if none found.
func (m *DeviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for DeviceId

	if len(errors) > 0 {
		return DeviceResponseMultiError(errors)
	}

	return nil
}

// DeviceResponseMultiError is an error wrapping multiple validation errors
// returned by DeviceResponse.ValidateAll() if the designated constraints
// aren't met.
type DeviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceResponseMultiError) AllErrors() []error { return m }

// DeviceResponseValidationError is the validation error returned by
// DeviceResponse.Validate if the designated constraints aren't met.
type DeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceResponseValidationError) ErrorName() string { return "DeviceResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceResponseValidationError{}

// Validate checks the field values on GetDeviceResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDeviceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDeviceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDeviceResponseMultiError, or nil if none found.
func (m *GetDeviceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDeviceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for DeviceId

	// no validation rules for UserCount

	if len(errors) > 0 {
		return GetDeviceResponseMultiError(errors)
	}

	return nil
}

// GetDeviceResponseMultiError is an error wrapping multiple validation errors
// returned by GetDeviceResponse.ValidateAll() if the designated constraints
// aren't met.
type GetDeviceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDeviceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDeviceResponseMultiError) AllErrors() []error { return m }

// GetDeviceResponseValidationError is the validation error returned by
// GetDeviceResponse.Validate if the designated constraints aren't met.
type GetDeviceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeviceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeviceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeviceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeviceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeviceResponseValidationError) ErrorName() string {
	return "GetDeviceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeviceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeviceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeviceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeviceResponseValidationError{}

// Validate checks the field values on DeviceListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeviceListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeviceListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeviceListResponseMultiError, or nil if none found.
func (m *DeviceListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeviceListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDevices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeviceListResponseValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeviceListResponseValidationError{
						field:  fmt.Sprintf("Devices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeviceListResponseValidationError{
					field:  fmt.Sprintf("Devices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeviceListResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeviceListResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeviceListResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeviceListResponseMultiError(errors)
	}

	return nil
}

// DeviceListResponseMultiError is an error wrapping multiple validation errors
// returned by DeviceListResponse.ValidateAll() if the designated constraints
// aren't met.
type DeviceListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeviceListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeviceListResponseMultiError) AllErrors() []error { return m }

// DeviceListResponseValidationError is the validation error returned by
// DeviceListResponse.Validate if the designated constraints aren't met.
type DeviceListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeviceListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeviceListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeviceListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeviceListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeviceListResponseValidationError) ErrorName() string {
	return "DeviceListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeviceListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeviceListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeviceListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeviceListResponseValidationError{}
