// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/event/event.proto

package event

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"

	common "gitlab.com/sensory-cloud/server/titan.git/pkg/api/common"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}

	_ = common.UsageEventType(0)
)

// define the regex for a UUID once up-front
var _event_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on PublishUsageEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PublishUsageEventsRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PublishUsageEventsRequestValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// PublishUsageEventsRequestValidationError is the validation error returned by
// PublishUsageEventsRequest.Validate if the designated constraints aren't met.
type PublishUsageEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishUsageEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishUsageEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishUsageEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishUsageEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishUsageEventsRequestValidationError) ErrorName() string {
	return "PublishUsageEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublishUsageEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishUsageEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishUsageEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishUsageEventsRequestValidationError{}

// Validate checks the field values on UsageEvent with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UsageEvent) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetTimestamp() == nil {
		return UsageEventValidationError{
			field:  "Timestamp",
			reason: "value is required",
		}
	}

	if m.GetDuration() <= 0 {
		return UsageEventValidationError{
			field:  "Duration",
			reason: "value must be greater than 0",
		}
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return UsageEventValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	if l := utf8.RuneCountInString(m.GetClientId()); l < 1 || l > 127 {
		return UsageEventValidationError{
			field:  "ClientId",
			reason: "value length must be between 1 and 127 runes, inclusive",
		}
	}

	if _, ok := common.UsageEventType_name[int32(m.GetType())]; !ok {
		return UsageEventValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	if l := utf8.RuneCountInString(m.GetRoute()); l < 1 || l > 511 {
		return UsageEventValidationError{
			field:  "Route",
			reason: "value length must be between 1 and 511 runes, inclusive",
		}
	}

	return nil
}

func (m *UsageEvent) _validateUuid(uuid string) error {
	if matched := _event_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UsageEventValidationError is the validation error returned by
// UsageEvent.Validate if the designated constraints aren't met.
type UsageEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UsageEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UsageEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UsageEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UsageEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UsageEventValidationError) ErrorName() string { return "UsageEventValidationError" }

// Error satisfies the builtin error interface
func (e UsageEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUsageEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UsageEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UsageEventValidationError{}

// Validate checks the field values on PublishUsageEventsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PublishUsageEventsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// PublishUsageEventsResponseValidationError is the validation error returned
// by PublishUsageEventsResponse.Validate if the designated constraints aren't met.
type PublishUsageEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishUsageEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishUsageEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishUsageEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishUsageEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishUsageEventsResponseValidationError) ErrorName() string {
	return "PublishUsageEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublishUsageEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishUsageEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishUsageEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishUsageEventsResponseValidationError{}
