// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package management

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnrollmentServiceClient is the client API for EnrollmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnrollmentServiceClient interface {
	// Get enrollments from the database that match the specified criteria
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	GetEnrollments(ctx context.Context, in *GetEnrollmentsRequest, opts ...grpc.CallOption) (*GetEnrollmentsResponse, error)
	// Get all enrollment groups that match the specified criteria
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	GetEnrollmentGroups(ctx context.Context, in *GetEnrollmentsRequest, opts ...grpc.CallOption) (*GetEnrollmentGroupsResponse, error)
	// Creates a new enrollment group without any associated enrollments
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	CreateEnrollmentGroup(ctx context.Context, in *CreateEnrollmentGroupRequest, opts ...grpc.CallOption) (*EnrollmentGroupResponse, error)
	// Appends an enrollment to an enrollment group
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	AppendEnrollmentGroup(ctx context.Context, in *AppendEnrollmentGroupRequest, opts ...grpc.CallOption) (*EnrollmentGroupResponse, error)
	// Deletes an enrollment from the database
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	// A user may not delete their last enrollment, as this would lead to a situation where a user could
	// lock themselves out of the system forever.
	DeleteEnrollment(ctx context.Context, in *DeleteEnrollmentRequest, opts ...grpc.CallOption) (*EnrollmentResponse, error)
	// Deletes an enrollment group from the database
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	DeleteEnrollmentGroup(ctx context.Context, in *DeleteEnrollmentGroupRequest, opts ...grpc.CallOption) (*EnrollmentGroupResponse, error)
}

type enrollmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnrollmentServiceClient(cc grpc.ClientConnInterface) EnrollmentServiceClient {
	return &enrollmentServiceClient{cc}
}

func (c *enrollmentServiceClient) GetEnrollments(ctx context.Context, in *GetEnrollmentsRequest, opts ...grpc.CallOption) (*GetEnrollmentsResponse, error) {
	out := new(GetEnrollmentsResponse)
	err := c.cc.Invoke(ctx, "/sensory.api.v1.management.EnrollmentService/GetEnrollments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrollmentServiceClient) GetEnrollmentGroups(ctx context.Context, in *GetEnrollmentsRequest, opts ...grpc.CallOption) (*GetEnrollmentGroupsResponse, error) {
	out := new(GetEnrollmentGroupsResponse)
	err := c.cc.Invoke(ctx, "/sensory.api.v1.management.EnrollmentService/GetEnrollmentGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrollmentServiceClient) CreateEnrollmentGroup(ctx context.Context, in *CreateEnrollmentGroupRequest, opts ...grpc.CallOption) (*EnrollmentGroupResponse, error) {
	out := new(EnrollmentGroupResponse)
	err := c.cc.Invoke(ctx, "/sensory.api.v1.management.EnrollmentService/CreateEnrollmentGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrollmentServiceClient) AppendEnrollmentGroup(ctx context.Context, in *AppendEnrollmentGroupRequest, opts ...grpc.CallOption) (*EnrollmentGroupResponse, error) {
	out := new(EnrollmentGroupResponse)
	err := c.cc.Invoke(ctx, "/sensory.api.v1.management.EnrollmentService/AppendEnrollmentGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrollmentServiceClient) DeleteEnrollment(ctx context.Context, in *DeleteEnrollmentRequest, opts ...grpc.CallOption) (*EnrollmentResponse, error) {
	out := new(EnrollmentResponse)
	err := c.cc.Invoke(ctx, "/sensory.api.v1.management.EnrollmentService/DeleteEnrollment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enrollmentServiceClient) DeleteEnrollmentGroup(ctx context.Context, in *DeleteEnrollmentGroupRequest, opts ...grpc.CallOption) (*EnrollmentGroupResponse, error) {
	out := new(EnrollmentGroupResponse)
	err := c.cc.Invoke(ctx, "/sensory.api.v1.management.EnrollmentService/DeleteEnrollmentGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnrollmentServiceServer is the server API for EnrollmentService service.
// All implementations must embed UnimplementedEnrollmentServiceServer
// for forward compatibility
type EnrollmentServiceServer interface {
	// Get enrollments from the database that match the specified criteria
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	GetEnrollments(context.Context, *GetEnrollmentsRequest) (*GetEnrollmentsResponse, error)
	// Get all enrollment groups that match the specified criteria
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	GetEnrollmentGroups(context.Context, *GetEnrollmentsRequest) (*GetEnrollmentGroupsResponse, error)
	// Creates a new enrollment group without any associated enrollments
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	CreateEnrollmentGroup(context.Context, *CreateEnrollmentGroupRequest) (*EnrollmentGroupResponse, error)
	// Appends an enrollment to an enrollment group
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	AppendEnrollmentGroup(context.Context, *AppendEnrollmentGroupRequest) (*EnrollmentGroupResponse, error)
	// Deletes an enrollment from the database
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	// A user may not delete their last enrollment, as this would lead to a situation where a user could
	// lock themselves out of the system forever.
	DeleteEnrollment(context.Context, *DeleteEnrollmentRequest) (*EnrollmentResponse, error)
	// Deletes an enrollment group from the database
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	DeleteEnrollmentGroup(context.Context, *DeleteEnrollmentGroupRequest) (*EnrollmentGroupResponse, error)
	mustEmbedUnimplementedEnrollmentServiceServer()
}

// UnimplementedEnrollmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnrollmentServiceServer struct {
}

func (UnimplementedEnrollmentServiceServer) GetEnrollments(context.Context, *GetEnrollmentsRequest) (*GetEnrollmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnrollments not implemented")
}
func (UnimplementedEnrollmentServiceServer) GetEnrollmentGroups(context.Context, *GetEnrollmentsRequest) (*GetEnrollmentGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnrollmentGroups not implemented")
}
func (UnimplementedEnrollmentServiceServer) CreateEnrollmentGroup(context.Context, *CreateEnrollmentGroupRequest) (*EnrollmentGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnrollmentGroup not implemented")
}
func (UnimplementedEnrollmentServiceServer) AppendEnrollmentGroup(context.Context, *AppendEnrollmentGroupRequest) (*EnrollmentGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEnrollmentGroup not implemented")
}
func (UnimplementedEnrollmentServiceServer) DeleteEnrollment(context.Context, *DeleteEnrollmentRequest) (*EnrollmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnrollment not implemented")
}
func (UnimplementedEnrollmentServiceServer) DeleteEnrollmentGroup(context.Context, *DeleteEnrollmentGroupRequest) (*EnrollmentGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnrollmentGroup not implemented")
}
func (UnimplementedEnrollmentServiceServer) mustEmbedUnimplementedEnrollmentServiceServer() {}

// UnsafeEnrollmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnrollmentServiceServer will
// result in compilation errors.
type UnsafeEnrollmentServiceServer interface {
	mustEmbedUnimplementedEnrollmentServiceServer()
}

func RegisterEnrollmentServiceServer(s grpc.ServiceRegistrar, srv EnrollmentServiceServer) {
	s.RegisterService(&EnrollmentService_ServiceDesc, srv)
}

func _EnrollmentService_GetEnrollments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnrollmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrollmentServiceServer).GetEnrollments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensory.api.v1.management.EnrollmentService/GetEnrollments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrollmentServiceServer).GetEnrollments(ctx, req.(*GetEnrollmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrollmentService_GetEnrollmentGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnrollmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrollmentServiceServer).GetEnrollmentGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensory.api.v1.management.EnrollmentService/GetEnrollmentGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrollmentServiceServer).GetEnrollmentGroups(ctx, req.(*GetEnrollmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrollmentService_CreateEnrollmentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnrollmentGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrollmentServiceServer).CreateEnrollmentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensory.api.v1.management.EnrollmentService/CreateEnrollmentGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrollmentServiceServer).CreateEnrollmentGroup(ctx, req.(*CreateEnrollmentGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrollmentService_AppendEnrollmentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEnrollmentGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrollmentServiceServer).AppendEnrollmentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensory.api.v1.management.EnrollmentService/AppendEnrollmentGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrollmentServiceServer).AppendEnrollmentGroup(ctx, req.(*AppendEnrollmentGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrollmentService_DeleteEnrollment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnrollmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrollmentServiceServer).DeleteEnrollment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensory.api.v1.management.EnrollmentService/DeleteEnrollment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrollmentServiceServer).DeleteEnrollment(ctx, req.(*DeleteEnrollmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnrollmentService_DeleteEnrollmentGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnrollmentGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnrollmentServiceServer).DeleteEnrollmentGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensory.api.v1.management.EnrollmentService/DeleteEnrollmentGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnrollmentServiceServer).DeleteEnrollmentGroup(ctx, req.(*DeleteEnrollmentGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnrollmentService_ServiceDesc is the grpc.ServiceDesc for EnrollmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnrollmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sensory.api.v1.management.EnrollmentService",
	HandlerType: (*EnrollmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEnrollments",
			Handler:    _EnrollmentService_GetEnrollments_Handler,
		},
		{
			MethodName: "GetEnrollmentGroups",
			Handler:    _EnrollmentService_GetEnrollmentGroups_Handler,
		},
		{
			MethodName: "CreateEnrollmentGroup",
			Handler:    _EnrollmentService_CreateEnrollmentGroup_Handler,
		},
		{
			MethodName: "AppendEnrollmentGroup",
			Handler:    _EnrollmentService_AppendEnrollmentGroup_Handler,
		},
		{
			MethodName: "DeleteEnrollment",
			Handler:    _EnrollmentService_DeleteEnrollment_Handler,
		},
		{
			MethodName: "DeleteEnrollmentGroup",
			Handler:    _EnrollmentService_DeleteEnrollmentGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/management/enrollment.proto",
}
