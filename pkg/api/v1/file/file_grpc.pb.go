// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package file

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileClient is the client API for File service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileClient interface {
	// Allows a client to request information about a file in the cloud.
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	GetInfo(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileInfo, error)
	// Allows a client to request a list of all the files it is allowed to access
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	GetCatalog(ctx context.Context, in *FileCatalogRequest, opts ...grpc.CallOption) (*FileCatalogResponse, error)
	// Allows a root client to request the full list of files
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	GetCompleteCatalog(ctx context.Context, in *FileCompleteCatalogRequest, opts ...grpc.CallOption) (*FileCatalogResponse, error)
	// Allows a client to request a file from the cloud.
	// Download streams a FileResponse until the entire file is downloaded
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	Download(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (File_DownloadClient, error)
}

type fileClient struct {
	cc grpc.ClientConnInterface
}

func NewFileClient(cc grpc.ClientConnInterface) FileClient {
	return &fileClient{cc}
}

func (c *fileClient) GetInfo(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileInfo, error) {
	out := new(FileInfo)
	err := c.cc.Invoke(ctx, "/sensory.api.v1.file.File/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) GetCatalog(ctx context.Context, in *FileCatalogRequest, opts ...grpc.CallOption) (*FileCatalogResponse, error) {
	out := new(FileCatalogResponse)
	err := c.cc.Invoke(ctx, "/sensory.api.v1.file.File/GetCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) GetCompleteCatalog(ctx context.Context, in *FileCompleteCatalogRequest, opts ...grpc.CallOption) (*FileCatalogResponse, error) {
	out := new(FileCatalogResponse)
	err := c.cc.Invoke(ctx, "/sensory.api.v1.file.File/GetCompleteCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) Download(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (File_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &File_ServiceDesc.Streams[0], "/sensory.api.v1.file.File/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type File_DownloadClient interface {
	Recv() (*FileResponse, error)
	grpc.ClientStream
}

type fileDownloadClient struct {
	grpc.ClientStream
}

func (x *fileDownloadClient) Recv() (*FileResponse, error) {
	m := new(FileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileServer is the server API for File service.
// All implementations must embed UnimplementedFileServer
// for forward compatibility
type FileServer interface {
	// Allows a client to request information about a file in the cloud.
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	GetInfo(context.Context, *FileRequest) (*FileInfo, error)
	// Allows a client to request a list of all the files it is allowed to access
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	GetCatalog(context.Context, *FileCatalogRequest) (*FileCatalogResponse, error)
	// Allows a root client to request the full list of files
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	GetCompleteCatalog(context.Context, *FileCompleteCatalogRequest) (*FileCatalogResponse, error)
	// Allows a client to request a file from the cloud.
	// Download streams a FileResponse until the entire file is downloaded
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	Download(*FileRequest, File_DownloadServer) error
	mustEmbedUnimplementedFileServer()
}

// UnimplementedFileServer must be embedded to have forward compatible implementations.
type UnimplementedFileServer struct {
}

func (UnimplementedFileServer) GetInfo(context.Context, *FileRequest) (*FileInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedFileServer) GetCatalog(context.Context, *FileCatalogRequest) (*FileCatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCatalog not implemented")
}
func (UnimplementedFileServer) GetCompleteCatalog(context.Context, *FileCompleteCatalogRequest) (*FileCatalogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompleteCatalog not implemented")
}
func (UnimplementedFileServer) Download(*FileRequest, File_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedFileServer) mustEmbedUnimplementedFileServer() {}

// UnsafeFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServer will
// result in compilation errors.
type UnsafeFileServer interface {
	mustEmbedUnimplementedFileServer()
}

func RegisterFileServer(s grpc.ServiceRegistrar, srv FileServer) {
	s.RegisterService(&File_ServiceDesc, srv)
}

func _File_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensory.api.v1.file.File/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).GetInfo(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_GetCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).GetCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensory.api.v1.file.File/GetCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).GetCatalog(ctx, req.(*FileCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_GetCompleteCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileCompleteCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).GetCompleteCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensory.api.v1.file.File/GetCompleteCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).GetCompleteCatalog(ctx, req.(*FileCompleteCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServer).Download(m, &fileDownloadServer{stream})
}

type File_DownloadServer interface {
	Send(*FileResponse) error
	grpc.ServerStream
}

type fileDownloadServer struct {
	grpc.ServerStream
}

func (x *fileDownloadServer) Send(m *FileResponse) error {
	return x.ServerStream.SendMsg(m)
}

// File_ServiceDesc is the grpc.ServiceDesc for File service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var File_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sensory.api.v1.file.File",
	HandlerType: (*FileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _File_GetInfo_Handler,
		},
		{
			MethodName: "GetCatalog",
			Handler:    _File_GetCatalog_Handler,
		},
		{
			MethodName: "GetCompleteCatalog",
			Handler:    _File_GetCompleteCatalog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Download",
			Handler:       _File_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/file/file.proto",
}
