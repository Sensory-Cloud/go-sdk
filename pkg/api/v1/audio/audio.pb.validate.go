// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/audio/audio.proto

package audio

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"

	common "github.com/Sensory-Cloud/go-sdk/pkg/api/common"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}

	_ = common.ModelType(0)

	_ = common.TechnologyType(0)
)

// define the regex for a UUID once up-front
var _audio_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetModelsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetModelsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetModelsRequestValidationError is the validation error returned by
// GetModelsRequest.Validate if the designated constraints aren't met.
type GetModelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModelsRequestValidationError) ErrorName() string { return "GetModelsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetModelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModelsRequestValidationError{}

// Validate checks the field values on AudioModel with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AudioModel) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for IsEnrollable

	// no validation rules for ModelType

	// no validation rules for FixedPhrase

	// no validation rules for SampleRate

	// no validation rules for Technology

	// no validation rules for IsLivenessSupported

	return nil
}

// AudioModelValidationError is the validation error returned by
// AudioModel.Validate if the designated constraints aren't met.
type AudioModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AudioModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AudioModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AudioModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AudioModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AudioModelValidationError) ErrorName() string { return "AudioModelValidationError" }

// Error satisfies the builtin error interface
func (e AudioModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAudioModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AudioModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AudioModelValidationError{}

// Validate checks the field values on GetModelsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetModelsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetModels() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetModelsResponseValidationError{
					field:  fmt.Sprintf("Models[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetModelsResponseValidationError is the validation error returned by
// GetModelsResponse.Validate if the designated constraints aren't met.
type GetModelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModelsResponseValidationError) ErrorName() string {
	return "GetModelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetModelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModelsResponseValidationError{}

// Validate checks the field values on CreateEnrollmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEnrollmentRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.StreamingRequest.(type) {

	case *CreateEnrollmentRequest_Config:

		if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateEnrollmentRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateEnrollmentRequest_AudioContent:
		// no validation rules for AudioContent

	default:
		return CreateEnrollmentRequestValidationError{
			field:  "StreamingRequest",
			reason: "value is required",
		}

	}

	return nil
}

// CreateEnrollmentRequestValidationError is the validation error returned by
// CreateEnrollmentRequest.Validate if the designated constraints aren't met.
type CreateEnrollmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEnrollmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEnrollmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEnrollmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEnrollmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEnrollmentRequestValidationError) ErrorName() string {
	return "CreateEnrollmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEnrollmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEnrollmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEnrollmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEnrollmentRequestValidationError{}

// Validate checks the field values on AuthenticateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AuthenticateRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.StreamingRequest.(type) {

	case *AuthenticateRequest_Config:

		if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthenticateRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AuthenticateRequest_AudioContent:
		// no validation rules for AudioContent

	default:
		return AuthenticateRequestValidationError{
			field:  "StreamingRequest",
			reason: "value is required",
		}

	}

	return nil
}

// AuthenticateRequestValidationError is the validation error returned by
// AuthenticateRequest.Validate if the designated constraints aren't met.
type AuthenticateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticateRequestValidationError) ErrorName() string {
	return "AuthenticateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticateRequestValidationError{}

// Validate checks the field values on ValidateEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ValidateEventRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.StreamingRequest.(type) {

	case *ValidateEventRequest_Config:

		if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValidateEventRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ValidateEventRequest_AudioContent:
		// no validation rules for AudioContent

	default:
		return ValidateEventRequestValidationError{
			field:  "StreamingRequest",
			reason: "value is required",
		}

	}

	return nil
}

// ValidateEventRequestValidationError is the validation error returned by
// ValidateEventRequest.Validate if the designated constraints aren't met.
type ValidateEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateEventRequestValidationError) ErrorName() string {
	return "ValidateEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateEventRequestValidationError{}

// Validate checks the field values on TranscribeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TranscribeRequest) Validate() error {
	if m == nil {
		return nil
	}

	switch m.StreamingRequest.(type) {

	case *TranscribeRequest_Config:

		if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TranscribeRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *TranscribeRequest_AudioContent:
		// no validation rules for AudioContent

	default:
		return TranscribeRequestValidationError{
			field:  "StreamingRequest",
			reason: "value is required",
		}

	}

	return nil
}

// TranscribeRequestValidationError is the validation error returned by
// TranscribeRequest.Validate if the designated constraints aren't met.
type TranscribeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TranscribeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TranscribeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TranscribeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TranscribeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TranscribeRequestValidationError) ErrorName() string {
	return "TranscribeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TranscribeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTranscribeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TranscribeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TranscribeRequestValidationError{}

// Validate checks the field values on CreateEnrollmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEnrollmentResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PercentComplete

	// no validation rules for AudioEnergy

	// no validation rules for EnrollmentId

	// no validation rules for ModelName

	// no validation rules for ModelVersion

	// no validation rules for ModelPrompt

	// no validation rules for PercentSegmentComplete

	return nil
}

// CreateEnrollmentResponseValidationError is the validation error returned by
// CreateEnrollmentResponse.Validate if the designated constraints aren't met.
type CreateEnrollmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEnrollmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEnrollmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEnrollmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEnrollmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEnrollmentResponseValidationError) ErrorName() string {
	return "CreateEnrollmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEnrollmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEnrollmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEnrollmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEnrollmentResponseValidationError{}

// Validate checks the field values on AuthenticateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AuthenticateResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AudioEnergy

	// no validation rules for Success

	if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthenticateResponseValidationError{
				field:  "Token",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	// no validation rules for EnrollmentId

	// no validation rules for ModelPrompt

	// no validation rules for PercentSegmentComplete

	return nil
}

// AuthenticateResponseValidationError is the validation error returned by
// AuthenticateResponse.Validate if the designated constraints aren't met.
type AuthenticateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticateResponseValidationError) ErrorName() string {
	return "AuthenticateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticateResponseValidationError{}

// Validate checks the field values on ValidateEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ValidateEventResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AudioEnergy

	// no validation rules for Success

	// no validation rules for ResultId

	// no validation rules for Score

	return nil
}

// ValidateEventResponseValidationError is the validation error returned by
// ValidateEventResponse.Validate if the designated constraints aren't met.
type ValidateEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateEventResponseValidationError) ErrorName() string {
	return "ValidateEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateEventResponseValidationError{}

// Validate checks the field values on TranscribeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TranscribeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AudioEnergy

	// no validation rules for Transcript

	// no validation rules for IsPartialResult

	return nil
}

// TranscribeResponseValidationError is the validation error returned by
// TranscribeResponse.Validate if the designated constraints aren't met.
type TranscribeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TranscribeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TranscribeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TranscribeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TranscribeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TranscribeResponseValidationError) ErrorName() string {
	return "TranscribeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TranscribeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTranscribeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TranscribeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TranscribeResponseValidationError{}

// Validate checks the field values on CreateEnrollmentConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEnrollmentConfig) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAudio() == nil {
		return CreateEnrollmentConfigValidationError{
			field:  "Audio",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAudio()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateEnrollmentConfigValidationError{
				field:  "Audio",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 127 {
		return CreateEnrollmentConfigValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 127 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetDeviceId()); l < 1 || l > 127 {
		return CreateEnrollmentConfigValidationError{
			field:  "DeviceId",
			reason: "value length must be between 1 and 127 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetModelName()); l < 1 || l > 255 {
		return CreateEnrollmentConfigValidationError{
			field:  "ModelName",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetDescription()) > 1023 {
		return CreateEnrollmentConfigValidationError{
			field:  "Description",
			reason: "value length must be at most 1023 runes",
		}
	}

	// no validation rules for IsLivenessEnabled

	switch m.EnrollLength.(type) {

	case *CreateEnrollmentConfig_EnrollmentNumUtterances:

		if val := m.GetEnrollmentNumUtterances(); val < 0 || val > 10 {
			return CreateEnrollmentConfigValidationError{
				field:  "EnrollmentNumUtterances",
				reason: "value must be inside range [0, 10]",
			}
		}

	case *CreateEnrollmentConfig_EnrollmentDuration:

		if val := m.GetEnrollmentDuration(); val < 0 || val > 15 {
			return CreateEnrollmentConfigValidationError{
				field:  "EnrollmentDuration",
				reason: "value must be inside range [0, 15]",
			}
		}

	}

	return nil
}

// CreateEnrollmentConfigValidationError is the validation error returned by
// CreateEnrollmentConfig.Validate if the designated constraints aren't met.
type CreateEnrollmentConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEnrollmentConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEnrollmentConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEnrollmentConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEnrollmentConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEnrollmentConfigValidationError) ErrorName() string {
	return "CreateEnrollmentConfigValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEnrollmentConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEnrollmentConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEnrollmentConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEnrollmentConfigValidationError{}

// Validate checks the field values on AuthenticateConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AuthenticateConfig) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAudio() == nil {
		return AuthenticateConfigValidationError{
			field:  "Audio",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAudio()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthenticateConfigValidationError{
				field:  "Audio",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DoIncludeToken

	if _, ok := ThresholdSensitivity_name[int32(m.GetSensitivity())]; !ok {
		return AuthenticateConfigValidationError{
			field:  "Sensitivity",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := AuthenticateConfig_ThresholdSecurity_name[int32(m.GetSecurity())]; !ok {
		return AuthenticateConfigValidationError{
			field:  "Security",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for IsLivenessEnabled

	switch m.AuthId.(type) {

	case *AuthenticateConfig_EnrollmentId:

		if err := m._validateUuid(m.GetEnrollmentId()); err != nil {
			return AuthenticateConfigValidationError{
				field:  "EnrollmentId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
		}

	case *AuthenticateConfig_EnrollmentGroupId:
		// no validation rules for EnrollmentGroupId

	default:
		return AuthenticateConfigValidationError{
			field:  "AuthId",
			reason: "value is required",
		}

	}

	return nil
}

func (m *AuthenticateConfig) _validateUuid(uuid string) error {
	if matched := _audio_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AuthenticateConfigValidationError is the validation error returned by
// AuthenticateConfig.Validate if the designated constraints aren't met.
type AuthenticateConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthenticateConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthenticateConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthenticateConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthenticateConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthenticateConfigValidationError) ErrorName() string {
	return "AuthenticateConfigValidationError"
}

// Error satisfies the builtin error interface
func (e AuthenticateConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthenticateConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthenticateConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthenticateConfigValidationError{}

// Validate checks the field values on ValidateEventConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ValidateEventConfig) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAudio() == nil {
		return ValidateEventConfigValidationError{
			field:  "Audio",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAudio()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidateEventConfigValidationError{
				field:  "Audio",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetModelName()); l < 1 || l > 255 {
		return ValidateEventConfigValidationError{
			field:  "ModelName",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 127 {
		return ValidateEventConfigValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 127 runes, inclusive",
		}
	}

	if _, ok := ThresholdSensitivity_name[int32(m.GetSensitivity())]; !ok {
		return ValidateEventConfigValidationError{
			field:  "Sensitivity",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// ValidateEventConfigValidationError is the validation error returned by
// ValidateEventConfig.Validate if the designated constraints aren't met.
type ValidateEventConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateEventConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateEventConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateEventConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateEventConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateEventConfigValidationError) ErrorName() string {
	return "ValidateEventConfigValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateEventConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateEventConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateEventConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateEventConfigValidationError{}

// Validate checks the field values on TranscribeConfig with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TranscribeConfig) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetAudio() == nil {
		return TranscribeConfigValidationError{
			field:  "Audio",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAudio()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TranscribeConfigValidationError{
				field:  "Audio",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetModelName()); l < 1 || l > 255 {
		return TranscribeConfigValidationError{
			field:  "ModelName",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 127 {
		return TranscribeConfigValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 127 runes, inclusive",
		}
	}

	return nil
}

// TranscribeConfigValidationError is the validation error returned by
// TranscribeConfig.Validate if the designated constraints aren't met.
type TranscribeConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TranscribeConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TranscribeConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TranscribeConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TranscribeConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TranscribeConfigValidationError) ErrorName() string { return "TranscribeConfigValidationError" }

// Error satisfies the builtin error interface
func (e TranscribeConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTranscribeConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TranscribeConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TranscribeConfigValidationError{}

// Validate checks the field values on AudioConfig with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AudioConfig) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := AudioConfig_AudioEncoding_name[int32(m.GetEncoding())]; !ok {
		return AudioConfigValidationError{
			field:  "Encoding",
			reason: "value must be one of the defined enum values",
		}
	}

	if m.GetSampleRateHertz() <= 8000 {
		return AudioConfigValidationError{
			field:  "SampleRateHertz",
			reason: "value must be greater than 8000",
		}
	}

	if m.GetAudioChannelCount() <= 0 {
		return AudioConfigValidationError{
			field:  "AudioChannelCount",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for LanguageCode

	return nil
}

// AudioConfigValidationError is the validation error returned by
// AudioConfig.Validate if the designated constraints aren't met.
type AudioConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AudioConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AudioConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AudioConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AudioConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AudioConfigValidationError) ErrorName() string { return "AudioConfigValidationError" }

// Error satisfies the builtin error interface
func (e AudioConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAudioConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AudioConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AudioConfigValidationError{}
