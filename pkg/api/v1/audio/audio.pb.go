// sensory.api.audio

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: v1/audio/audio.proto

package audio

import (
	common "github.com/Sensory-Cloud/go-sdk/pkg/api/common"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Specifies how sensitive the event threshold of the model should be
type ThresholdSensitivity int32

const (
	// Expects about 32 False Accepts per day for Fixed-Trigger models,
	// and about 10 False Accepts per day for SoundID models
	ThresholdSensitivity_LOWEST ThresholdSensitivity = 0
	// Expects about 16 False Accepts per day for Fixed-Trigger models,
	// and about 5 False Accepts per day for SoundID models
	ThresholdSensitivity_LOW ThresholdSensitivity = 1
	// Expects about 8 False Accepts per day for Fixed-Trigger models,
	// and about 3 False Accepts per day for SoundID models
	ThresholdSensitivity_MEDIUM ThresholdSensitivity = 2
	// Expects about 3 False Accepts per day for Fixed-Trigger models,
	// and about 2 False Accepts per day for SoundID models
	ThresholdSensitivity_HIGH ThresholdSensitivity = 3
	// Expects about 2 False Accepts per day for Fixed-Trigger models,
	// and about 1 False Accept per day for SoundID models
	ThresholdSensitivity_HIGHEST ThresholdSensitivity = 4
)

// Enum value maps for ThresholdSensitivity.
var (
	ThresholdSensitivity_name = map[int32]string{
		0: "LOWEST",
		1: "LOW",
		2: "MEDIUM",
		3: "HIGH",
		4: "HIGHEST",
	}
	ThresholdSensitivity_value = map[string]int32{
		"LOWEST":  0,
		"LOW":     1,
		"MEDIUM":  2,
		"HIGH":    3,
		"HIGHEST": 4,
	}
)

func (x ThresholdSensitivity) Enum() *ThresholdSensitivity {
	p := new(ThresholdSensitivity)
	*p = x
	return p
}

func (x ThresholdSensitivity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThresholdSensitivity) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_audio_audio_proto_enumTypes[0].Descriptor()
}

func (ThresholdSensitivity) Type() protoreflect.EnumType {
	return &file_v1_audio_audio_proto_enumTypes[0]
}

func (x ThresholdSensitivity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThresholdSensitivity.Descriptor instead.
func (ThresholdSensitivity) EnumDescriptor() ([]byte, []int) {
	return file_v1_audio_audio_proto_rawDescGZIP(), []int{0}
}

// Specifies the authentication security mode
type AuthenticateConfig_ThresholdSecurity int32

const (
	// Default  Setting.  Targets  low  Imposter  Accept  (IA).  Recommended  when  TSSV  is  used  solely  for
	// biometric authentication. Generally this mode assumes the user will produce the voice password in
	// isolation (rather than part of a voice-query) and over short listening windows (e.g., 7 seconds or
	// less).  This  provides  the  ultimate  rejection  of  imposter  voices  at  the  expense  of  false-rejects,
	// particularly in high-noise environments 5 dB SNR and below.
	AuthenticateConfig_HIGH AuthenticateConfig_ThresholdSecurity = 0
	// Targets low False Reject (FR). Recommended to achieve low false reject or for applications where
	// errors in imposter accept are not considered severe. Provides reduced rejection in extremely noisy
	// environments. This mode is typically selected when TSSV is used in conjunction with a front-end
	// fixed-trigger or part of a combined solution for voice-triggering in which the goal may be to gently
	// reduce  voice-trigger  false  accepts  in  the  presence  of  noise,  or  to  reduce  the  chances  that  non-
	// enrollees who say the wake word might accidentally cause an always-listening device to false-fire.
	AuthenticateConfig_LOW AuthenticateConfig_ThresholdSecurity = 1
)

// Enum value maps for AuthenticateConfig_ThresholdSecurity.
var (
	AuthenticateConfig_ThresholdSecurity_name = map[int32]string{
		0: "HIGH",
		1: "LOW",
	}
	AuthenticateConfig_ThresholdSecurity_value = map[string]int32{
		"HIGH": 0,
		"LOW":  1,
	}
)

func (x AuthenticateConfig_ThresholdSecurity) Enum() *AuthenticateConfig_ThresholdSecurity {
	p := new(AuthenticateConfig_ThresholdSecurity)
	*p = x
	return p
}

func (x AuthenticateConfig_ThresholdSecurity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthenticateConfig_ThresholdSecurity) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_audio_audio_proto_enumTypes[1].Descriptor()
}

func (AuthenticateConfig_ThresholdSecurity) Type() protoreflect.EnumType {
	return &file_v1_audio_audio_proto_enumTypes[1]
}

func (x AuthenticateConfig_ThresholdSecurity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthenticateConfig_ThresholdSecurity.Descriptor instead.
func (AuthenticateConfig_ThresholdSecurity) EnumDescriptor() ([]byte, []int) {
	return file_v1_audio_audio_proto_rawDescGZIP(), []int{12, 0}
}

// The encoding of the audio data sent in the request.
type AudioConfig_AudioEncoding int32

const (
	// Uncompressed 16-bit signed little-endian samples (Linear PCM).
	AudioConfig_LINEAR16 AudioConfig_AudioEncoding = 0
	// `FLAC` (Free Lossless Audio
	// Codec) is the recommended encoding because it is
	// lossless--therefore recognition is not compromised--and
	// requires only about half the bandwidth of `LINEAR16`.
	AudioConfig_FLAC AudioConfig_AudioEncoding = 1
	// 8-bit samples that compand 14-bit audio samples using G.711 PCMU/mu-law.
	AudioConfig_MULAW AudioConfig_AudioEncoding = 2
)

// Enum value maps for AudioConfig_AudioEncoding.
var (
	AudioConfig_AudioEncoding_name = map[int32]string{
		0: "LINEAR16",
		1: "FLAC",
		2: "MULAW",
	}
	AudioConfig_AudioEncoding_value = map[string]int32{
		"LINEAR16": 0,
		"FLAC":     1,
		"MULAW":    2,
	}
)

func (x AudioConfig_AudioEncoding) Enum() *AudioConfig_AudioEncoding {
	p := new(AudioConfig_AudioEncoding)
	*p = x
	return p
}

func (x AudioConfig_AudioEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioConfig_AudioEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_audio_audio_proto_enumTypes[2].Descriptor()
}

func (AudioConfig_AudioEncoding) Type() protoreflect.EnumType {
	return &file_v1_audio_audio_proto_enumTypes[2]
}

func (x AudioConfig_AudioEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioConfig_AudioEncoding.Descriptor instead.
func (AudioConfig_AudioEncoding) EnumDescriptor() ([]byte, []int) {
	return file_v1_audio_audio_proto_rawDescGZIP(), []int{15, 0}
}

// Request to get a list of the available models
type GetModelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetModelsRequest) Reset() {
	*x = GetModelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_audio_audio_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelsRequest) ProtoMessage() {}

func (x *GetModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_audio_audio_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelsRequest.ProtoReflect.Descriptor instead.
func (*GetModelsRequest) Descriptor() ([]byte, []int) {
	return file_v1_audio_audio_proto_rawDescGZIP(), []int{0}
}

// A model that is available for use
type AudioModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the model
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Boolean representing if a model can be used in enrollment
	IsEnrollable bool `protobuf:"varint,2,opt,name=isEnrollable,proto3" json:"isEnrollable,omitempty"`
	// Model type
	ModelType common.ModelType `protobuf:"varint,3,opt,name=modelType,proto3,enum=sensory.api.common.ModelType" json:"modelType,omitempty"`
	// Specific phrase used for enrollment (if applicable)
	FixedPhrase string `protobuf:"bytes,4,opt,name=fixedPhrase,proto3" json:"fixedPhrase,omitempty"`
	// Required sampling rate for the data
	SampleRate int32 `protobuf:"varint,5,opt,name=sampleRate,proto3" json:"sampleRate,omitempty"`
	// List of versions available for this model
	Versions []string `protobuf:"bytes,6,rep,name=versions,proto3" json:"versions,omitempty"`
	// The technology backing this model
	Technology common.TechnologyType `protobuf:"varint,7,opt,name=technology,proto3,enum=sensory.api.common.TechnologyType" json:"technology,omitempty"`
	// Indicates if liveness is supported by this model
	IsLivenessSupported bool `protobuf:"varint,8,opt,name=isLivenessSupported,proto3" json:"isLivenessSupported,omitempty"`
}

func (x *AudioModel) Reset() {
	*x = AudioModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_audio_audio_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioModel) ProtoMessage() {}

func (x *AudioModel) ProtoReflect() protoreflect.Message {
	mi := &file_v1_audio_audio_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioModel.ProtoReflect.Descriptor instead.
func (*AudioModel) Descriptor() ([]byte, []int) {
	return file_v1_audio_audio_proto_rawDescGZIP(), []int{1}
}

func (x *AudioModel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AudioModel) GetIsEnrollable() bool {
	if x != nil {
		return x.IsEnrollable
	}
	return false
}

func (x *AudioModel) GetModelType() common.ModelType {
	if x != nil {
		return x.ModelType
	}
	return common.ModelType_VOICE_BIOMETRIC_TEXT_DEPENDENT
}

func (x *AudioModel) GetFixedPhrase() string {
	if x != nil {
		return x.FixedPhrase
	}
	return ""
}

func (x *AudioModel) GetSampleRate() int32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

func (x *AudioModel) GetVersions() []string {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *AudioModel) GetTechnology() common.TechnologyType {
	if x != nil {
		return x.Technology
	}
	return common.TechnologyType_NOT_SET
}

func (x *AudioModel) GetIsLivenessSupported() bool {
	if x != nil {
		return x.IsLivenessSupported
	}
	return false
}

// Response containing the models currently available
type GetModelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Models []*AudioModel `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty"` // List of supported models
}

func (x *GetModelsResponse) Reset() {
	*x = GetModelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_audio_audio_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetModelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelsResponse) ProtoMessage() {}

func (x *GetModelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_audio_audio_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelsResponse.ProtoReflect.Descriptor instead.
func (*GetModelsResponse) Descriptor() ([]byte, []int) {
	return file_v1_audio_audio_proto_rawDescGZIP(), []int{2}
}

func (x *GetModelsResponse) GetModels() []*AudioModel {
	if x != nil {
		return x.Models
	}
	return nil
}

// The top-level message sent by the client for the `CreateEnrollment` method.
// Multiple `CreateEnrollmentRequest` messages are sent in a stream. The first message
// must contain a `config` message and must not contain `audioContent`.
// All subsequent messages must contain `audioContent` and
// must not contain a `config` message.
type CreateEnrollmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The streaming request, which is either a config or audio content.
	//
	// Types that are assignable to StreamingRequest:
	//	*CreateEnrollmentRequest_Config
	//	*CreateEnrollmentRequest_AudioContent
	StreamingRequest isCreateEnrollmentRequest_StreamingRequest `protobuf_oneof:"streamingRequest"`
}

func (x *CreateEnrollmentRequest) Reset() {
	*x = CreateEnrollmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_audio_audio_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEnrollmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnrollmentRequest) ProtoMessage() {}

func (x *CreateEnrollmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_audio_audio_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnrollmentRequest.ProtoReflect.Descriptor instead.
func (*CreateEnrollmentRequest) Descriptor() ([]byte, []int) {
	return file_v1_audio_audio_proto_rawDescGZIP(), []int{3}
}

func (m *CreateEnrollmentRequest) GetStreamingRequest() isCreateEnrollmentRequest_StreamingRequest {
	if m != nil {
		return m.StreamingRequest
	}
	return nil
}

func (x *CreateEnrollmentRequest) GetConfig() *CreateEnrollmentConfig {
	if x, ok := x.GetStreamingRequest().(*CreateEnrollmentRequest_Config); ok {
		return x.Config
	}
	return nil
}

func (x *CreateEnrollmentRequest) GetAudioContent() []byte {
	if x, ok := x.GetStreamingRequest().(*CreateEnrollmentRequest_AudioContent); ok {
		return x.AudioContent
	}
	return nil
}

type isCreateEnrollmentRequest_StreamingRequest interface {
	isCreateEnrollmentRequest_StreamingRequest()
}

type CreateEnrollmentRequest_Config struct {
	// Provides information that specifies how to process the
	// request. The first `CreateEnrollmentRequest` message must contain a
	// `config`  message.
	Config *CreateEnrollmentConfig `protobuf:"bytes,1,opt,name=config,proto3,oneof"`
}

type CreateEnrollmentRequest_AudioContent struct {
	// The audio data to be recognized. Sequential chunks of audio data are sent
	// in sequential `CreateEnrollmentRequest` messages. The first
	// `CreateEnrollmentRequest` message must not contain `audioContent` data
	// and all subsequent `CreateEnrollmentRequest` messages must contain
	// `audioContent` data. The audio bytes must be encoded as specified in
	// `AudioConfig`.
	AudioContent []byte `protobuf:"bytes,2,opt,name=audioContent,proto3,oneof"`
}

func (*CreateEnrollmentRequest_Config) isCreateEnrollmentRequest_StreamingRequest() {}

func (*CreateEnrollmentRequest_AudioContent) isCreateEnrollmentRequest_StreamingRequest() {}

// The top-level message sent by the client for the `Authenticate` method.
// Multiple `AuthenticateRequest` messages are sent in a stream. The first message
// must contain a `config` message and must not contain `audioContent`.
// All subsequent messages must contain `audioContent` and
// must not contain a `config` message.
type AuthenticateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The streaming request, which is either a config or audio content.
	//
	// Types that are assignable to StreamingRequest:
	//	*AuthenticateRequest_Config
	//	*AuthenticateRequest_AudioContent
	StreamingRequest isAuthenticateRequest_StreamingRequest `protobuf_oneof:"streamingRequest"`
}

func (x *AuthenticateRequest) Reset() {
	*x = AuthenticateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_audio_audio_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateRequest) ProtoMessage() {}

func (x *AuthenticateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_audio_audio_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateRequest) Descriptor() ([]byte, []int) {
	return file_v1_audio_audio_proto_rawDescGZIP(), []int{4}
}

func (m *AuthenticateRequest) GetStreamingRequest() isAuthenticateRequest_StreamingRequest {
	if m != nil {
		return m.StreamingRequest
	}
	return nil
}

func (x *AuthenticateRequest) GetConfig() *AuthenticateConfig {
	if x, ok := x.GetStreamingRequest().(*AuthenticateRequest_Config); ok {
		return x.Config
	}
	return nil
}

func (x *AuthenticateRequest) GetAudioContent() []byte {
	if x, ok := x.GetStreamingRequest().(*AuthenticateRequest_AudioContent); ok {
		return x.AudioContent
	}
	return nil
}

type isAuthenticateRequest_StreamingRequest interface {
	isAuthenticateRequest_StreamingRequest()
}

type AuthenticateRequest_Config struct {
	// Provides information that specifies how to process the
	// request. The first `AuthenticateRequest` message must contain a
	// `config`  message.
	Config *AuthenticateConfig `protobuf:"bytes,1,opt,name=config,proto3,oneof"`
}

type AuthenticateRequest_AudioContent struct {
	// The audio data to be recognized. Sequential chunks of audio data are sent
	// in sequential `AuthenticateRequest` messages. The first
	// `AuthenticateRequest` message must not contain `audioContent` data
	// and all subsequent `AuthenticateRequest` messages must contain
	// `audioContent` data. The audio bytes must be encoded as specified in
	// `AuthenticateConfig`.
	AudioContent []byte `protobuf:"bytes,2,opt,name=audioContent,proto3,oneof"`
}

func (*AuthenticateRequest_Config) isAuthenticateRequest_StreamingRequest() {}

func (*AuthenticateRequest_AudioContent) isAuthenticateRequest_StreamingRequest() {}

// The top-level message sent by the client for the `ValidateEvent` method.
// Multiple `ValidateEventRequest` messages are sent in a stream. The first message
// must contain a `config` message and must not contain `audioContent`.
// All subsequent messages must contain `audioContent` and
// must not contain a `config` message.
type ValidateEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The streaming request, which is either a config or audio content.
	//
	// Types that are assignable to StreamingRequest:
	//	*ValidateEventRequest_Config
	//	*ValidateEventRequest_AudioContent
	StreamingRequest isValidateEventRequest_StreamingRequest `protobuf_oneof:"streamingRequest"`
}

func (x *ValidateEventRequest) Reset() {
	*x = ValidateEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_audio_audio_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateEventRequest) ProtoMessage() {}

func (x *ValidateEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_audio_audio_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateEventRequest.ProtoReflect.Descriptor instead.
func (*ValidateEventRequest) Descriptor() ([]byte, []int) {
	return file_v1_audio_audio_proto_rawDescGZIP(), []int{5}
}

func (m *ValidateEventRequest) GetStreamingRequest() isValidateEventRequest_StreamingRequest {
	if m != nil {
		return m.StreamingRequest
	}
	return nil
}

func (x *ValidateEventRequest) GetConfig() *ValidateEventConfig {
	if x, ok := x.GetStreamingRequest().(*ValidateEventRequest_Config); ok {
		return x.Config
	}
	return nil
}

func (x *ValidateEventRequest) GetAudioContent() []byte {
	if x, ok := x.GetStreamingRequest().(*ValidateEventRequest_AudioContent); ok {
		return x.AudioContent
	}
	return nil
}

type isValidateEventRequest_StreamingRequest interface {
	isValidateEventRequest_StreamingRequest()
}

type ValidateEventRequest_Config struct {
	// Provides information that specifies how to process the
	// request. The first `ValidateEventRequest` message must contain a
	// `config`  message.
	Config *ValidateEventConfig `protobuf:"bytes,1,opt,name=config,proto3,oneof"`
}

type ValidateEventRequest_AudioContent struct {
	// The audio data to be recognized. Sequential chunks of audio data are sent
	// in sequential `ValidateEventRequest` messages. The first
	// `ValidateEventRequest` message must not contain `audioContent` data
	// and all subsequent `ValidateEventRequest` messages must contain
	// `audioContent` data. The audio bytes must be encoded as specified in
	// `ValidateEventConfig`.
	AudioContent []byte `protobuf:"bytes,2,opt,name=audioContent,proto3,oneof"`
}

func (*ValidateEventRequest_Config) isValidateEventRequest_StreamingRequest() {}

func (*ValidateEventRequest_AudioContent) isValidateEventRequest_StreamingRequest() {}

// The top-level message sent by the client for the `Transcribe` method.
// Multiple `TranscribeRequest` messages are sent in a stream. The first message
// must contain a `config` message and must not contain `audioContent`.
// All subsequent messages must contain `audioContent` and
// must not contain a `config` message.
type TranscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The streaming request, which is either a config or audio content.
	//
	// Types that are assignable to StreamingRequest:
	//	*TranscribeRequest_Config
	//	*TranscribeRequest_AudioContent
	StreamingRequest isTranscribeRequest_StreamingRequest `protobuf_oneof:"streamingRequest"`
}

func (x *TranscribeRequest) Reset() {
	*x = TranscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_audio_audio_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscribeRequest) ProtoMessage() {}

func (x *TranscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_audio_audio_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscribeRequest.ProtoReflect.Descriptor instead.
func (*TranscribeRequest) Descriptor() ([]byte, []int) {
	return file_v1_audio_audio_proto_rawDescGZIP(), []int{6}
}

func (m *TranscribeRequest) GetStreamingRequest() isTranscribeRequest_StreamingRequest {
	if m != nil {
		return m.StreamingRequest
	}
	return nil
}

func (x *TranscribeRequest) GetConfig() *TranscribeConfig {
	if x, ok := x.GetStreamingRequest().(*TranscribeRequest_Config); ok {
		return x.Config
	}
	return nil
}

func (x *TranscribeRequest) GetAudioContent() []byte {
	if x, ok := x.GetStreamingRequest().(*TranscribeRequest_AudioContent); ok {
		return x.AudioContent
	}
	return nil
}

type isTranscribeRequest_StreamingRequest interface {
	isTranscribeRequest_StreamingRequest()
}

type TranscribeRequest_Config struct {
	// Provides information that specifies how to process the
	// request. The first `TranscribeRequest` message must contain a
	// `config`  message.
	Config *TranscribeConfig `protobuf:"bytes,1,opt,name=config,proto3,oneof"`
}

type TranscribeRequest_AudioContent struct {
	// The audio data to be recognized. Sequential chunks of audio data are sent
	// in sequential `TranscribeRequest` messages. The first
	// `TranscribeRequest` message must not contain `audioContent` data
	// and all subsequent `TranscribeRequest` messages must contain
	// `audioContent` data. The audio bytes must be encoded as specified in
	// `TranscribeConfig`.
	AudioContent []byte `protobuf:"bytes,2,opt,name=audioContent,proto3,oneof"`
}

func (*TranscribeRequest_Config) isTranscribeRequest_StreamingRequest() {}

func (*TranscribeRequest_AudioContent) isTranscribeRequest_StreamingRequest() {}

// Response to an enrollment request
type CreateEnrollmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Percent Complete as values between 0 and 100
	PercentComplete int64 `protobuf:"varint,1,opt,name=percentComplete,proto3" json:"percentComplete,omitempty"`
	// Relative energy of the processed audio as a value between 0 and 1
	AudioEnergy float32 `protobuf:"fixed32,2,opt,name=audioEnergy,proto3" json:"audioEnergy,omitempty"`
	// If enrollment is successful, this value will be the unique Enrollment ID
	EnrollmentId string `protobuf:"bytes,3,opt,name=enrollmentId,proto3" json:"enrollmentId,omitempty"`
	// Model used for enrollment
	ModelName string `protobuf:"bytes,4,opt,name=modelName,proto3" json:"modelName,omitempty"`
	// Model version used for enrollment
	ModelVersion string `protobuf:"bytes,5,opt,name=modelVersion,proto3" json:"modelVersion,omitempty"`
	// Model prompt instructs the user to say something during enrollment
	ModelPrompt string `protobuf:"bytes,6,opt,name=modelPrompt,proto3" json:"modelPrompt,omitempty"`
	// Percent complete as values between 0 and 100 indicating the progress of the current enrollment segment.
	// This is relevent in liveness enrollment where multiple groups of numbers must be spoken.
	PercentSegmentComplete int64 `protobuf:"varint,7,opt,name=percentSegmentComplete,proto3" json:"percentSegmentComplete,omitempty"`
}

func (x *CreateEnrollmentResponse) Reset() {
	*x = CreateEnrollmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_audio_audio_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEnrollmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnrollmentResponse) ProtoMessage() {}

func (x *CreateEnrollmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_audio_audio_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnrollmentResponse.ProtoReflect.Descriptor instead.
func (*CreateEnrollmentResponse) Descriptor() ([]byte, []int) {
	return file_v1_audio_audio_proto_rawDescGZIP(), []int{7}
}

func (x *CreateEnrollmentResponse) GetPercentComplete() int64 {
	if x != nil {
		return x.PercentComplete
	}
	return 0
}

func (x *CreateEnrollmentResponse) GetAudioEnergy() float32 {
	if x != nil {
		return x.AudioEnergy
	}
	return 0
}

func (x *CreateEnrollmentResponse) GetEnrollmentId() string {
	if x != nil {
		return x.EnrollmentId
	}
	return ""
}

func (x *CreateEnrollmentResponse) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *CreateEnrollmentResponse) GetModelVersion() string {
	if x != nil {
		return x.ModelVersion
	}
	return ""
}

func (x *CreateEnrollmentResponse) GetModelPrompt() string {
	if x != nil {
		return x.ModelPrompt
	}
	return ""
}

func (x *CreateEnrollmentResponse) GetPercentSegmentComplete() int64 {
	if x != nil {
		return x.PercentSegmentComplete
	}
	return 0
}

// Response to an authentication request
type AuthenticateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Relative energy of the processed audio as a value between 0 and 1
	AudioEnergy float32 `protobuf:"fixed32,1,opt,name=audioEnergy,proto3" json:"audioEnergy,omitempty"`
	// Success / Failure bit
	Success bool `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	// Optional token that will be returned upon a successful authentication if doIncludeToken is set to true in the AuthenticateConfig
	Token *common.TokenResponse `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	// The userID of the authenticated user
	// Useful when evaluating enrollment groups
	UserId string `protobuf:"bytes,4,opt,name=userId,proto3" json:"userId,omitempty"`
	// The enrollmentID of the authenticated user
	// Useful when evaluating enrollment groups
	EnrollmentId string `protobuf:"bytes,5,opt,name=enrollmentId,proto3" json:"enrollmentId,omitempty"`
	// Model prompt instructs the user to say something during authentication
	ModelPrompt string `protobuf:"bytes,6,opt,name=modelPrompt,proto3" json:"modelPrompt,omitempty"`
	// Percent complete as values between 0 and 100 indicating the progress of the current authentication segment.
	// This is relevent in liveness enrollment where multiple numbers must be spoken.
	PercentSegmentComplete int64 `protobuf:"varint,7,opt,name=percentSegmentComplete,proto3" json:"percentSegmentComplete,omitempty"`
}

func (x *AuthenticateResponse) Reset() {
	*x = AuthenticateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_audio_audio_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateResponse) ProtoMessage() {}

func (x *AuthenticateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_audio_audio_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateResponse.ProtoReflect.Descriptor instead.
func (*AuthenticateResponse) Descriptor() ([]byte, []int) {
	return file_v1_audio_audio_proto_rawDescGZIP(), []int{8}
}

func (x *AuthenticateResponse) GetAudioEnergy() float32 {
	if x != nil {
		return x.AudioEnergy
	}
	return 0
}

func (x *AuthenticateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AuthenticateResponse) GetToken() *common.TokenResponse {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *AuthenticateResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AuthenticateResponse) GetEnrollmentId() string {
	if x != nil {
		return x.EnrollmentId
	}
	return ""
}

func (x *AuthenticateResponse) GetModelPrompt() string {
	if x != nil {
		return x.ModelPrompt
	}
	return ""
}

func (x *AuthenticateResponse) GetPercentSegmentComplete() int64 {
	if x != nil {
		return x.PercentSegmentComplete
	}
	return 0
}

// Response from a ValidateEventRequest
type ValidateEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Relative energy of the processed audio as a value between 0 and 1
	AudioEnergy float32 `protobuf:"fixed32,1,opt,name=audioEnergy,proto3" json:"audioEnergy,omitempty"`
	// Success / Failure bit
	Success bool `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	// Indicates the id of the particular sound that was recognized.
	// Useful for combined models where multiple sound events can be recognized by the same model.
	ResultId string `protobuf:"bytes,3,opt,name=resultId,proto3" json:"resultId,omitempty"`
	// The score of the event between -100 to +100. Smaller values typically indicate an invalid sound while larger values would generally indicate a detected sound.
	Score float32 `protobuf:"fixed32,4,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *ValidateEventResponse) Reset() {
	*x = ValidateEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_audio_audio_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateEventResponse) ProtoMessage() {}

func (x *ValidateEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_audio_audio_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateEventResponse.ProtoReflect.Descriptor instead.
func (*ValidateEventResponse) Descriptor() ([]byte, []int) {
	return file_v1_audio_audio_proto_rawDescGZIP(), []int{9}
}

func (x *ValidateEventResponse) GetAudioEnergy() float32 {
	if x != nil {
		return x.AudioEnergy
	}
	return 0
}

func (x *ValidateEventResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ValidateEventResponse) GetResultId() string {
	if x != nil {
		return x.ResultId
	}
	return ""
}

func (x *ValidateEventResponse) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

// Response from a TranscribeRequest
type TranscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Relative energy of the processed audio as a value between 0 and 1
	AudioEnergy float32 `protobuf:"fixed32,1,opt,name=audioEnergy,proto3" json:"audioEnergy,omitempty"`
	// Text of the current transcript
	Transcript string `protobuf:"bytes,2,opt,name=transcript,proto3" json:"transcript,omitempty"`
	// Indicates if the returned transcript is an intermediate result
	IsPartialResult bool `protobuf:"varint,3,opt,name=isPartialResult,proto3" json:"isPartialResult,omitempty"`
}

func (x *TranscribeResponse) Reset() {
	*x = TranscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_audio_audio_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscribeResponse) ProtoMessage() {}

func (x *TranscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_audio_audio_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscribeResponse.ProtoReflect.Descriptor instead.
func (*TranscribeResponse) Descriptor() ([]byte, []int) {
	return file_v1_audio_audio_proto_rawDescGZIP(), []int{10}
}

func (x *TranscribeResponse) GetAudioEnergy() float32 {
	if x != nil {
		return x.AudioEnergy
	}
	return 0
}

func (x *TranscribeResponse) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

func (x *TranscribeResponse) GetIsPartialResult() bool {
	if x != nil {
		return x.IsPartialResult
	}
	return false
}

// Provides information for an audio-based enrollment
type CreateEnrollmentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Provides information that specifies how to
	// process the request.
	Audio *AudioConfig `protobuf:"bytes,1,opt,name=audio,proto3" json:"audio,omitempty"`
	// The unique user Identifer. This value should be a unique email address or username known by the user.
	UserId string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	// The unique device Identifer. This value should be something retrieved by the devie prior to enrollment (like MAC Address)
	// this value is used to identify a device uniquely across multiple enrollments
	DeviceId string `protobuf:"bytes,3,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	// Name of background model to be enrolled in
	// Background models can be retrieved from the GetModels() gRPC call
	ModelName string `protobuf:"bytes,4,opt,name=modelName,proto3" json:"modelName,omitempty"`
	// Description of the enrollment as entered by the user.
	// Max length is 1023 characters
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Enable liveness if supported by the audio model
	IsLivenessEnabled bool `protobuf:"varint,6,opt,name=isLivenessEnabled,proto3" json:"isLivenessEnabled,omitempty"`
	// Optional: Controls the allowed length of enrollment. Longer enrollments are generally more accurate, but take more time to perform.
	// For text-independent enrollments, enrollmentDuration may be set. For any other enrollment, enrollmentNumUtterances may be set.
	//
	// Types that are assignable to EnrollLength:
	//	*CreateEnrollmentConfig_EnrollmentNumUtterances
	//	*CreateEnrollmentConfig_EnrollmentDuration
	EnrollLength isCreateEnrollmentConfig_EnrollLength `protobuf_oneof:"enrollLength"`
}

func (x *CreateEnrollmentConfig) Reset() {
	*x = CreateEnrollmentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_audio_audio_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEnrollmentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnrollmentConfig) ProtoMessage() {}

func (x *CreateEnrollmentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_v1_audio_audio_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnrollmentConfig.ProtoReflect.Descriptor instead.
func (*CreateEnrollmentConfig) Descriptor() ([]byte, []int) {
	return file_v1_audio_audio_proto_rawDescGZIP(), []int{11}
}

func (x *CreateEnrollmentConfig) GetAudio() *AudioConfig {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *CreateEnrollmentConfig) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateEnrollmentConfig) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *CreateEnrollmentConfig) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *CreateEnrollmentConfig) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateEnrollmentConfig) GetIsLivenessEnabled() bool {
	if x != nil {
		return x.IsLivenessEnabled
	}
	return false
}

func (m *CreateEnrollmentConfig) GetEnrollLength() isCreateEnrollmentConfig_EnrollLength {
	if m != nil {
		return m.EnrollLength
	}
	return nil
}

func (x *CreateEnrollmentConfig) GetEnrollmentNumUtterances() uint32 {
	if x, ok := x.GetEnrollLength().(*CreateEnrollmentConfig_EnrollmentNumUtterances); ok {
		return x.EnrollmentNumUtterances
	}
	return 0
}

func (x *CreateEnrollmentConfig) GetEnrollmentDuration() float32 {
	if x, ok := x.GetEnrollLength().(*CreateEnrollmentConfig_EnrollmentDuration); ok {
		return x.EnrollmentDuration
	}
	return 0
}

type isCreateEnrollmentConfig_EnrollLength interface {
	isCreateEnrollmentConfig_EnrollLength()
}

type CreateEnrollmentConfig_EnrollmentNumUtterances struct {
	// The number of times a specific phrase should be uttered during an enrollment.
	// The default value is 4.
	EnrollmentNumUtterances uint32 `protobuf:"varint,7,opt,name=enrollmentNumUtterances,proto3,oneof"`
}

type CreateEnrollmentConfig_EnrollmentDuration struct {
	// The allowed length of text-independent enrollments (such as digit liveness)
	// The default value is 12.5 seconds without liveness and 8 seconds with liveness.
	EnrollmentDuration float32 `protobuf:"fixed32,8,opt,name=enrollmentDuration,proto3,oneof"`
}

func (*CreateEnrollmentConfig_EnrollmentNumUtterances) isCreateEnrollmentConfig_EnrollLength() {}

func (*CreateEnrollmentConfig_EnrollmentDuration) isCreateEnrollmentConfig_EnrollLength() {}

// Provides information for an audio-based authentication
type AuthenticateConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Provides information that specifies how to
	// process the request.
	Audio *AudioConfig `protobuf:"bytes,1,opt,name=audio,proto3" json:"audio,omitempty"`
	// An identifier for what to authenticate against, either an individual enrollment or a group of enrollments
	//
	// Types that are assignable to AuthId:
	//	*AuthenticateConfig_EnrollmentId
	//	*AuthenticateConfig_EnrollmentGroupId
	AuthId isAuthenticateConfig_AuthId `protobuf_oneof:"authId"`
	// A boolean indicating if the response should include an OAuth token for the user associated with the enrollmentId
	// The OAuth token will only be returned if the authentication is successful.
	// It's important to note there will be a minor performance hit to authentication, as OAuth token generation is a semi-expensive operation.
	DoIncludeToken bool `protobuf:"varint,4,opt,name=doIncludeToken,proto3" json:"doIncludeToken,omitempty"`
	// The model sensitivity
	Sensitivity ThresholdSensitivity `protobuf:"varint,5,opt,name=sensitivity,proto3,enum=sensory.api.v1.audio.ThresholdSensitivity" json:"sensitivity,omitempty"`
	// The model security
	Security AuthenticateConfig_ThresholdSecurity `protobuf:"varint,6,opt,name=security,proto3,enum=sensory.api.v1.audio.AuthenticateConfig_ThresholdSecurity" json:"security,omitempty"`
	// Enable liveness if supported by the audio model
	IsLivenessEnabled bool `protobuf:"varint,7,opt,name=isLivenessEnabled,proto3" json:"isLivenessEnabled,omitempty"`
}

func (x *AuthenticateConfig) Reset() {
	*x = AuthenticateConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_audio_audio_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateConfig) ProtoMessage() {}

func (x *AuthenticateConfig) ProtoReflect() protoreflect.Message {
	mi := &file_v1_audio_audio_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateConfig.ProtoReflect.Descriptor instead.
func (*AuthenticateConfig) Descriptor() ([]byte, []int) {
	return file_v1_audio_audio_proto_rawDescGZIP(), []int{12}
}

func (x *AuthenticateConfig) GetAudio() *AudioConfig {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (m *AuthenticateConfig) GetAuthId() isAuthenticateConfig_AuthId {
	if m != nil {
		return m.AuthId
	}
	return nil
}

func (x *AuthenticateConfig) GetEnrollmentId() string {
	if x, ok := x.GetAuthId().(*AuthenticateConfig_EnrollmentId); ok {
		return x.EnrollmentId
	}
	return ""
}

func (x *AuthenticateConfig) GetEnrollmentGroupId() string {
	if x, ok := x.GetAuthId().(*AuthenticateConfig_EnrollmentGroupId); ok {
		return x.EnrollmentGroupId
	}
	return ""
}

func (x *AuthenticateConfig) GetDoIncludeToken() bool {
	if x != nil {
		return x.DoIncludeToken
	}
	return false
}

func (x *AuthenticateConfig) GetSensitivity() ThresholdSensitivity {
	if x != nil {
		return x.Sensitivity
	}
	return ThresholdSensitivity_LOWEST
}

func (x *AuthenticateConfig) GetSecurity() AuthenticateConfig_ThresholdSecurity {
	if x != nil {
		return x.Security
	}
	return AuthenticateConfig_HIGH
}

func (x *AuthenticateConfig) GetIsLivenessEnabled() bool {
	if x != nil {
		return x.IsLivenessEnabled
	}
	return false
}

type isAuthenticateConfig_AuthId interface {
	isAuthenticateConfig_AuthId()
}

type AuthenticateConfig_EnrollmentId struct {
	// Unique identifier created at enrollment
	EnrollmentId string `protobuf:"bytes,2,opt,name=enrollmentId,proto3,oneof"`
}

type AuthenticateConfig_EnrollmentGroupId struct {
	// Unique identifier for an enrollment group
	EnrollmentGroupId string `protobuf:"bytes,3,opt,name=enrollmentGroupId,proto3,oneof"`
}

func (*AuthenticateConfig_EnrollmentId) isAuthenticateConfig_AuthId() {}

func (*AuthenticateConfig_EnrollmentGroupId) isAuthenticateConfig_AuthId() {}

// Provides information for an audio-based event recognition
type ValidateEventConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Provides information that specifies how to
	// process the request.
	Audio *AudioConfig `protobuf:"bytes,1,opt,name=audio,proto3" json:"audio,omitempty"`
	// Name of model to validate against
	// Models can be retrieved from the GetModels() gRPC call
	ModelName string `protobuf:"bytes,2,opt,name=modelName,proto3" json:"modelName,omitempty"`
	// The unique user Identifer
	UserId string `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	// The model sensitivity
	Sensitivity ThresholdSensitivity `protobuf:"varint,4,opt,name=sensitivity,proto3,enum=sensory.api.v1.audio.ThresholdSensitivity" json:"sensitivity,omitempty"`
}

func (x *ValidateEventConfig) Reset() {
	*x = ValidateEventConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_audio_audio_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateEventConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateEventConfig) ProtoMessage() {}

func (x *ValidateEventConfig) ProtoReflect() protoreflect.Message {
	mi := &file_v1_audio_audio_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateEventConfig.ProtoReflect.Descriptor instead.
func (*ValidateEventConfig) Descriptor() ([]byte, []int) {
	return file_v1_audio_audio_proto_rawDescGZIP(), []int{13}
}

func (x *ValidateEventConfig) GetAudio() *AudioConfig {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *ValidateEventConfig) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *ValidateEventConfig) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ValidateEventConfig) GetSensitivity() ThresholdSensitivity {
	if x != nil {
		return x.Sensitivity
	}
	return ThresholdSensitivity_LOWEST
}

// Provides information for an audio-based transcription
type TranscribeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Provides information that specifies how to
	// process the request.
	Audio *AudioConfig `protobuf:"bytes,1,opt,name=audio,proto3" json:"audio,omitempty"`
	// Name of model to validate against
	// Models can be retrieved from the GetModels() gRPC call
	ModelName string `protobuf:"bytes,2,opt,name=modelName,proto3" json:"modelName,omitempty"`
	// The unique user Identifer
	UserId string `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *TranscribeConfig) Reset() {
	*x = TranscribeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_audio_audio_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscribeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscribeConfig) ProtoMessage() {}

func (x *TranscribeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_v1_audio_audio_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscribeConfig.ProtoReflect.Descriptor instead.
func (*TranscribeConfig) Descriptor() ([]byte, []int) {
	return file_v1_audio_audio_proto_rawDescGZIP(), []int{14}
}

func (x *TranscribeConfig) GetAudio() *AudioConfig {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *TranscribeConfig) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *TranscribeConfig) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// Provides audio configuration information that specifies how to process the request.
type AudioConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Encoding of all sent audio data.
	Encoding AudioConfig_AudioEncoding `protobuf:"varint,1,opt,name=encoding,proto3,enum=sensory.api.v1.audio.AudioConfig_AudioEncoding" json:"encoding,omitempty"`
	// Sample rate in Hertz of the audio data sent in all messages. 16000Hz is optimal.
	SampleRateHertz int32 `protobuf:"varint,2,opt,name=sampleRateHertz,proto3" json:"sampleRateHertz,omitempty"`
	// The number of channels in the input audio data.
	AudioChannelCount int32 `protobuf:"varint,3,opt,name=audioChannelCount,proto3" json:"audioChannelCount,omitempty"`
	// Required. The language of the supplied audio as a
	// [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag.
	// Example: "en-US".
	LanguageCode string `protobuf:"bytes,4,opt,name=languageCode,proto3" json:"languageCode,omitempty"`
}

func (x *AudioConfig) Reset() {
	*x = AudioConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_audio_audio_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioConfig) ProtoMessage() {}

func (x *AudioConfig) ProtoReflect() protoreflect.Message {
	mi := &file_v1_audio_audio_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioConfig.ProtoReflect.Descriptor instead.
func (*AudioConfig) Descriptor() ([]byte, []int) {
	return file_v1_audio_audio_proto_rawDescGZIP(), []int{15}
}

func (x *AudioConfig) GetEncoding() AudioConfig_AudioEncoding {
	if x != nil {
		return x.Encoding
	}
	return AudioConfig_LINEAR16
}

func (x *AudioConfig) GetSampleRateHertz() int32 {
	if x != nil {
		return x.SampleRateHertz
	}
	return 0
}

func (x *AudioConfig) GetAudioChannelCount() int32 {
	if x != nil {
		return x.AudioChannelCount
	}
	return 0
}

func (x *AudioConfig) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

var File_v1_audio_audio_proto protoreflect.FileDescriptor

var file_v1_audio_audio_proto_rawDesc = []byte{
	0x0a, 0x14, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd5,
	0x02, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x45, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x50, 0x68, 0x72, 0x61, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x50, 0x68,
	0x72, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x42, 0x0a, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65,
	0x73, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x22, 0x4d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x06, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x46, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0c, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42,
	0x17, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x98, 0x01, 0x0a, 0x13, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x42, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x10, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x03,
	0xf8, 0x42, 0x01, 0x22, 0x9a, 0x01, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x24, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x03, 0xf8, 0x42, 0x01,
	0x22, 0x94, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x17,
	0x0a, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xa6, 0x02, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x22, 0xa1, 0x02, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e,
	0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x36, 0x0a, 0x16,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x80, 0x01, 0x0a,
	0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x69, 0x73, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xc3, 0x03, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x05, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x21, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa,
	0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x7f, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x01, 0x18, 0x7f, 0x52, 0x08, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x10, 0x01, 0x18, 0xff, 0x01, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xff, 0x07,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x11, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65,
	0x6e, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x17, 0x65,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x55, 0x74, 0x74, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xfa, 0x42,
	0x06, 0x2a, 0x04, 0x18, 0x0a, 0x28, 0x00, 0x48, 0x00, 0x52, 0x17, 0x65, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x55, 0x74, 0x74, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x41, 0x0a, 0x12, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0f,
	0xfa, 0x42, 0x0c, 0x0a, 0x0a, 0x1d, 0x00, 0x00, 0x70, 0x41, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x48,
	0x00, 0x52, 0x12, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xfe, 0x03, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x05,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12,
	0x2e, 0x0a, 0x0c, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x48,
	0x00, 0x52, 0x0c, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x11, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x65, 0x6e,
	0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x64, 0x6f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x6f, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x56, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12,
	0x60, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3a, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73,
	0x4c, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0x26, 0x0a, 0x11, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x42, 0x0d, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x49,
	0x64, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xfd, 0x01, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41,
	0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x12, 0x28, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x01,
	0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06,
	0x72, 0x04, 0x10, 0x01, 0x18, 0x7f, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x56,
	0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0xa2, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x05, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x28,
	0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xff, 0x01, 0x52, 0x09, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10,
	0x01, 0x18, 0x7f, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa7, 0x02, 0x0a, 0x0b,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x55, 0x0a, 0x08, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x32, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x48, 0x65, 0x72, 0x74, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x1a, 0x03, 0x20, 0xc0, 0x3e, 0x52, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x48, 0x65, 0x72, 0x74, 0x7a, 0x12, 0x35, 0x0a, 0x11, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x11, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x32, 0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x31, 0x36, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x46, 0x4c, 0x41, 0x43, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x55,
	0x4c, 0x41, 0x57, 0x10, 0x02, 0x2a, 0x4e, 0x0a, 0x14, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x0a, 0x0a,
	0x06, 0x4c, 0x4f, 0x57, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x49, 0x47, 0x48,
	0x45, 0x53, 0x54, 0x10, 0x04, 0x32, 0x6d, 0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x12, 0x5e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x12, 0x26, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x32, 0xf7, 0x01, 0x0a, 0x0f, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x69,
	0x6f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x77, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x2e, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x6b, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x29, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x32, 0x7d,
	0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x6e, 0x0a,
	0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2a,
	0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x32, 0x7c, 0x0a,
	0x13, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x65, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x65, 0x0a, 0x17, 0x69,
	0x6f, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x42, 0x16, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x79, 0x41,
	0x70, 0x69, 0x56, 0x31, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x79, 0x2d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x64,
	0x6b, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_audio_audio_proto_rawDescOnce sync.Once
	file_v1_audio_audio_proto_rawDescData = file_v1_audio_audio_proto_rawDesc
)

func file_v1_audio_audio_proto_rawDescGZIP() []byte {
	file_v1_audio_audio_proto_rawDescOnce.Do(func() {
		file_v1_audio_audio_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_audio_audio_proto_rawDescData)
	})
	return file_v1_audio_audio_proto_rawDescData
}

var file_v1_audio_audio_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_v1_audio_audio_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_v1_audio_audio_proto_goTypes = []interface{}{
	(ThresholdSensitivity)(0),                 // 0: sensory.api.v1.audio.ThresholdSensitivity
	(AuthenticateConfig_ThresholdSecurity)(0), // 1: sensory.api.v1.audio.AuthenticateConfig.ThresholdSecurity
	(AudioConfig_AudioEncoding)(0),            // 2: sensory.api.v1.audio.AudioConfig.AudioEncoding
	(*GetModelsRequest)(nil),                  // 3: sensory.api.v1.audio.GetModelsRequest
	(*AudioModel)(nil),                        // 4: sensory.api.v1.audio.AudioModel
	(*GetModelsResponse)(nil),                 // 5: sensory.api.v1.audio.GetModelsResponse
	(*CreateEnrollmentRequest)(nil),           // 6: sensory.api.v1.audio.CreateEnrollmentRequest
	(*AuthenticateRequest)(nil),               // 7: sensory.api.v1.audio.AuthenticateRequest
	(*ValidateEventRequest)(nil),              // 8: sensory.api.v1.audio.ValidateEventRequest
	(*TranscribeRequest)(nil),                 // 9: sensory.api.v1.audio.TranscribeRequest
	(*CreateEnrollmentResponse)(nil),          // 10: sensory.api.v1.audio.CreateEnrollmentResponse
	(*AuthenticateResponse)(nil),              // 11: sensory.api.v1.audio.AuthenticateResponse
	(*ValidateEventResponse)(nil),             // 12: sensory.api.v1.audio.ValidateEventResponse
	(*TranscribeResponse)(nil),                // 13: sensory.api.v1.audio.TranscribeResponse
	(*CreateEnrollmentConfig)(nil),            // 14: sensory.api.v1.audio.CreateEnrollmentConfig
	(*AuthenticateConfig)(nil),                // 15: sensory.api.v1.audio.AuthenticateConfig
	(*ValidateEventConfig)(nil),               // 16: sensory.api.v1.audio.ValidateEventConfig
	(*TranscribeConfig)(nil),                  // 17: sensory.api.v1.audio.TranscribeConfig
	(*AudioConfig)(nil),                       // 18: sensory.api.v1.audio.AudioConfig
	(common.ModelType)(0),                     // 19: sensory.api.common.ModelType
	(common.TechnologyType)(0),                // 20: sensory.api.common.TechnologyType
	(*common.TokenResponse)(nil),              // 21: sensory.api.common.TokenResponse
}
var file_v1_audio_audio_proto_depIdxs = []int32{
	19, // 0: sensory.api.v1.audio.AudioModel.modelType:type_name -> sensory.api.common.ModelType
	20, // 1: sensory.api.v1.audio.AudioModel.technology:type_name -> sensory.api.common.TechnologyType
	4,  // 2: sensory.api.v1.audio.GetModelsResponse.models:type_name -> sensory.api.v1.audio.AudioModel
	14, // 3: sensory.api.v1.audio.CreateEnrollmentRequest.config:type_name -> sensory.api.v1.audio.CreateEnrollmentConfig
	15, // 4: sensory.api.v1.audio.AuthenticateRequest.config:type_name -> sensory.api.v1.audio.AuthenticateConfig
	16, // 5: sensory.api.v1.audio.ValidateEventRequest.config:type_name -> sensory.api.v1.audio.ValidateEventConfig
	17, // 6: sensory.api.v1.audio.TranscribeRequest.config:type_name -> sensory.api.v1.audio.TranscribeConfig
	21, // 7: sensory.api.v1.audio.AuthenticateResponse.token:type_name -> sensory.api.common.TokenResponse
	18, // 8: sensory.api.v1.audio.CreateEnrollmentConfig.audio:type_name -> sensory.api.v1.audio.AudioConfig
	18, // 9: sensory.api.v1.audio.AuthenticateConfig.audio:type_name -> sensory.api.v1.audio.AudioConfig
	0,  // 10: sensory.api.v1.audio.AuthenticateConfig.sensitivity:type_name -> sensory.api.v1.audio.ThresholdSensitivity
	1,  // 11: sensory.api.v1.audio.AuthenticateConfig.security:type_name -> sensory.api.v1.audio.AuthenticateConfig.ThresholdSecurity
	18, // 12: sensory.api.v1.audio.ValidateEventConfig.audio:type_name -> sensory.api.v1.audio.AudioConfig
	0,  // 13: sensory.api.v1.audio.ValidateEventConfig.sensitivity:type_name -> sensory.api.v1.audio.ThresholdSensitivity
	18, // 14: sensory.api.v1.audio.TranscribeConfig.audio:type_name -> sensory.api.v1.audio.AudioConfig
	2,  // 15: sensory.api.v1.audio.AudioConfig.encoding:type_name -> sensory.api.v1.audio.AudioConfig.AudioEncoding
	3,  // 16: sensory.api.v1.audio.AudioModels.GetModels:input_type -> sensory.api.v1.audio.GetModelsRequest
	6,  // 17: sensory.api.v1.audio.AudioBiometrics.CreateEnrollment:input_type -> sensory.api.v1.audio.CreateEnrollmentRequest
	7,  // 18: sensory.api.v1.audio.AudioBiometrics.Authenticate:input_type -> sensory.api.v1.audio.AuthenticateRequest
	8,  // 19: sensory.api.v1.audio.AudioEvents.ValidateEvent:input_type -> sensory.api.v1.audio.ValidateEventRequest
	9,  // 20: sensory.api.v1.audio.AudioTranscriptions.Transcribe:input_type -> sensory.api.v1.audio.TranscribeRequest
	5,  // 21: sensory.api.v1.audio.AudioModels.GetModels:output_type -> sensory.api.v1.audio.GetModelsResponse
	10, // 22: sensory.api.v1.audio.AudioBiometrics.CreateEnrollment:output_type -> sensory.api.v1.audio.CreateEnrollmentResponse
	11, // 23: sensory.api.v1.audio.AudioBiometrics.Authenticate:output_type -> sensory.api.v1.audio.AuthenticateResponse
	12, // 24: sensory.api.v1.audio.AudioEvents.ValidateEvent:output_type -> sensory.api.v1.audio.ValidateEventResponse
	13, // 25: sensory.api.v1.audio.AudioTranscriptions.Transcribe:output_type -> sensory.api.v1.audio.TranscribeResponse
	21, // [21:26] is the sub-list for method output_type
	16, // [16:21] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_v1_audio_audio_proto_init() }
func file_v1_audio_audio_proto_init() {
	if File_v1_audio_audio_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_audio_audio_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_audio_audio_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_audio_audio_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetModelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_audio_audio_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEnrollmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_audio_audio_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_audio_audio_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_audio_audio_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_audio_audio_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEnrollmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_audio_audio_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_audio_audio_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_audio_audio_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_audio_audio_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEnrollmentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_audio_audio_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_audio_audio_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateEventConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_audio_audio_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscribeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_audio_audio_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_audio_audio_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CreateEnrollmentRequest_Config)(nil),
		(*CreateEnrollmentRequest_AudioContent)(nil),
	}
	file_v1_audio_audio_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*AuthenticateRequest_Config)(nil),
		(*AuthenticateRequest_AudioContent)(nil),
	}
	file_v1_audio_audio_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ValidateEventRequest_Config)(nil),
		(*ValidateEventRequest_AudioContent)(nil),
	}
	file_v1_audio_audio_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*TranscribeRequest_Config)(nil),
		(*TranscribeRequest_AudioContent)(nil),
	}
	file_v1_audio_audio_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*CreateEnrollmentConfig_EnrollmentNumUtterances)(nil),
		(*CreateEnrollmentConfig_EnrollmentDuration)(nil),
	}
	file_v1_audio_audio_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*AuthenticateConfig_EnrollmentId)(nil),
		(*AuthenticateConfig_EnrollmentGroupId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_audio_audio_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_v1_audio_audio_proto_goTypes,
		DependencyIndexes: file_v1_audio_audio_proto_depIdxs,
		EnumInfos:         file_v1_audio_audio_proto_enumTypes,
		MessageInfos:      file_v1_audio_audio_proto_msgTypes,
	}.Build()
	File_v1_audio_audio_proto = out.File
	file_v1_audio_audio_proto_rawDesc = nil
	file_v1_audio_audio_proto_goTypes = nil
	file_v1_audio_audio_proto_depIdxs = nil
}
