// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package oauth

import (
	context "context"
	common "github.com/Sensory-Cloud/go-sdk/pkg/api/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OauthServiceClient is the client API for OauthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OauthServiceClient interface {
	// Obtain an OAuth token for the given credentials
	// Endpoint does not require an authorization token
	GetToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*common.TokenResponse, error)
	// Sign and return an OAuth token. The passed authorization token must have the SignToken authority.
	// Therefore, Devices are not allowed to make this request.
	// Sign does not validate credentials, and therefore should be used in specific circumstances where credentials are not required.
	// One common usecase for the Sign request is an Io server issuing a user-scoped token after a successful authentication.
	// Only a limited subset of of scopes may be requested from the SignToken request.
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	SignToken(ctx context.Context, in *SignTokenRequest, opts ...grpc.CallOption) (*common.TokenResponse, error)
	// Obtain information about oneself based on the passed OAuth token
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	GetWhoAmI(ctx context.Context, in *WhoAmIRequest, opts ...grpc.CallOption) (*WhoAmIResponse, error)
	// Retrieve a public key by ID. Public keys retrieved by this endpoint can be used
	// to validate tokens signed by the Sensory cloud.
	GetPublicKey(ctx context.Context, in *PublicKeyRequest, opts ...grpc.CallOption) (*PublicKeyResponse, error)
}

type oauthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOauthServiceClient(cc grpc.ClientConnInterface) OauthServiceClient {
	return &oauthServiceClient{cc}
}

func (c *oauthServiceClient) GetToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*common.TokenResponse, error) {
	out := new(common.TokenResponse)
	err := c.cc.Invoke(ctx, "/sensory.api.oauth.OauthService/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauthServiceClient) SignToken(ctx context.Context, in *SignTokenRequest, opts ...grpc.CallOption) (*common.TokenResponse, error) {
	out := new(common.TokenResponse)
	err := c.cc.Invoke(ctx, "/sensory.api.oauth.OauthService/SignToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauthServiceClient) GetWhoAmI(ctx context.Context, in *WhoAmIRequest, opts ...grpc.CallOption) (*WhoAmIResponse, error) {
	out := new(WhoAmIResponse)
	err := c.cc.Invoke(ctx, "/sensory.api.oauth.OauthService/GetWhoAmI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauthServiceClient) GetPublicKey(ctx context.Context, in *PublicKeyRequest, opts ...grpc.CallOption) (*PublicKeyResponse, error) {
	out := new(PublicKeyResponse)
	err := c.cc.Invoke(ctx, "/sensory.api.oauth.OauthService/GetPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OauthServiceServer is the server API for OauthService service.
// All implementations must embed UnimplementedOauthServiceServer
// for forward compatibility
type OauthServiceServer interface {
	// Obtain an OAuth token for the given credentials
	// Endpoint does not require an authorization token
	GetToken(context.Context, *TokenRequest) (*common.TokenResponse, error)
	// Sign and return an OAuth token. The passed authorization token must have the SignToken authority.
	// Therefore, Devices are not allowed to make this request.
	// Sign does not validate credentials, and therefore should be used in specific circumstances where credentials are not required.
	// One common usecase for the Sign request is an Io server issuing a user-scoped token after a successful authentication.
	// Only a limited subset of of scopes may be requested from the SignToken request.
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	SignToken(context.Context, *SignTokenRequest) (*common.TokenResponse, error)
	// Obtain information about oneself based on the passed OAuth token
	// Authorization metadata is required {"authorization": "Bearer <TOKEN>"}
	GetWhoAmI(context.Context, *WhoAmIRequest) (*WhoAmIResponse, error)
	// Retrieve a public key by ID. Public keys retrieved by this endpoint can be used
	// to validate tokens signed by the Sensory cloud.
	GetPublicKey(context.Context, *PublicKeyRequest) (*PublicKeyResponse, error)
	mustEmbedUnimplementedOauthServiceServer()
}

// UnimplementedOauthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOauthServiceServer struct {
}

func (UnimplementedOauthServiceServer) GetToken(context.Context, *TokenRequest) (*common.TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedOauthServiceServer) SignToken(context.Context, *SignTokenRequest) (*common.TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignToken not implemented")
}
func (UnimplementedOauthServiceServer) GetWhoAmI(context.Context, *WhoAmIRequest) (*WhoAmIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWhoAmI not implemented")
}
func (UnimplementedOauthServiceServer) GetPublicKey(context.Context, *PublicKeyRequest) (*PublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicKey not implemented")
}
func (UnimplementedOauthServiceServer) mustEmbedUnimplementedOauthServiceServer() {}

// UnsafeOauthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OauthServiceServer will
// result in compilation errors.
type UnsafeOauthServiceServer interface {
	mustEmbedUnimplementedOauthServiceServer()
}

func RegisterOauthServiceServer(s grpc.ServiceRegistrar, srv OauthServiceServer) {
	s.RegisterService(&OauthService_ServiceDesc, srv)
}

func _OauthService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensory.api.oauth.OauthService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthServiceServer).GetToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OauthService_SignToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthServiceServer).SignToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensory.api.oauth.OauthService/SignToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthServiceServer).SignToken(ctx, req.(*SignTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OauthService_GetWhoAmI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhoAmIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthServiceServer).GetWhoAmI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensory.api.oauth.OauthService/GetWhoAmI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthServiceServer).GetWhoAmI(ctx, req.(*WhoAmIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OauthService_GetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OauthServiceServer).GetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensory.api.oauth.OauthService/GetPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OauthServiceServer).GetPublicKey(ctx, req.(*PublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OauthService_ServiceDesc is the grpc.ServiceDesc for OauthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OauthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sensory.api.oauth.OauthService",
	HandlerType: (*OauthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _OauthService_GetToken_Handler,
		},
		{
			MethodName: "SignToken",
			Handler:    _OauthService_SignToken_Handler,
		},
		{
			MethodName: "GetWhoAmI",
			Handler:    _OauthService_GetWhoAmI_Handler,
		},
		{
			MethodName: "GetPublicKey",
			Handler:    _OauthService_GetPublicKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oauth/oauth.proto",
}
